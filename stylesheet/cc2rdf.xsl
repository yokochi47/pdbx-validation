<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet
  version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:owl="http://www.w3.org/2002/07/owl#"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:dcterms="http://purl.org/dc/terms/"
  xmlns:PDBx="http://pdbml.pdb.org/schema/pdbx-v50.xsd"
  xmlns:PDBo="http://rdf.wwpdb.org/schema/pdbx-v50.owl#"
  xmlns:ext="http://exslt.org/common" exclude-result-prefixes="PDBx ext">

  <xsl:include href="url-encode.xsl"/>

  <xsl:param name="primitive_type_mapping" select="'https://raw.githubusercontent.com/yokochi47/pdbx-validation/master/stylesheet/pdbx_primitive_type_mapping.xml'" required="no"/>
  <xsl:param name="type_mapping" select="document($primitive_type_mapping)"/>

  <xsl:output method="xml" encoding="UTF-8" indent="yes"/>
  <xsl:strip-space elements="*"/>
  <xsl:variable name="CC_ID"><xsl:value-of select="/PDBx:datablock/@datablockName"/></xsl:variable>
  <xsl:variable name="base">http://rdf.wwpdb.org/cc/<xsl:value-of select="$CC_ID"/></xsl:variable>
  <xsl:variable name="pdb_link">http://rdf.wwpdb.org/pdb/</xsl:variable>
  <xsl:variable name="chem_comp">http://rdf.wwpdb.org/cc/</xsl:variable>
  <xsl:variable name="pdbj">http://pdbj.org/chemie/summary/</xsl:variable>
  <xsl:variable name="rcsb">http://www.rcsb.org/ligand/</xsl:variable>
  <xsl:variable name="pdbe">http://www.ebi.ac.uk/pdbe-srv/pdbechem/chemicalCompound/show/</xsl:variable>
  <xsl:variable name="idorg">http://identifiers.org/</xsl:variable>
  <xsl:variable name="doi">http://doi.org/</xsl:variable>
  <xsl:variable name="pubmed">http://rdf.ncbi.nlm.nih.gov/pubmed/</xsl:variable>
  <xsl:variable name="taxonomy">http://purl.uniprot.org/taxonomy/</xsl:variable>
  <xsl:variable name="enzyme">http://purl.uniprot.org/enzyme/</xsl:variable>

  <xsl:template match="/">
    <rdf:RDF>
      <xsl:apply-templates/>
    </rdf:RDF>
  </xsl:template>

  <!-- level 1 -->
  <xsl:template match="/PDBx:datablock">
    <PDBo:datablock rdf:about="{$base}">
      <dcterms:identifier><xsl:value-of select="$CC_ID"/></dcterms:identifier>
      <dc:title><xsl:value-of select="PDBx:chem_compCategory/PDBx:chem_comp/PDBx:name/text()"/></dc:title>
      <rdfs:seeAlso rdf:resource="{$pdbj}{$CC_ID}"/>
      <rdfs:seeAlso rdf:resource="{$rcsb}{$CC_ID}"/>
      <rdfs:seeAlso rdf:resource="{$pdbe}{$CC_ID}"/>

      <PDBo:datablockName><xsl:value-of select="@datablockName"/></PDBo:datablockName>
      <xsl:apply-templates select="./*"/>
    </PDBo:datablock>
  </xsl:template>

  <!-- level 2 -->
  <xsl:template match="/PDBx:datablock/*">
    <xsl:element name="PDBo:has_{local-name(.)}">
      <xsl:element name="PDBo:{local-name(.)}">
	<xsl:attribute name="rdf:about">
	  <xsl:value-of select="concat($base,'/',local-name(.))"/>
	</xsl:attribute>
	<xsl:apply-templates>
	  <xsl:with-param name="base" select="$base"/>
	</xsl:apply-templates>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <!-- level 4 (element) -->
  <xsl:template match="/PDBx:datablock/*/*/*[not(xsi:nil) and text()!='']">
    <xsl:variable name="category_item"><xsl:value-of select="local-name(parent::node())"/></xsl:variable>
    <xsl:variable name="data_item"><xsl:value-of select="local-name()"/></xsl:variable>
    <xsl:variable name="tag_name"><xsl:value-of select="concat($category_item,'.',$data_item)"/></xsl:variable>
    <xsl:variable name="data_type"><xsl:value-of select="$type_mapping/primitive_type_mapping/category_item[@name=$category_item]/data_item[@name=$data_item]/@type"/></xsl:variable>
    <xsl:element name="PDBo:{$tag_name}">
      <xsl:if test="$data_type!=''">
	<xsl:attribute name="rdf:datatype"><xsl:value-of select="$data_type"/></xsl:attribute>
      </xsl:if>
      <xsl:value-of select="."/>
    </xsl:element>
  </xsl:template>

  <!-- level 4 (attribute) -->
  <xsl:template match="/PDBx:datablock/*/*/@*">
    <xsl:variable name="category_item"><xsl:value-of select="local-name(parent::node())"/></xsl:variable>
    <xsl:variable name="data_item"><xsl:value-of select="translate(name(),'@','')"/></xsl:variable>
    <xsl:variable name="tag_name"><xsl:value-of select="concat($category_item,'.',$data_item)"/></xsl:variable>
    <xsl:variable name="data_type"><xsl:value-of select="$type_mapping/primitive_type_mapping/category_item[@name=$category_item]/data_item[@name=$data_item]/@type"/></xsl:variable>
    <xsl:element name="PDBo:{$tag_name}">
      <xsl:if test="$data_type!=''">
	<xsl:attribute name="rdf:datatype"><xsl:value-of select="$data_type"/></xsl:attribute>
      </xsl:if>
      <xsl:value-of select="."/>
    </xsl:element>
  </xsl:template>

  <!-- level 4 (linked data) -->
  <xsl:template match="PDBx:chem_comp/PDBx:mon_nstd_parent_comp_id[text()!='']" mode="linked">
    <xsl:variable name="parent_comp_ids">
      <xsl:call-template name="tokenize">
	<xsl:with-param name="str" select="text()"/>
	<xsl:with-param name="substr">,</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:for-each select="ext:node-set($parent_comp_ids)/token">
      <xsl:variable name="parent_comp_id"><xsl:value-of select="translate(text(),' ','')"/></xsl:variable>
      <xsl:if test="string-length($parent_comp_id)!=0">
    <PDBo:link_to_parent_chem_comp rdf:resource="{$chem_comp}{$parent_comp_id}"/>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="PDBx:citation/PDBx:pdbx_database_id_DOI[text()!='']" mode="linked">
    <xsl:variable name="doi_url">
      <xsl:value-of select="$doi"/>
      <xsl:call-template name="replace-string">
	<xsl:with-param name="str">
	  <xsl:call-template name="replace-string">
	    <xsl:with-param name="str" select="text()"/>
	    <xsl:with-param name="replace">&lt;</xsl:with-param>
	    <xsl:with-param name="with">&amp;lt;</xsl:with-param>
	  </xsl:call-template>
	</xsl:with-param>
	<xsl:with-param name="replace">&gt;</xsl:with-param>
	<xsl:with-param name="with">&amp;gt;</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <PDBo:link_to_doi rdf:resource="{$doi_url}" rdfs:label="doi:{text()}"/>
  </xsl:template>

  <xsl:template match="PDBx:citation/PDBx:pdbx_database_id_PubMed[text()!='']" mode="linked">
    <PDBo:link_to_pubmed rdf:resource="{$pubmed}{text()}" rdfs:label="pubmed:{text()}"/>
    <dcterms:references rdf:resource="{$idorg}pubmed/{text()}" rdfs:label="pubmed:{text()}"/>
  </xsl:template>

  <xsl:template match="PDBx:pdbx_related_exp_data_set/PDBx:data_reference[text()!='']" mode="linked">
    <xsl:variable name="doi_url">
      <xsl:value-of select="$doi"/>
      <xsl:call-template name="replace-string">
        <xsl:with-param name="str">
          <xsl:call-template name="replace-string">
            <xsl:with-param name="str" select="text()"/>
            <xsl:with-param name="replace">&lt;</xsl:with-param>
            <xsl:with-param name="with">&amp;lt;</xsl:with-param>
          </xsl:call-template>
        </xsl:with-param>
        <xsl:with-param name="replace">&gt;</xsl:with-param>
        <xsl:with-param name="with">&amp;gt;</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <PDBo:link_to_doi rdf:resource="{$doi_url}" rdfs:label="doi:{text()}"/>
  </xsl:template>

  <xsl:template match="PDBx:pdbx_related_exp_data_set/PDBx:metadata_reference[text()!='']" mode="linked">
    <xsl:variable name="doi_url">
      <xsl:value-of select="$doi"/>
      <xsl:call-template name="replace-string">
        <xsl:with-param name="str">
          <xsl:call-template name="replace-string">
            <xsl:with-param name="str" select="text()"/>
            <xsl:with-param name="replace">&lt;</xsl:with-param>
            <xsl:with-param name="with">&amp;lt;</xsl:with-param>
          </xsl:call-template>
        </xsl:with-param>
        <xsl:with-param name="replace">&gt;</xsl:with-param>
        <xsl:with-param name="with">&amp;gt;</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <PDBo:link_to_doi rdf:resource="{$doi_url}" rdfs:label="doi:{text()}"/>
  </xsl:template>

  <xsl:template match="PDBx:entity_src_gen/PDBx:pdbx_gene_src_ncbi_taxonomy_id[text()!='']" mode="linked">
    <xsl:variable name="tax_list">
      <xsl:call-template name="tokenize">
	<xsl:with-param name="str" select="text()"/>
	<xsl:with-param name="substr">,</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:for-each select="ext:node-set($tax_list)/token">
      <xsl:variable name="tax"><xsl:value-of select="translate(text(),' ','')"/></xsl:variable>
      <xsl:if test="string-length($tax)!=0">
	<PDBo:link_to_taxonomy_source rdf:resource="{$taxonomy}{$tax}" rdfs:label="taxonomy:{$tax}"/>
	<rdfs:seeAlso rdf:resource="{$idorg}taxonomy/{$tax}" rdfs:label="taxonomy:{$tax}"/>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="PDBx:entity_src_gen/PDBx:pdbx_host_org_ncbi_taxonomy_id[text()!='']" mode="linked">
    <xsl:variable name="tax_list">
      <xsl:call-template name="tokenize">
	<xsl:with-param name="str" select="text()"/>
	<xsl:with-param name="substr">,</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:for-each select="ext:node-set($tax_list)/token">
      <xsl:variable name="tax"><xsl:value-of select="translate(text(),' ','')"/></xsl:variable>
      <xsl:if test="string-length($tax)!=0">
	<PDBo:link_to_taxonomy_host rdf:resource="{$taxonomy}{$tax}" rdfs:label="taxonomy:{$tax}"/>
	<rdfs:seeAlso rdf:resource="{$idorg}taxonomy/{$tax}" rdfs:label="taxonomy:{$tax}"/>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="PDBx:entity_src_nat/PDBx:pdbx_ncbi_taxonomy_id[text()!='']" mode="linked">
    <xsl:variable name="tax_list">
      <xsl:call-template name="tokenize">
	<xsl:with-param name="str" select="text()"/>
	<xsl:with-param name="substr">,</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:for-each select="ext:node-set($tax_list)/token">
      <xsl:variable name="tax"><xsl:value-of select="translate(text(),' ','')"/></xsl:variable>
      <xsl:if test="string-length($tax)!=0">
	<PDBo:link_to_taxonomy_source rdf:resource="{$taxonomy}{$tax}" rdfs:label="taxonomy:{$tax}"/>
	<rdfs:seeAlso rdf:resource="{$idorg}taxonomy/{$tax}" rdfs:label="taxonomy:{$tax}"/>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="PDBx:entity/PDBx:pdbx_ec[text()!='']" mode="linked">
    <xsl:variable name="ec_norm"><xsl:value-of select="normalize-space(text())"/></xsl:variable>
    <xsl:if test="$ec_norm!=''">
      <xsl:variable name="ec_list">
	<xsl:call-template name="tokenize">
	  <xsl:with-param name="str" select="$ec_norm"/>
	  <xsl:with-param name="substr">,</xsl:with-param>
	</xsl:call-template>
      </xsl:variable>
      <xsl:for-each select="ext:node-set($ec_list)/token">
	<xsl:variable name="ec"><xsl:value-of select="translate(text(),' ','')"/></xsl:variable>
	<xsl:if test="string-length($ec)!=0">
	  <PDBo:link_to_enzyme rdf:resource="{$enzyme}{$ec}" rdfs:label="enzyme:{$ec}"/>
	  <rdfs:seeAlso rdf:resource="{$idorg}ec-code/{$ec}" rdfs:label="ec-code:{$ec}"/>
	</xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <xsl:template match="PDBx:pdbx_database_related[@db_name='PDB' and @content_type!='split']/@db_id" mode="linked">
    <xsl:variable name="upper_code"><xsl:value-of select="translate(.,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:variable>
    <PDBo:link_to_pdb rdf:resource="{$pdb_link}{$upper_code}"/>
  </xsl:template>

  <xsl:template match="PDBx:pdbx_database_related[@db_name='PDB' and @content_type='split']/@db_id" mode="linked">
    <xsl:variable name="upper_code"><xsl:value-of select="translate(.,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:variable>
    <PDBo:link_to_pdb_split rdf:resource="{$pdb_link}{$upper_code}"/>
  </xsl:template>

  <xsl:template match="PDBx:pdbx_reference_molecule/PDBx:representative_PDB_id_code[text()!='']" mode="linked">
    <xsl:variable name="upper_code"><xsl:value-of select="translate(text(),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:variable>
    <PDBo:link_to_pdb rdf:resource="{$pdb_link}{$upper_code}"/>
  </xsl:template>
  <!-- level 3 templates follow -->
  <xsl:template match="PDBx:datablock/PDBx:array_dataCategory/PDBx:array_data">
      <xsl:variable name="array_id_truncated"><xsl:choose><xsl:when test="string-length(@array_id)&lt;64"><xsl:value-of select="@array_id"/></xsl:when><xsl:when test="contains(@array_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@array_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@array_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="array_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($array_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="binary_id_truncated"><xsl:choose><xsl:when test="string-length(@binary_id)&lt;64"><xsl:value-of select="@binary_id"/></xsl:when><xsl:when test="contains(@binary_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@binary_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@binary_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="binary_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($binary_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_data>
      <PDBo:array_data rdf:about="{$base}/array_data/{$array_id_encoded},{$binary_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@array_id!=''">
	<PDBo:reference_to_array_structure>
	  <rdf:Description rdf:about="{$base}/array_structure/">
	    <PDBo:referenced_by_array_data rdf:resource="{$base}/array_data/{$array_id_encoded},{$binary_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_array_structure>
	<!-- array_structureKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_data>
      </PDBo:has_array_data>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:array_intensitiesCategory/PDBx:array_intensities">
      <xsl:variable name="array_id_truncated"><xsl:choose><xsl:when test="string-length(@array_id)&lt;64"><xsl:value-of select="@array_id"/></xsl:when><xsl:when test="contains(@array_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@array_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@array_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="array_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($array_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="binary_id_truncated"><xsl:choose><xsl:when test="string-length(@binary_id)&lt;64"><xsl:value-of select="@binary_id"/></xsl:when><xsl:when test="contains(@binary_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@binary_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@binary_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="binary_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($binary_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_intensities>
      <PDBo:array_intensities rdf:about="{$base}/array_intensities/{$array_id_encoded},{$binary_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@array_id!=''">
	<PDBo:reference_to_array_structure>
	  <rdf:Description rdf:about="{$base}/array_structure/">
	    <PDBo:referenced_by_array_intensities rdf:resource="{$base}/array_intensities/{$array_id_encoded},{$binary_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_array_structure>
	<!-- array_structureKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_intensities>
      </PDBo:has_array_intensities>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:array_structureCategory/PDBx:array_structure">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_structure>
      <PDBo:array_structure rdf:about="{$base}/array_structure/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_structure>
      </PDBo:has_array_structure>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:array_structure_listCategory/PDBx:array_structure_list">
      <xsl:variable name="array_id_truncated"><xsl:choose><xsl:when test="string-length(@array_id)&lt;64"><xsl:value-of select="@array_id"/></xsl:when><xsl:when test="contains(@array_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@array_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@array_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="array_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($array_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_truncated"><xsl:choose><xsl:when test="string-length(@index)&lt;64"><xsl:value-of select="@index"/></xsl:when><xsl:when test="contains(@index,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_structure_list>
      <PDBo:array_structure_list rdf:about="{$base}/array_structure_list/{$array_id_encoded},{$index_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@array_id!=''">
	<PDBo:reference_to_array_structure>
	  <rdf:Description rdf:about="{$base}/array_structure/">
	    <PDBo:referenced_by_array_structure_list rdf:resource="{$base}/array_structure_list/{$array_id_encoded},{$index_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_array_structure>
	<!-- array_structureKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_structure_list>
      </PDBo:has_array_structure_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:array_structure_list_axisCategory/PDBx:array_structure_list_axis">
      <xsl:variable name="axis_id_truncated"><xsl:choose><xsl:when test="string-length(@axis_id)&lt;64"><xsl:value-of select="@axis_id"/></xsl:when><xsl:when test="contains(@axis_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@axis_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@axis_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="axis_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($axis_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="axis_set_id_truncated"><xsl:choose><xsl:when test="string-length(@axis_set_id)&lt;64"><xsl:value-of select="@axis_set_id"/></xsl:when><xsl:when test="contains(@axis_set_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@axis_set_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@axis_set_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="axis_set_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($axis_set_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_structure_list_axis>
      <PDBo:array_structure_list_axis rdf:about="{$base}/array_structure_list_axis/{$axis_id_encoded},{$axis_set_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_structure_list_axis>
      </PDBo:has_array_structure_list_axis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:array_structure_list_sectionCategory/PDBx:array_structure_list_section">
      <xsl:variable name="array_id_truncated"><xsl:choose><xsl:when test="string-length(@array_id)&lt;64"><xsl:value-of select="@array_id"/></xsl:when><xsl:when test="contains(@array_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@array_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@array_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="array_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($array_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_truncated"><xsl:choose><xsl:when test="string-length(@index)&lt;64"><xsl:value-of select="@index"/></xsl:when><xsl:when test="contains(@index,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_array_structure_list_section>
      <PDBo:array_structure_list_section rdf:about="{$base}/array_structure_list_section/{$array_id_encoded},{$id_encoded},{$index_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@array_id!=''">
	<PDBo:reference_to_array_structure>
	  <rdf:Description rdf:about="{$base}/array_structure/">
	    <PDBo:referenced_by_array_structure_list_section rdf:resource="{$base}/array_structure_list_section/{$array_id_encoded},{$id_encoded},{$index_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_array_structure>
	<!-- array_structureKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:array_structure_list_section>
      </PDBo:has_array_structure_list_section>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_siteCategory/PDBx:atom_site">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_site>
      <PDBo:atom_site rdf:about="{$base}/atom_site/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:type_symbol!=''">
	<PDBo:reference_to_atom_type>
	  <rdf:Description rdf:about="{$base}/atom_type/{translate(PDBx:type_symbol,' ^','__')}">
	    <PDBo:referenced_by_atom_site rdf:resource="{$base}/atom_site/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_type>
	<!-- atom_typeKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="PDBx:label_comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:label_comp_id,' ^','__')}">
	    <PDBo:referenced_by_atom_site rdf:resource="{$base}/atom_site/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="PDBx:label_entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:label_entity_id,' ^','__')}">
	    <PDBo:referenced_by_atom_site rdf:resource="{$base}/atom_site/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="PDBx:label_entity_id!='' and PDBx:label_asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/{translate(PDBx:label_entity_id,' ^','__')},{translate(PDBx:label_asym_id,' ^','__')}">
	    <PDBo:referenced_by_atom_site rdf:resource="{$base}/atom_site/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_0_1_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_site>
      </PDBo:has_atom_site>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_site_anisotropCategory/PDBx:atom_site_anisotrop">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_site_anisotrop>
      <PDBo:atom_site_anisotrop rdf:about="{$base}/atom_site_anisotrop/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:type_symbol!=''">
	<PDBo:reference_to_atom_type>
	  <rdf:Description rdf:about="{$base}/atom_type/{translate(PDBx:type_symbol,' ^','__')}">
	    <PDBo:referenced_by_atom_site_anisotrop rdf:resource="{$base}/atom_site_anisotrop/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_type>
	<!-- atom_typeKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_site_anisotrop>
      </PDBo:has_atom_site_anisotrop>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_sitesCategory/PDBx:atom_sites">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_sites>
      <PDBo:atom_sites rdf:about="{$base}/atom_sites/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_atom_sites rdf:resource="{$base}/atom_sites/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_sites>
      </PDBo:has_atom_sites>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_sites_altCategory/PDBx:atom_sites_alt">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_sites_alt>
      <PDBo:atom_sites_alt rdf:about="{$base}/atom_sites_alt/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_sites_alt>
      </PDBo:has_atom_sites_alt>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_sites_alt_ensCategory/PDBx:atom_sites_alt_ens">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_sites_alt_ens>
      <PDBo:atom_sites_alt_ens rdf:about="{$base}/atom_sites_alt_ens/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_sites_alt_ens>
      </PDBo:has_atom_sites_alt_ens>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_sites_alt_genCategory/PDBx:atom_sites_alt_gen">
      <xsl:variable name="alt_id_truncated"><xsl:choose><xsl:when test="string-length(@alt_id)&lt;64"><xsl:value-of select="@alt_id"/></xsl:when><xsl:when test="contains(@alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ens_id_truncated"><xsl:choose><xsl:when test="string-length(@ens_id)&lt;64"><xsl:value-of select="@ens_id"/></xsl:when><xsl:when test="contains(@ens_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ens_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ens_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ens_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ens_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_sites_alt_gen>
      <PDBo:atom_sites_alt_gen rdf:about="{$base}/atom_sites_alt_gen/{$alt_id_encoded},{$ens_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@alt_id!=''">
	<PDBo:reference_to_atom_sites_alt>
	  <rdf:Description rdf:about="{$base}/atom_sites_alt/">
	    <PDBo:referenced_by_atom_sites_alt_gen rdf:resource="{$base}/atom_sites_alt_gen/{$alt_id_encoded},{$ens_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_sites_alt>
	<!-- atom_sites_altKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="@ens_id!=''">
	<PDBo:reference_to_atom_sites_alt_ens>
	  <rdf:Description rdf:about="{$base}/atom_sites_alt_ens/">
	    <PDBo:referenced_by_atom_sites_alt_gen rdf:resource="{$base}/atom_sites_alt_gen/{$alt_id_encoded},{$ens_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_sites_alt_ens>
	<!-- atom_sites_alt_ensKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_sites_alt_gen>
      </PDBo:has_atom_sites_alt_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_sites_footnoteCategory/PDBx:atom_sites_footnote">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_sites_footnote>
      <PDBo:atom_sites_footnote rdf:about="{$base}/atom_sites_footnote/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_sites_footnote>
      </PDBo:has_atom_sites_footnote>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:atom_typeCategory/PDBx:atom_type">
      <xsl:variable name="symbol_truncated"><xsl:choose><xsl:when test="string-length(@symbol)&lt;64"><xsl:value-of select="@symbol"/></xsl:when><xsl:when test="contains(@symbol,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@symbol,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@symbol,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="symbol_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($symbol_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_atom_type>
      <PDBo:atom_type rdf:about="{$base}/atom_type/{$symbol_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:atom_type>
      </PDBo:has_atom_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:auditCategory/PDBx:audit">
      <xsl:variable name="revision_id_truncated"><xsl:choose><xsl:when test="string-length(@revision_id)&lt;64"><xsl:value-of select="@revision_id"/></xsl:when><xsl:when test="contains(@revision_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_audit>
      <PDBo:audit rdf:about="{$base}/audit/{$revision_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:audit>
      </PDBo:has_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:audit_authorCategory/PDBx:audit_author">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_audit_author>
      <PDBo:audit_author rdf:about="{$base}/audit_author/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:audit_author>
      </PDBo:has_audit_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:audit_conformCategory/PDBx:audit_conform">
      <xsl:variable name="dict_name_truncated"><xsl:choose><xsl:when test="string-length(@dict_name)&lt;64"><xsl:value-of select="@dict_name"/></xsl:when><xsl:when test="contains(@dict_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dict_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dict_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dict_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dict_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="dict_version_truncated"><xsl:choose><xsl:when test="string-length(@dict_version)&lt;64"><xsl:value-of select="@dict_version"/></xsl:when><xsl:when test="contains(@dict_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dict_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dict_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dict_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dict_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_audit_conform>
      <PDBo:audit_conform rdf:about="{$base}/audit_conform/{$dict_name_encoded},{$dict_version_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:audit_conform>
      </PDBo:has_audit_conform>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:audit_contact_authorCategory/PDBx:audit_contact_author">
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_audit_contact_author>
      <PDBo:audit_contact_author rdf:about="{$base}/audit_contact_author/{$name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:audit_contact_author>
      </PDBo:has_audit_contact_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:audit_linkCategory/PDBx:audit_link">
      <xsl:variable name="block_code_truncated"><xsl:choose><xsl:when test="string-length(@block_code)&lt;64"><xsl:value-of select="@block_code"/></xsl:when><xsl:when test="contains(@block_code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@block_code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@block_code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="block_code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($block_code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="block_description_truncated"><xsl:choose><xsl:when test="string-length(@block_description)&lt;64"><xsl:value-of select="@block_description"/></xsl:when><xsl:when test="contains(@block_description,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@block_description,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@block_description,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="block_description_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($block_description_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_audit_link>
      <PDBo:audit_link rdf:about="{$base}/audit_link/{$block_code_encoded},{$block_description_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:audit_link>
      </PDBo:has_audit_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:cellCategory/PDBx:cell">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_cell>
      <PDBo:cell rdf:about="{$base}/cell/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_cell rdf:resource="{$base}/cell/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:cell>
      </PDBo:has_cell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:cell_measurementCategory/PDBx:cell_measurement">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_cell_measurement>
      <PDBo:cell_measurement rdf:about="{$base}/cell_measurement/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_cell_measurement rdf:resource="{$base}/cell_measurement/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:cell_measurement>
      </PDBo:has_cell_measurement>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:cell_measurement_reflnCategory/PDBx:cell_measurement_refln">
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_cell_measurement_refln>
      <PDBo:cell_measurement_refln rdf:about="{$base}/cell_measurement_refln/{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:cell_measurement_refln>
      </PDBo:has_cell_measurement_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_compCategory/PDBx:chem_comp">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp>
      <PDBo:chem_comp rdf:about="{$base}/chem_comp/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp>
      </PDBo:has_chem_comp>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_angleCategory/PDBx:chem_comp_angle">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_3)&lt;64"><xsl:value-of select="@atom_id_3"/></xsl:when><xsl:when test="contains(@atom_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_angle>
      <PDBo:chem_comp_angle rdf:about="{$base}/chem_comp_angle/{$atom_id_1_encoded},{$atom_id_2_encoded},{$atom_id_3_encoded},{$comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@atom_id_1!='' and @comp_id!=''">
	<PDBo:reference_to_chem_comp_atom>
	  <rdf:Description rdf:about="{$base}/chem_comp_atom/,">
	    <PDBo:referenced_by_chem_comp_angle rdf:resource="{$base}/chem_comp_angle/{$atom_id_1_encoded},{$atom_id_2_encoded},{$atom_id_3_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp_atom>
	<!-- chem_comp_atomKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_angle>
      </PDBo:has_chem_comp_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_atomCategory/PDBx:chem_comp_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_atom>
      <PDBo:chem_comp_atom rdf:about="{$base}/chem_comp_atom/{$atom_id_encoded},{$comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_atom rdf:resource="{$base}/chem_comp_atom/{$atom_id_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_atom>
      </PDBo:has_chem_comp_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_bondCategory/PDBx:chem_comp_bond">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_bond>
      <PDBo:chem_comp_bond rdf:about="{$base}/chem_comp_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_bond rdf:resource="{$base}/chem_comp_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:if test="@atom_id_1!='' and @comp_id!=''">
	<PDBo:reference_to_chem_comp_atom>
	  <rdf:Description rdf:about="{$base}/chem_comp_atom/,">
	    <PDBo:referenced_by_chem_comp_bond rdf:resource="{$base}/chem_comp_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp_atom>
	<!-- chem_comp_atomKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:if test="@atom_id_2!='' and @comp_id!=''">
	<PDBo:reference_to_chem_comp_atom>
	  <rdf:Description rdf:about="{$base}/chem_comp_atom/,">
	    <PDBo:referenced_by_chem_comp_bond rdf:resource="{$base}/chem_comp_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp_atom>
	<!-- chem_comp_atomKeyref_0_0_1_1 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_bond>
      </PDBo:has_chem_comp_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_chirCategory/PDBx:chem_comp_chir">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_chir>
      <PDBo:chem_comp_chir rdf:about="{$base}/chem_comp_chir/{$comp_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_chir rdf:resource="{$base}/chem_comp_chir/{$comp_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_chir>
      </PDBo:has_chem_comp_chir>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_chir_atomCategory/PDBx:chem_comp_chir_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="chir_id_truncated"><xsl:choose><xsl:when test="string-length(@chir_id)&lt;64"><xsl:value-of select="@chir_id"/></xsl:when><xsl:when test="contains(@chir_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@chir_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@chir_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="chir_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($chir_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_chir_atom>
      <PDBo:chem_comp_chir_atom rdf:about="{$base}/chem_comp_chir_atom/{$atom_id_encoded},{$chir_id_encoded},{$comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_chir_atom rdf:resource="{$base}/chem_comp_chir_atom/{$atom_id_encoded},{$chir_id_encoded},{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_chir_atom>
      </PDBo:has_chem_comp_chir_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_linkCategory/PDBx:chem_comp_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_link>
      <PDBo:chem_comp_link rdf:about="{$base}/chem_comp_link/{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_comp_link rdf:resource="{$base}/chem_comp_link/{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_link>
      </PDBo:has_chem_comp_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_planeCategory/PDBx:chem_comp_plane">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_plane>
      <PDBo:chem_comp_plane rdf:about="{$base}/chem_comp_plane/{$comp_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_plane rdf:resource="{$base}/chem_comp_plane/{$comp_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_plane>
      </PDBo:has_chem_comp_plane>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_plane_atomCategory/PDBx:chem_comp_plane_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="plane_id_truncated"><xsl:choose><xsl:when test="string-length(@plane_id)&lt;64"><xsl:value-of select="@plane_id"/></xsl:when><xsl:when test="contains(@plane_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@plane_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@plane_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="plane_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($plane_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_plane_atom>
      <PDBo:chem_comp_plane_atom rdf:about="{$base}/chem_comp_plane_atom/{$atom_id_encoded},{$comp_id_encoded},{$plane_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_chem_comp_plane_atom rdf:resource="{$base}/chem_comp_plane_atom/{$atom_id_encoded},{$comp_id_encoded},{$plane_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_plane_atom>
      </PDBo:has_chem_comp_plane_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_torCategory/PDBx:chem_comp_tor">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_tor>
      <PDBo:chem_comp_tor rdf:about="{$base}/chem_comp_tor/{$comp_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:atom_id_1!='' and @comp_id!=''">
	<PDBo:reference_to_chem_comp_atom>
	  <rdf:Description rdf:about="{$base}/chem_comp_atom/{translate(PDBx:atom_id_1,' ^','__')},">
	    <PDBo:referenced_by_chem_comp_tor rdf:resource="{$base}/chem_comp_tor/{$comp_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp_atom>
	<!-- chem_comp_atomKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_tor>
      </PDBo:has_chem_comp_tor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_comp_tor_valueCategory/PDBx:chem_comp_tor_value">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="tor_id_truncated"><xsl:choose><xsl:when test="string-length(@tor_id)&lt;64"><xsl:value-of select="@tor_id"/></xsl:when><xsl:when test="contains(@tor_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@tor_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@tor_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="tor_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($tor_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_comp_tor_value>
      <PDBo:chem_comp_tor_value rdf:about="{$base}/chem_comp_tor_value/{$comp_id_encoded},{$tor_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_comp_tor_value>
      </PDBo:has_chem_comp_tor_value>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_linkCategory/PDBx:chem_link">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link>
      <PDBo:chem_link rdf:about="{$base}/chem_link/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link>
      </PDBo:has_chem_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_angleCategory/PDBx:chem_link_angle">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_3)&lt;64"><xsl:value-of select="@atom_id_3"/></xsl:when><xsl:when test="contains(@atom_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_angle>
      <PDBo:chem_link_angle rdf:about="{$base}/chem_link_angle/{$atom_id_1_encoded},{$atom_id_2_encoded},{$atom_id_3_encoded},{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_link_angle rdf:resource="{$base}/chem_link_angle/{$atom_id_1_encoded},{$atom_id_2_encoded},{$atom_id_3_encoded},{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_angle>
      </PDBo:has_chem_link_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_bondCategory/PDBx:chem_link_bond">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_bond>
      <PDBo:chem_link_bond rdf:about="{$base}/chem_link_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_link_bond rdf:resource="{$base}/chem_link_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_bond>
      </PDBo:has_chem_link_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_chirCategory/PDBx:chem_link_chir">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_chir>
      <PDBo:chem_link_chir rdf:about="{$base}/chem_link_chir/{$id_encoded},{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_link_chir rdf:resource="{$base}/chem_link_chir/{$id_encoded},{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_chir>
      </PDBo:has_chem_link_chir>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_chir_atomCategory/PDBx:chem_link_chir_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="chir_id_truncated"><xsl:choose><xsl:when test="string-length(@chir_id)&lt;64"><xsl:value-of select="@chir_id"/></xsl:when><xsl:when test="contains(@chir_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@chir_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@chir_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="chir_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($chir_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_chir_atom>
      <PDBo:chem_link_chir_atom rdf:about="{$base}/chem_link_chir_atom/{$atom_id_encoded},{$chir_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_chir_atom>
      </PDBo:has_chem_link_chir_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_planeCategory/PDBx:chem_link_plane">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_plane>
      <PDBo:chem_link_plane rdf:about="{$base}/chem_link_plane/{$id_encoded},{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_link_plane rdf:resource="{$base}/chem_link_plane/{$id_encoded},{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_plane>
      </PDBo:has_chem_link_plane>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_plane_atomCategory/PDBx:chem_link_plane_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="plane_id_truncated"><xsl:choose><xsl:when test="string-length(@plane_id)&lt;64"><xsl:value-of select="@plane_id"/></xsl:when><xsl:when test="contains(@plane_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@plane_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@plane_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="plane_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($plane_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_plane_atom>
      <PDBo:chem_link_plane_atom rdf:about="{$base}/chem_link_plane_atom/{$atom_id_encoded},{$plane_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_plane_atom>
      </PDBo:has_chem_link_plane_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_torCategory/PDBx:chem_link_tor">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_tor>
      <PDBo:chem_link_tor rdf:about="{$base}/chem_link_tor/{$id_encoded},{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_chem_link_tor rdf:resource="{$base}/chem_link_tor/{$id_encoded},{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_tor>
      </PDBo:has_chem_link_tor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chem_link_tor_valueCategory/PDBx:chem_link_tor_value">
      <xsl:variable name="tor_id_truncated"><xsl:choose><xsl:when test="string-length(@tor_id)&lt;64"><xsl:value-of select="@tor_id"/></xsl:when><xsl:when test="contains(@tor_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@tor_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@tor_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="tor_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($tor_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chem_link_tor_value>
      <PDBo:chem_link_tor_value rdf:about="{$base}/chem_link_tor_value/{$tor_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chem_link_tor_value>
      </PDBo:has_chem_link_tor_value>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chemicalCategory/PDBx:chemical">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chemical>
      <PDBo:chemical rdf:about="{$base}/chemical/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_chemical rdf:resource="{$base}/chemical/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chemical>
      </PDBo:has_chemical>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chemical_conn_atomCategory/PDBx:chemical_conn_atom">
      <xsl:variable name="number_truncated"><xsl:choose><xsl:when test="string-length(@number)&lt;64"><xsl:value-of select="@number"/></xsl:when><xsl:when test="contains(@number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chemical_conn_atom>
      <PDBo:chemical_conn_atom rdf:about="{$base}/chemical_conn_atom/{$number_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:type_symbol!=''">
	<PDBo:reference_to_atom_type>
	  <rdf:Description rdf:about="{$base}/atom_type/{translate(PDBx:type_symbol,' ^','__')}">
	    <PDBo:referenced_by_chemical_conn_atom rdf:resource="{$base}/chemical_conn_atom/{$number_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_type>
	<!-- atom_typeKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chemical_conn_atom>
      </PDBo:has_chemical_conn_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chemical_conn_bondCategory/PDBx:chemical_conn_bond">
      <xsl:variable name="atom_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_1)&lt;64"><xsl:value-of select="@atom_1"/></xsl:when><xsl:when test="contains(@atom_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_2)&lt;64"><xsl:value-of select="@atom_2"/></xsl:when><xsl:when test="contains(@atom_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chemical_conn_bond>
      <PDBo:chemical_conn_bond rdf:about="{$base}/chemical_conn_bond/{$atom_1_encoded},{$atom_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@atom_1!=''">
	<PDBo:reference_to_chemical_conn_atom>
	  <rdf:Description rdf:about="{$base}/chemical_conn_atom/">
	    <PDBo:referenced_by_chemical_conn_bond rdf:resource="{$base}/chemical_conn_bond/{$atom_1_encoded},{$atom_2_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chemical_conn_atom>
	<!-- chemical_conn_atomKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="@atom_2!=''">
	<PDBo:reference_to_chemical_conn_atom>
	  <rdf:Description rdf:about="{$base}/chemical_conn_atom/">
	    <PDBo:referenced_by_chemical_conn_bond rdf:resource="{$base}/chemical_conn_bond/{$atom_1_encoded},{$atom_2_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chemical_conn_atom>
	<!-- chemical_conn_atomKeyref_0_0_0_1 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chemical_conn_bond>
      </PDBo:has_chemical_conn_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:chemical_formulaCategory/PDBx:chemical_formula">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_chemical_formula>
      <PDBo:chemical_formula rdf:about="{$base}/chemical_formula/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_chemical_formula rdf:resource="{$base}/chemical_formula/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:chemical_formula>
      </PDBo:has_chemical_formula>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:citationCategory/PDBx:citation">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_citation>
      <PDBo:citation rdf:about="{$base}/citation/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:citation>
      </PDBo:has_citation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:citation_authorCategory/PDBx:citation_author">
      <xsl:variable name="citation_id_truncated"><xsl:choose><xsl:when test="string-length(@citation_id)&lt;64"><xsl:value-of select="@citation_id"/></xsl:when><xsl:when test="contains(@citation_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@citation_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@citation_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="citation_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($citation_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_citation_author>
      <PDBo:citation_author rdf:about="{$base}/citation_author/{$citation_id_encoded},{$name_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@citation_id!=''">
	<PDBo:reference_to_citation>
	  <rdf:Description rdf:about="{$base}/citation/">
	    <PDBo:referenced_by_citation_author rdf:resource="{$base}/citation_author/{$citation_id_encoded},{$name_encoded},{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_citation>
	<!-- citationKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:citation_author>
      </PDBo:has_citation_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:citation_editorCategory/PDBx:citation_editor">
      <xsl:variable name="citation_id_truncated"><xsl:choose><xsl:when test="string-length(@citation_id)&lt;64"><xsl:value-of select="@citation_id"/></xsl:when><xsl:when test="contains(@citation_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@citation_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@citation_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="citation_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($citation_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_citation_editor>
      <PDBo:citation_editor rdf:about="{$base}/citation_editor/{$citation_id_encoded},{$name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@citation_id!=''">
	<PDBo:reference_to_citation>
	  <rdf:Description rdf:about="{$base}/citation/">
	    <PDBo:referenced_by_citation_editor rdf:resource="{$base}/citation_editor/{$citation_id_encoded},{$name_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_citation>
	<!-- citationKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:citation_editor>
      </PDBo:has_citation_editor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:computingCategory/PDBx:computing">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_computing>
      <PDBo:computing rdf:about="{$base}/computing/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_computing rdf:resource="{$base}/computing/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:computing>
      </PDBo:has_computing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:databaseCategory/PDBx:database">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database>
      <PDBo:database rdf:about="{$base}/database/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_database rdf:resource="{$base}/database/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database>
      </PDBo:has_database>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_2Category/PDBx:database_2">
      <xsl:variable name="database_code_truncated"><xsl:choose><xsl:when test="string-length(@database_code)&lt;64"><xsl:value-of select="@database_code"/></xsl:when><xsl:when test="contains(@database_code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@database_code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@database_code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="database_code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($database_code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="database_id_truncated"><xsl:choose><xsl:when test="string-length(@database_id)&lt;64"><xsl:value-of select="@database_id"/></xsl:when><xsl:when test="contains(@database_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@database_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@database_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="database_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($database_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_2>
      <PDBo:database_2 rdf:about="{$base}/database_2/{$database_code_encoded},{$database_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_2>
      </PDBo:has_database_2>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_caveatCategory/PDBx:database_PDB_caveat">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_caveat>
      <PDBo:database_PDB_caveat rdf:about="{$base}/database_PDB_caveat/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_caveat>
      </PDBo:has_database_PDB_caveat>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_matrixCategory/PDBx:database_PDB_matrix">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_matrix>
      <PDBo:database_PDB_matrix rdf:about="{$base}/database_PDB_matrix/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_database_PDB_matrix rdf:resource="{$base}/database_PDB_matrix/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_7_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_matrix>
      </PDBo:has_database_PDB_matrix>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_remarkCategory/PDBx:database_PDB_remark">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_remark>
      <PDBo:database_PDB_remark rdf:about="{$base}/database_PDB_remark/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_remark>
      </PDBo:has_database_PDB_remark>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_revCategory/PDBx:database_PDB_rev">
      <xsl:variable name="num_truncated"><xsl:choose><xsl:when test="string-length(@num)&lt;64"><xsl:value-of select="@num"/></xsl:when><xsl:when test="contains(@num,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@num,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@num,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="num_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($num_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_rev>
      <PDBo:database_PDB_rev rdf:about="{$base}/database_PDB_rev/{$num_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_rev>
      </PDBo:has_database_PDB_rev>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_rev_recordCategory/PDBx:database_PDB_rev_record">
      <xsl:variable name="rev_num_truncated"><xsl:choose><xsl:when test="string-length(@rev_num)&lt;64"><xsl:value-of select="@rev_num"/></xsl:when><xsl:when test="contains(@rev_num,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@rev_num,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@rev_num,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="rev_num_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($rev_num_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_rev_record>
      <PDBo:database_PDB_rev_record rdf:about="{$base}/database_PDB_rev_record/{$rev_num_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@rev_num!=''">
	<PDBo:reference_to_database_PDB_rev>
	  <rdf:Description rdf:about="{$base}/database_PDB_rev/">
	    <PDBo:referenced_by_database_PDB_rev_record rdf:resource="{$base}/database_PDB_rev_record/{$rev_num_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_database_PDB_rev>
	<!-- database_PDB_revKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_rev_record>
      </PDBo:has_database_PDB_rev_record>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:database_PDB_tvectCategory/PDBx:database_PDB_tvect">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_database_PDB_tvect>
      <PDBo:database_PDB_tvect rdf:about="{$base}/database_PDB_tvect/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:database_PDB_tvect>
      </PDBo:has_database_PDB_tvect>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrnCategory/PDBx:diffrn">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn>
      <PDBo:diffrn rdf:about="{$base}/diffrn/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/{translate(PDBx:crystal_id,' ^','__')}">
	    <PDBo:referenced_by_diffrn rdf:resource="{$base}/diffrn/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn>
      </PDBo:has_diffrn>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_attenuatorCategory/PDBx:diffrn_attenuator">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_attenuator>
      <PDBo:diffrn_attenuator rdf:about="{$base}/diffrn_attenuator/{$code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_attenuator>
      </PDBo:has_diffrn_attenuator>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_data_frameCategory/PDBx:diffrn_data_frame">
      <xsl:variable name="detector_element_id_truncated"><xsl:choose><xsl:when test="string-length(@detector_element_id)&lt;64"><xsl:value-of select="@detector_element_id"/></xsl:when><xsl:when test="contains(@detector_element_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@detector_element_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@detector_element_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="detector_element_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($detector_element_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_data_frame>
      <PDBo:diffrn_data_frame rdf:about="{$base}/diffrn_data_frame/{$detector_element_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_data_frame>
      </PDBo:has_diffrn_data_frame>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_detectorCategory/PDBx:diffrn_detector">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_detector>
      <PDBo:diffrn_detector rdf:about="{$base}/diffrn_detector/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_detector rdf:resource="{$base}/diffrn_detector/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_detector>
      </PDBo:has_diffrn_detector>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_detector_axisCategory/PDBx:diffrn_detector_axis">
      <xsl:variable name="axis_id_truncated"><xsl:choose><xsl:when test="string-length(@axis_id)&lt;64"><xsl:value-of select="@axis_id"/></xsl:when><xsl:when test="contains(@axis_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@axis_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@axis_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="axis_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($axis_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="detector_id_truncated"><xsl:choose><xsl:when test="string-length(@detector_id)&lt;64"><xsl:value-of select="@detector_id"/></xsl:when><xsl:when test="contains(@detector_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@detector_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@detector_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="detector_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($detector_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_detector_axis>
      <PDBo:diffrn_detector_axis rdf:about="{$base}/diffrn_detector_axis/{$axis_id_encoded},{$detector_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_detector_axis>
      </PDBo:has_diffrn_detector_axis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_detector_elementCategory/PDBx:diffrn_detector_element">
      <xsl:variable name="detector_id_truncated"><xsl:choose><xsl:when test="string-length(@detector_id)&lt;64"><xsl:value-of select="@detector_id"/></xsl:when><xsl:when test="contains(@detector_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@detector_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@detector_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="detector_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($detector_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_detector_element>
      <PDBo:diffrn_detector_element rdf:about="{$base}/diffrn_detector_element/{$detector_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_detector_element>
      </PDBo:has_diffrn_detector_element>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_measurementCategory/PDBx:diffrn_measurement">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_measurement>
      <PDBo:diffrn_measurement rdf:about="{$base}/diffrn_measurement/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_measurement rdf:resource="{$base}/diffrn_measurement/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_measurement>
      </PDBo:has_diffrn_measurement>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_orient_matrixCategory/PDBx:diffrn_orient_matrix">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_orient_matrix>
      <PDBo:diffrn_orient_matrix rdf:about="{$base}/diffrn_orient_matrix/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_orient_matrix rdf:resource="{$base}/diffrn_orient_matrix/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_orient_matrix>
      </PDBo:has_diffrn_orient_matrix>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_orient_reflnCategory/PDBx:diffrn_orient_refln">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_orient_refln>
      <PDBo:diffrn_orient_refln rdf:about="{$base}/diffrn_orient_refln/{$diffrn_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_orient_refln rdf:resource="{$base}/diffrn_orient_refln/{$diffrn_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_orient_refln>
      </PDBo:has_diffrn_orient_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_radiationCategory/PDBx:diffrn_radiation">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_radiation>
      <PDBo:diffrn_radiation rdf:about="{$base}/diffrn_radiation/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_radiation rdf:resource="{$base}/diffrn_radiation/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_radiation>
      </PDBo:has_diffrn_radiation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_radiation_wavelengthCategory/PDBx:diffrn_radiation_wavelength">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_radiation_wavelength>
      <PDBo:diffrn_radiation_wavelength rdf:about="{$base}/diffrn_radiation_wavelength/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_radiation_wavelength>
      </PDBo:has_diffrn_radiation_wavelength>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_reflnCategory/PDBx:diffrn_refln">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_refln>
      <PDBo:diffrn_refln rdf:about="{$base}/diffrn_refln/{$diffrn_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_refln rdf:resource="{$base}/diffrn_refln/{$diffrn_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_refln>
      </PDBo:has_diffrn_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_reflnsCategory/PDBx:diffrn_reflns">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_reflns>
      <PDBo:diffrn_reflns rdf:about="{$base}/diffrn_reflns/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_reflns rdf:resource="{$base}/diffrn_reflns/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_reflns>
      </PDBo:has_diffrn_reflns>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_reflns_classCategory/PDBx:diffrn_reflns_class">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_reflns_class>
      <PDBo:diffrn_reflns_class rdf:about="{$base}/diffrn_reflns_class/{$code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_reflns_class>
      </PDBo:has_diffrn_reflns_class>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scale_groupCategory/PDBx:diffrn_scale_group">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scale_group>
      <PDBo:diffrn_scale_group rdf:about="{$base}/diffrn_scale_group/{$code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scale_group>
      </PDBo:has_diffrn_scale_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scanCategory/PDBx:diffrn_scan">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scan>
      <PDBo:diffrn_scan rdf:about="{$base}/diffrn_scan/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:frame_id_end!='' and PDBx:frame_id_start!=''">
	<PDBo:reference_to_diffrn_data_frame>
	  <rdf:Description rdf:about="{$base}/diffrn_data_frame/{translate(PDBx:frame_id_end,' ^','__')},{translate(PDBx:frame_id_start,' ^','__')}">
	    <PDBo:referenced_by_diffrn_scan rdf:resource="{$base}/diffrn_scan/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn_data_frame>
	<!-- diffrn_data_frameKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scan>
      </PDBo:has_diffrn_scan>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scan_axisCategory/PDBx:diffrn_scan_axis">
      <xsl:variable name="axis_id_truncated"><xsl:choose><xsl:when test="string-length(@axis_id)&lt;64"><xsl:value-of select="@axis_id"/></xsl:when><xsl:when test="contains(@axis_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@axis_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@axis_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="axis_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($axis_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="scan_id_truncated"><xsl:choose><xsl:when test="string-length(@scan_id)&lt;64"><xsl:value-of select="@scan_id"/></xsl:when><xsl:when test="contains(@scan_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@scan_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@scan_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="scan_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($scan_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scan_axis>
      <PDBo:diffrn_scan_axis rdf:about="{$base}/diffrn_scan_axis/{$axis_id_encoded},{$scan_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@scan_id!=''">
	<PDBo:reference_to_diffrn_scan>
	  <rdf:Description rdf:about="{$base}/diffrn_scan/">
	    <PDBo:referenced_by_diffrn_scan_axis rdf:resource="{$base}/diffrn_scan_axis/{$axis_id_encoded},{$scan_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn_scan>
	<!-- diffrn_scanKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scan_axis>
      </PDBo:has_diffrn_scan_axis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scan_collectionCategory/PDBx:diffrn_scan_collection">
      <xsl:variable name="scan_id_truncated"><xsl:choose><xsl:when test="string-length(@scan_id)&lt;64"><xsl:value-of select="@scan_id"/></xsl:when><xsl:when test="contains(@scan_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@scan_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@scan_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="scan_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($scan_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scan_collection>
      <PDBo:diffrn_scan_collection rdf:about="{$base}/diffrn_scan_collection/{$scan_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scan_collection>
      </PDBo:has_diffrn_scan_collection>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scan_frameCategory/PDBx:diffrn_scan_frame">
      <xsl:variable name="frame_id_truncated"><xsl:choose><xsl:when test="string-length(@frame_id)&lt;64"><xsl:value-of select="@frame_id"/></xsl:when><xsl:when test="contains(@frame_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@frame_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@frame_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="frame_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($frame_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="scan_id_truncated"><xsl:choose><xsl:when test="string-length(@scan_id)&lt;64"><xsl:value-of select="@scan_id"/></xsl:when><xsl:when test="contains(@scan_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@scan_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@scan_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="scan_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($scan_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scan_frame>
      <PDBo:diffrn_scan_frame rdf:about="{$base}/diffrn_scan_frame/{$frame_id_encoded},{$scan_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@scan_id!=''">
	<PDBo:reference_to_diffrn_scan>
	  <rdf:Description rdf:about="{$base}/diffrn_scan/">
	    <PDBo:referenced_by_diffrn_scan_frame rdf:resource="{$base}/diffrn_scan_frame/{$frame_id_encoded},{$scan_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn_scan>
	<!-- diffrn_scanKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scan_frame>
      </PDBo:has_diffrn_scan_frame>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_scan_frame_axisCategory/PDBx:diffrn_scan_frame_axis">
      <xsl:variable name="axis_id_truncated"><xsl:choose><xsl:when test="string-length(@axis_id)&lt;64"><xsl:value-of select="@axis_id"/></xsl:when><xsl:when test="contains(@axis_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@axis_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@axis_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="axis_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($axis_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="frame_id_truncated"><xsl:choose><xsl:when test="string-length(@frame_id)&lt;64"><xsl:value-of select="@frame_id"/></xsl:when><xsl:when test="contains(@frame_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@frame_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@frame_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="frame_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($frame_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_scan_frame_axis>
      <PDBo:diffrn_scan_frame_axis rdf:about="{$base}/diffrn_scan_frame_axis/{$axis_id_encoded},{$frame_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_scan_frame_axis>
      </PDBo:has_diffrn_scan_frame_axis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_sourceCategory/PDBx:diffrn_source">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_source>
      <PDBo:diffrn_source rdf:about="{$base}/diffrn_source/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_source rdf:resource="{$base}/diffrn_source/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_7_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_source>
      </PDBo:has_diffrn_source>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_standard_reflnCategory/PDBx:diffrn_standard_refln">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_standard_refln>
      <PDBo:diffrn_standard_refln rdf:about="{$base}/diffrn_standard_refln/{$code_encoded},{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_standard_refln rdf:resource="{$base}/diffrn_standard_refln/{$code_encoded},{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_8_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_standard_refln>
      </PDBo:has_diffrn_standard_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:diffrn_standardsCategory/PDBx:diffrn_standards">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_diffrn_standards>
      <PDBo:diffrn_standards rdf:about="{$base}/diffrn_standards/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_diffrn_standards rdf:resource="{$base}/diffrn_standards/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_9_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:diffrn_standards>
      </PDBo:has_diffrn_standards>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_2d_crystal_entityCategory/PDBx:em_2d_crystal_entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_2d_crystal_entity>
      <PDBo:em_2d_crystal_entity rdf:about="{$base}/em_2d_crystal_entity/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_2d_crystal_entity>
      </PDBo:has_em_2d_crystal_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_2d_projection_selectionCategory/PDBx:em_2d_projection_selection">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_2d_projection_selection>
      <PDBo:em_2d_projection_selection rdf:about="{$base}/em_2d_projection_selection/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_2d_projection_selection rdf:resource="{$base}/em_2d_projection_selection/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_8_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_2d_projection_selection>
      </PDBo:has_em_2d_projection_selection>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_3d_crystal_entityCategory/PDBx:em_3d_crystal_entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_3d_crystal_entity>
      <PDBo:em_3d_crystal_entity rdf:about="{$base}/em_3d_crystal_entity/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_3d_crystal_entity>
      </PDBo:has_em_3d_crystal_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_3d_fittingCategory/PDBx:em_3d_fitting">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_3d_fitting>
      <PDBo:em_3d_fitting rdf:about="{$base}/em_3d_fitting/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_3d_fitting rdf:resource="{$base}/em_3d_fitting/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_9_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_3d_fitting>
      </PDBo:has_em_3d_fitting>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_3d_fitting_listCategory/PDBx:em_3d_fitting_list">
      <xsl:variable name="_3d_fitting_id_truncated"><xsl:choose><xsl:when test="string-length(@_3d_fitting_id)&lt;64"><xsl:value-of select="@_3d_fitting_id"/></xsl:when><xsl:when test="contains(@_3d_fitting_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@_3d_fitting_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@_3d_fitting_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="_3d_fitting_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($_3d_fitting_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_3d_fitting_list>
      <PDBo:em_3d_fitting_list rdf:about="{$base}/em_3d_fitting_list/{$_3d_fitting_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_3d_fitting_list>
      </PDBo:has_em_3d_fitting_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_3d_reconstructionCategory/PDBx:em_3d_reconstruction">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_3d_reconstruction>
      <PDBo:em_3d_reconstruction rdf:about="{$base}/em_3d_reconstruction/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_em_3d_reconstruction rdf:resource="{$base}/em_3d_reconstruction/{$id_encoded},{$image_processing_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_10_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_3d_reconstruction>
      </PDBo:has_em_3d_reconstruction>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_adminCategory/PDBx:em_admin">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_admin>
      <PDBo:em_admin rdf:about="{$base}/em_admin/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_admin rdf:resource="{$base}/em_admin/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_11_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_admin>
      </PDBo:has_em_admin>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_assemblyCategory/PDBx:em_assembly">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_assembly>
      <PDBo:em_assembly rdf:about="{$base}/em_assembly/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_assembly rdf:resource="{$base}/em_assembly/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_12_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_assembly>
      </PDBo:has_em_assembly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_author_listCategory/PDBx:em_author_list">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_author_list>
      <PDBo:em_author_list rdf:about="{$base}/em_author_list/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_author_list>
      </PDBo:has_em_author_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_bufferCategory/PDBx:em_buffer">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="specimen_id_truncated"><xsl:choose><xsl:when test="string-length(@specimen_id)&lt;64"><xsl:value-of select="@specimen_id"/></xsl:when><xsl:when test="contains(@specimen_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@specimen_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@specimen_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="specimen_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($specimen_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_buffer>
      <PDBo:em_buffer rdf:about="{$base}/em_buffer/{$id_encoded},{$specimen_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_buffer>
      </PDBo:has_em_buffer>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_buffer_componentCategory/PDBx:em_buffer_component">
      <xsl:variable name="buffer_id_truncated"><xsl:choose><xsl:when test="string-length(@buffer_id)&lt;64"><xsl:value-of select="@buffer_id"/></xsl:when><xsl:when test="contains(@buffer_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@buffer_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@buffer_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="buffer_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($buffer_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_buffer_component>
      <PDBo:em_buffer_component rdf:about="{$base}/em_buffer_component/{$buffer_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_buffer_component>
      </PDBo:has_em_buffer_component>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_crystal_formationCategory/PDBx:em_crystal_formation">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_crystal_formation>
      <PDBo:em_crystal_formation rdf:about="{$base}/em_crystal_formation/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_crystal_formation>
      </PDBo:has_em_crystal_formation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_ctf_correctionCategory/PDBx:em_ctf_correction">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_ctf_correction>
      <PDBo:em_ctf_correction rdf:about="{$base}/em_ctf_correction/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_ctf_correction>
      </PDBo:has_em_ctf_correction>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_db_referenceCategory/PDBx:em_db_reference">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_db_reference>
      <PDBo:em_db_reference rdf:about="{$base}/em_db_reference/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_db_reference>
      </PDBo:has_em_db_reference>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_db_reference_auxiliaryCategory/PDBx:em_db_reference_auxiliary">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_db_reference_auxiliary>
      <PDBo:em_db_reference_auxiliary rdf:about="{$base}/em_db_reference_auxiliary/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_db_reference_auxiliary>
      </PDBo:has_em_db_reference_auxiliary>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_depositor_infoCategory/PDBx:em_depositor_info">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_depositor_info>
      <PDBo:em_depositor_info rdf:about="{$base}/em_depositor_info/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_depositor_info rdf:resource="{$base}/em_depositor_info/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_13_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_depositor_info>
      </PDBo:has_em_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_depuiCategory/PDBx:em_depui">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_depui>
      <PDBo:em_depui rdf:about="{$base}/em_depui/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_depui>
      </PDBo:has_em_depui>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_detectorCategory/PDBx:em_detector">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_detector>
      <PDBo:em_detector rdf:about="{$base}/em_detector/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_detector rdf:resource="{$base}/em_detector/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_14_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_detector>
      </PDBo:has_em_detector>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_diffractionCategory/PDBx:em_diffraction">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_diffraction>
      <PDBo:em_diffraction rdf:about="{$base}/em_diffraction/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_diffraction>
      </PDBo:has_em_diffraction>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_diffraction_shellCategory/PDBx:em_diffraction_shell">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_diffraction_shell>
      <PDBo:em_diffraction_shell rdf:about="{$base}/em_diffraction_shell/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_diffraction_shell>
      </PDBo:has_em_diffraction_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_diffraction_statsCategory/PDBx:em_diffraction_stats">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_diffraction_stats>
      <PDBo:em_diffraction_stats rdf:about="{$base}/em_diffraction_stats/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_diffraction_stats>
      </PDBo:has_em_diffraction_stats>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_embeddingCategory/PDBx:em_embedding">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_embedding>
      <PDBo:em_embedding rdf:about="{$base}/em_embedding/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_embedding>
      </PDBo:has_em_embedding>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_entity_assemblyCategory/PDBx:em_entity_assembly">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_entity_assembly>
      <PDBo:em_entity_assembly rdf:about="{$base}/em_entity_assembly/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_entity_assembly>
      </PDBo:has_em_entity_assembly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_entity_assembly_molwtCategory/PDBx:em_entity_assembly_molwt">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_entity_assembly_molwt>
      <PDBo:em_entity_assembly_molwt rdf:about="{$base}/em_entity_assembly_molwt/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_entity_assembly_molwt rdf:resource="{$base}/em_entity_assembly_molwt/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_entity_assembly_molwt>
      </PDBo:has_em_entity_assembly_molwt>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_entity_assembly_naturalsourceCategory/PDBx:em_entity_assembly_naturalsource">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_entity_assembly_naturalsource>
      <PDBo:em_entity_assembly_naturalsource rdf:about="{$base}/em_entity_assembly_naturalsource/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_entity_assembly_naturalsource rdf:resource="{$base}/em_entity_assembly_naturalsource/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_entity_assembly_naturalsource>
      </PDBo:has_em_entity_assembly_naturalsource>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_entity_assembly_recombinantCategory/PDBx:em_entity_assembly_recombinant">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_entity_assembly_recombinant>
      <PDBo:em_entity_assembly_recombinant rdf:about="{$base}/em_entity_assembly_recombinant/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_entity_assembly_recombinant rdf:resource="{$base}/em_entity_assembly_recombinant/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_entity_assembly_recombinant>
      </PDBo:has_em_entity_assembly_recombinant>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_entity_assembly_syntheticCategory/PDBx:em_entity_assembly_synthetic">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_entity_assembly_synthetic>
      <PDBo:em_entity_assembly_synthetic rdf:about="{$base}/em_entity_assembly_synthetic/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_entity_assembly_synthetic rdf:resource="{$base}/em_entity_assembly_synthetic/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_entity_assembly_synthetic>
      </PDBo:has_em_entity_assembly_synthetic>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_euler_angle_assignmentCategory/PDBx:em_euler_angle_assignment">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_euler_angle_assignment>
      <PDBo:em_euler_angle_assignment rdf:about="{$base}/em_euler_angle_assignment/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_euler_angle_assignment>
      </PDBo:has_em_euler_angle_assignment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_experimentCategory/PDBx:em_experiment">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_experiment>
      <PDBo:em_experiment rdf:about="{$base}/em_experiment/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_experiment rdf:resource="{$base}/em_experiment/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_15_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_experiment>
      </PDBo:has_em_experiment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_fiducial_markersCategory/PDBx:em_fiducial_markers">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_fiducial_markers>
      <PDBo:em_fiducial_markers rdf:about="{$base}/em_fiducial_markers/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:em_tomography_specimen_id!=''">
	<PDBo:reference_to_em_tomography_specimen>
	  <rdf:Description rdf:about="{$base}/em_tomography_specimen/{translate(PDBx:em_tomography_specimen_id,' ^','__')}">
	    <PDBo:referenced_by_em_fiducial_markers rdf:resource="{$base}/em_fiducial_markers/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_tomography_specimen>
	<!-- em_tomography_specimenKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_fiducial_markers>
      </PDBo:has_em_fiducial_markers>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_figure_depositor_infoCategory/PDBx:em_figure_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_figure_depositor_info>
      <PDBo:em_figure_depositor_info rdf:about="{$base}/em_figure_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_figure_depositor_info>
      </PDBo:has_em_figure_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_final_classificationCategory/PDBx:em_final_classification">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_final_classification>
      <PDBo:em_final_classification rdf:about="{$base}/em_final_classification/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_final_classification>
      </PDBo:has_em_final_classification>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_focused_ion_beamCategory/PDBx:em_focused_ion_beam">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_focused_ion_beam>
      <PDBo:em_focused_ion_beam rdf:about="{$base}/em_focused_ion_beam/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:em_tomography_specimen_id!=''">
	<PDBo:reference_to_em_tomography_specimen>
	  <rdf:Description rdf:about="{$base}/em_tomography_specimen/{translate(PDBx:em_tomography_specimen_id,' ^','__')}">
	    <PDBo:referenced_by_em_focused_ion_beam rdf:resource="{$base}/em_focused_ion_beam/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_tomography_specimen>
	<!-- em_tomography_specimenKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_focused_ion_beam>
      </PDBo:has_em_focused_ion_beam>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_fsc_curveCategory/PDBx:em_fsc_curve">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_fsc_curve>
      <PDBo:em_fsc_curve rdf:about="{$base}/em_fsc_curve/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_fsc_curve>
      </PDBo:has_em_fsc_curve>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_grid_pretreatmentCategory/PDBx:em_grid_pretreatment">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_grid_pretreatment>
      <PDBo:em_grid_pretreatment rdf:about="{$base}/em_grid_pretreatment/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_grid_pretreatment>
      </PDBo:has_em_grid_pretreatment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_helical_entityCategory/PDBx:em_helical_entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_helical_entity>
      <PDBo:em_helical_entity rdf:about="{$base}/em_helical_entity/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_helical_entity>
      </PDBo:has_em_helical_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_high_pressure_freezingCategory/PDBx:em_high_pressure_freezing">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_high_pressure_freezing>
      <PDBo:em_high_pressure_freezing rdf:about="{$base}/em_high_pressure_freezing/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:em_tomography_specimen_id!=''">
	<PDBo:reference_to_em_tomography_specimen>
	  <rdf:Description rdf:about="{$base}/em_tomography_specimen/{translate(PDBx:em_tomography_specimen_id,' ^','__')}">
	    <PDBo:referenced_by_em_high_pressure_freezing rdf:resource="{$base}/em_high_pressure_freezing/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_tomography_specimen>
	<!-- em_tomography_specimenKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_high_pressure_freezing>
      </PDBo:has_em_high_pressure_freezing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_image_processingCategory/PDBx:em_image_processing">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_recording_id_truncated"><xsl:choose><xsl:when test="string-length(@image_recording_id)&lt;64"><xsl:value-of select="@image_recording_id"/></xsl:when><xsl:when test="contains(@image_recording_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_recording_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_recording_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_recording_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_recording_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_image_processing>
      <PDBo:em_image_processing rdf:about="{$base}/em_image_processing/{$id_encoded},{$image_recording_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_image_processing>
      </PDBo:has_em_image_processing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_image_recordingCategory/PDBx:em_image_recording">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="imaging_id_truncated"><xsl:choose><xsl:when test="string-length(@imaging_id)&lt;64"><xsl:value-of select="@imaging_id"/></xsl:when><xsl:when test="contains(@imaging_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@imaging_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@imaging_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="imaging_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($imaging_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_image_recording>
      <PDBo:em_image_recording rdf:about="{$base}/em_image_recording/{$id_encoded},{$imaging_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_image_recording>
      </PDBo:has_em_image_recording>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_image_scansCategory/PDBx:em_image_scans">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_recording_id_truncated"><xsl:choose><xsl:when test="string-length(@image_recording_id)&lt;64"><xsl:value-of select="@image_recording_id"/></xsl:when><xsl:when test="contains(@image_recording_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_recording_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_recording_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_recording_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_recording_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_image_scans>
      <PDBo:em_image_scans rdf:about="{$base}/em_image_scans/{$id_encoded},{$image_recording_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_em_image_scans rdf:resource="{$base}/em_image_scans/{$id_encoded},{$image_recording_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_16_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_image_scans>
      </PDBo:has_em_image_scans>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_imagingCategory/PDBx:em_imaging">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_imaging>
      <PDBo:em_imaging rdf:about="{$base}/em_imaging/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_imaging rdf:resource="{$base}/em_imaging/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_17_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_imaging>
      </PDBo:has_em_imaging>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_imaging_opticsCategory/PDBx:em_imaging_optics">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="imaging_id_truncated"><xsl:choose><xsl:when test="string-length(@imaging_id)&lt;64"><xsl:value-of select="@imaging_id"/></xsl:when><xsl:when test="contains(@imaging_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@imaging_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@imaging_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="imaging_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($imaging_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_imaging_optics>
      <PDBo:em_imaging_optics rdf:about="{$base}/em_imaging_optics/{$id_encoded},{$imaging_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_imaging_optics>
      </PDBo:has_em_imaging_optics>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_interpret_figureCategory/PDBx:em_interpret_figure">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_interpret_figure>
      <PDBo:em_interpret_figure rdf:about="{$base}/em_interpret_figure/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_interpret_figure>
      </PDBo:has_em_interpret_figure>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_layer_linesCategory/PDBx:em_layer_lines">
      <xsl:variable name="experiment_id_truncated"><xsl:choose><xsl:when test="string-length(@experiment_id)&lt;64"><xsl:value-of select="@experiment_id"/></xsl:when><xsl:when test="contains(@experiment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@experiment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@experiment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="experiment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($experiment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_layer_lines>
      <PDBo:em_layer_lines rdf:about="{$base}/em_layer_lines/{$experiment_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_layer_lines>
      </PDBo:has_em_layer_lines>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_layer_lines_depositor_infoCategory/PDBx:em_layer_lines_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_layer_lines_depositor_info>
      <PDBo:em_layer_lines_depositor_info rdf:about="{$base}/em_layer_lines_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_layer_lines_depositor_info>
      </PDBo:has_em_layer_lines_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_mapCategory/PDBx:em_map">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_map>
      <PDBo:em_map rdf:about="{$base}/em_map/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_map rdf:resource="{$base}/em_map/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_18_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_map>
      </PDBo:has_em_map>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_map_depositor_infoCategory/PDBx:em_map_depositor_info">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_map_depositor_info>
      <PDBo:em_map_depositor_info rdf:about="{$base}/em_map_depositor_info/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_map_depositor_info rdf:resource="{$base}/em_map_depositor_info/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_19_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_map_depositor_info>
      </PDBo:has_em_map_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_mask_depositor_infoCategory/PDBx:em_mask_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_mask_depositor_info>
      <PDBo:em_mask_depositor_info rdf:about="{$base}/em_mask_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_mask_depositor_info>
      </PDBo:has_em_mask_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_obsoleteCategory/PDBx:em_obsolete">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_obsolete>
      <PDBo:em_obsolete rdf:about="{$base}/em_obsolete/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_obsolete>
      </PDBo:has_em_obsolete>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_particle_selectionCategory/PDBx:em_particle_selection">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_particle_selection>
      <PDBo:em_particle_selection rdf:about="{$base}/em_particle_selection/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_particle_selection>
      </PDBo:has_em_particle_selection>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_sample_preparationCategory/PDBx:em_sample_preparation">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_sample_preparation>
      <PDBo:em_sample_preparation rdf:about="{$base}/em_sample_preparation/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_em_sample_preparation rdf:resource="{$base}/em_sample_preparation/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_20_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_sample_preparation>
      </PDBo:has_em_sample_preparation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_sample_supportCategory/PDBx:em_sample_support">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="specimen_id_truncated"><xsl:choose><xsl:when test="string-length(@specimen_id)&lt;64"><xsl:value-of select="@specimen_id"/></xsl:when><xsl:when test="contains(@specimen_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@specimen_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@specimen_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="specimen_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($specimen_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_sample_support>
      <PDBo:em_sample_support rdf:about="{$base}/em_sample_support/{$id_encoded},{$specimen_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_sample_support>
      </PDBo:has_em_sample_support>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_shadowingCategory/PDBx:em_shadowing">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="specimen_id_truncated"><xsl:choose><xsl:when test="string-length(@specimen_id)&lt;64"><xsl:value-of select="@specimen_id"/></xsl:when><xsl:when test="contains(@specimen_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@specimen_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@specimen_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="specimen_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($specimen_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_shadowing>
      <PDBo:em_shadowing rdf:about="{$base}/em_shadowing/{$id_encoded},{$specimen_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_shadowing>
      </PDBo:has_em_shadowing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_single_particle_entityCategory/PDBx:em_single_particle_entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_single_particle_entity>
      <PDBo:em_single_particle_entity rdf:about="{$base}/em_single_particle_entity/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_single_particle_entity>
      </PDBo:has_em_single_particle_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_softwareCategory/PDBx:em_software">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_software>
      <PDBo:em_software rdf:about="{$base}/em_software/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_software>
      </PDBo:has_em_software>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_specimenCategory/PDBx:em_specimen">
      <xsl:variable name="experiment_id_truncated"><xsl:choose><xsl:when test="string-length(@experiment_id)&lt;64"><xsl:value-of select="@experiment_id"/></xsl:when><xsl:when test="contains(@experiment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@experiment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@experiment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="experiment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($experiment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_specimen>
      <PDBo:em_specimen rdf:about="{$base}/em_specimen/{$experiment_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_specimen>
      </PDBo:has_em_specimen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_stainingCategory/PDBx:em_staining">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_staining>
      <PDBo:em_staining rdf:about="{$base}/em_staining/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_staining>
      </PDBo:has_em_staining>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_start_modelCategory/PDBx:em_start_model">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_start_model>
      <PDBo:em_start_model rdf:about="{$base}/em_start_model/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_start_model>
      </PDBo:has_em_start_model>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_structure_factorsCategory/PDBx:em_structure_factors">
      <xsl:variable name="experiment_id_truncated"><xsl:choose><xsl:when test="string-length(@experiment_id)&lt;64"><xsl:value-of select="@experiment_id"/></xsl:when><xsl:when test="contains(@experiment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@experiment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@experiment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="experiment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($experiment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_structure_factors>
      <PDBo:em_structure_factors rdf:about="{$base}/em_structure_factors/{$experiment_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_structure_factors>
      </PDBo:has_em_structure_factors>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_structure_factors_depositor_infoCategory/PDBx:em_structure_factors_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_structure_factors_depositor_info>
      <PDBo:em_structure_factors_depositor_info rdf:about="{$base}/em_structure_factors_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_structure_factors_depositor_info>
      </PDBo:has_em_structure_factors_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_supersedeCategory/PDBx:em_supersede">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_supersede>
      <PDBo:em_supersede rdf:about="{$base}/em_supersede/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_supersede>
      </PDBo:has_em_supersede>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_support_filmCategory/PDBx:em_support_film">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_support_film>
      <PDBo:em_support_film rdf:about="{$base}/em_support_film/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_support_film>
      </PDBo:has_em_support_film>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_tomographyCategory/PDBx:em_tomography">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="imaging_id_truncated"><xsl:choose><xsl:when test="string-length(@imaging_id)&lt;64"><xsl:value-of select="@imaging_id"/></xsl:when><xsl:when test="contains(@imaging_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@imaging_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@imaging_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="imaging_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($imaging_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_tomography>
      <PDBo:em_tomography rdf:about="{$base}/em_tomography/{$id_encoded},{$imaging_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_tomography>
      </PDBo:has_em_tomography>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_tomography_specimenCategory/PDBx:em_tomography_specimen">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_tomography_specimen>
      <PDBo:em_tomography_specimen rdf:about="{$base}/em_tomography_specimen/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_tomography_specimen>
      </PDBo:has_em_tomography_specimen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_ultramicrotomyCategory/PDBx:em_ultramicrotomy">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_ultramicrotomy>
      <PDBo:em_ultramicrotomy rdf:about="{$base}/em_ultramicrotomy/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:em_tomography_specimen_id!=''">
	<PDBo:reference_to_em_tomography_specimen>
	  <rdf:Description rdf:about="{$base}/em_tomography_specimen/{translate(PDBx:em_tomography_specimen_id,' ^','__')}">
	    <PDBo:referenced_by_em_ultramicrotomy rdf:resource="{$base}/em_ultramicrotomy/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_tomography_specimen>
	<!-- em_tomography_specimenKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_ultramicrotomy>
      </PDBo:has_em_ultramicrotomy>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_virus_entityCategory/PDBx:em_virus_entity">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_virus_entity>
      <PDBo:em_virus_entity rdf:about="{$base}/em_virus_entity/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_virus_entity rdf:resource="{$base}/em_virus_entity/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_virus_entity>
      </PDBo:has_em_virus_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_virus_natural_hostCategory/PDBx:em_virus_natural_host">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_virus_natural_host>
      <PDBo:em_virus_natural_host rdf:about="{$base}/em_virus_natural_host/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_virus_natural_host rdf:resource="{$base}/em_virus_natural_host/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_virus_natural_host>
      </PDBo:has_em_virus_natural_host>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_virus_shellCategory/PDBx:em_virus_shell">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_virus_shell>
      <PDBo:em_virus_shell rdf:about="{$base}/em_virus_shell/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_virus_shell rdf:resource="{$base}/em_virus_shell/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_virus_shell>
      </PDBo:has_em_virus_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_virus_syntheticCategory/PDBx:em_virus_synthetic">
      <xsl:variable name="entity_assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_assembly_id)&lt;64"><xsl:value-of select="@entity_assembly_id"/></xsl:when><xsl:when test="contains(@entity_assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_virus_synthetic>
      <PDBo:em_virus_synthetic rdf:about="{$base}/em_virus_synthetic/{$entity_assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_assembly_id!=''">
	<PDBo:reference_to_em_entity_assembly>
	  <rdf:Description rdf:about="{$base}/em_entity_assembly/">
	    <PDBo:referenced_by_em_virus_synthetic rdf:resource="{$base}/em_virus_synthetic/{$entity_assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_em_entity_assembly>
	<!-- em_entity_assemblyKeyref_0_0_7_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_virus_synthetic>
      </PDBo:has_em_virus_synthetic>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_vitrificationCategory/PDBx:em_vitrification">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="specimen_id_truncated"><xsl:choose><xsl:when test="string-length(@specimen_id)&lt;64"><xsl:value-of select="@specimen_id"/></xsl:when><xsl:when test="contains(@specimen_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@specimen_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@specimen_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="specimen_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($specimen_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_vitrification>
      <PDBo:em_vitrification rdf:about="{$base}/em_vitrification/{$id_encoded},{$specimen_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_em_vitrification rdf:resource="{$base}/em_vitrification/{$id_encoded},{$specimen_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_21_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_vitrification>
      </PDBo:has_em_vitrification>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:em_volume_selectionCategory/PDBx:em_volume_selection">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="image_processing_id_truncated"><xsl:choose><xsl:when test="string-length(@image_processing_id)&lt;64"><xsl:value-of select="@image_processing_id"/></xsl:when><xsl:when test="contains(@image_processing_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@image_processing_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@image_processing_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="image_processing_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($image_processing_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_em_volume_selection>
      <PDBo:em_volume_selection rdf:about="{$base}/em_volume_selection/{$id_encoded},{$image_processing_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:em_volume_selection>
      </PDBo:has_em_volume_selection>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entityCategory/PDBx:entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity>
      <PDBo:entity rdf:about="{$base}/entity/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity>
      </PDBo:has_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_keywordsCategory/PDBx:entity_keywords">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_keywords>
      <PDBo:entity_keywords rdf:about="{$base}/entity_keywords/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_keywords rdf:resource="{$base}/entity_keywords/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_keywords>
      </PDBo:has_entity_keywords>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_linkCategory/PDBx:entity_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_link>
      <PDBo:entity_link rdf:about="{$base}/entity_link/{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@link_id!=''">
	<PDBo:reference_to_chem_link>
	  <rdf:Description rdf:about="{$base}/chem_link/">
	    <PDBo:referenced_by_entity_link rdf:resource="{$base}/entity_link/{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_link>
	<!-- chem_linkKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:if test="PDBx:entity_id_1!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:entity_id_1,' ^','__')}">
	    <PDBo:referenced_by_entity_link rdf:resource="{$base}/entity_link/{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:if test="PDBx:entity_id_2!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:entity_id_2,' ^','__')}">
	    <PDBo:referenced_by_entity_link rdf:resource="{$base}/entity_link/{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_2_1 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_link>
      </PDBo:has_entity_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_name_comCategory/PDBx:entity_name_com">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_name_com>
      <PDBo:entity_name_com rdf:about="{$base}/entity_name_com/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_name_com rdf:resource="{$base}/entity_name_com/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_name_com>
      </PDBo:has_entity_name_com>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_name_sysCategory/PDBx:entity_name_sys">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_name_sys>
      <PDBo:entity_name_sys rdf:about="{$base}/entity_name_sys/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_name_sys rdf:resource="{$base}/entity_name_sys/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_name_sys>
      </PDBo:has_entity_name_sys>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_polyCategory/PDBx:entity_poly">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_poly>
      <PDBo:entity_poly rdf:about="{$base}/entity_poly/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_poly rdf:resource="{$base}/entity_poly/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_poly>
      </PDBo:has_entity_poly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_src_genCategory/PDBx:entity_src_gen">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_src_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_src_id)&lt;64"><xsl:value-of select="@pdbx_src_id"/></xsl:when><xsl:when test="contains(@pdbx_src_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_src_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_src_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_src_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_src_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_src_gen>
      <PDBo:entity_src_gen rdf:about="{$base}/entity_src_gen/{$entity_id_encoded},{$pdbx_src_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_src_gen rdf:resource="{$base}/entity_src_gen/{$entity_id_encoded},{$pdbx_src_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_src_gen>
      </PDBo:has_entity_src_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entity_src_natCategory/PDBx:entity_src_nat">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_src_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_src_id)&lt;64"><xsl:value-of select="@pdbx_src_id"/></xsl:when><xsl:when test="contains(@pdbx_src_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_src_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_src_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_src_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_src_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entity_src_nat>
      <PDBo:entity_src_nat rdf:about="{$base}/entity_src_nat/{$entity_id_encoded},{$pdbx_src_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_entity_src_nat rdf:resource="{$base}/entity_src_nat/{$entity_id_encoded},{$pdbx_src_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_7_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entity_src_nat>
      </PDBo:has_entity_src_nat>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entryCategory/PDBx:entry">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entry>
      <PDBo:entry rdf:about="{$base}/entry/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entry>
      </PDBo:has_entry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:entry_linkCategory/PDBx:entry_link">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_entry_link>
      <PDBo:entry_link rdf:about="{$base}/entry_link/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_entry_link rdf:resource="{$base}/entry_link/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_22_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:entry_link>
      </PDBo:has_entry_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:exptlCategory/PDBx:exptl">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="method_truncated"><xsl:choose><xsl:when test="string-length(@method)&lt;64"><xsl:value-of select="@method"/></xsl:when><xsl:when test="contains(@method,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@method,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@method,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="method_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($method_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_exptl>
      <PDBo:exptl rdf:about="{$base}/exptl/{$entry_id_encoded},{$method_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_exptl rdf:resource="{$base}/exptl/{$entry_id_encoded},{$method_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_23_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:exptl>
      </PDBo:has_exptl>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:exptl_crystalCategory/PDBx:exptl_crystal">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_exptl_crystal>
      <PDBo:exptl_crystal rdf:about="{$base}/exptl_crystal/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:exptl_crystal>
      </PDBo:has_exptl_crystal>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:exptl_crystal_faceCategory/PDBx:exptl_crystal_face">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_exptl_crystal_face>
      <PDBo:exptl_crystal_face rdf:about="{$base}/exptl_crystal_face/{$crystal_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_exptl_crystal_face rdf:resource="{$base}/exptl_crystal_face/{$crystal_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:exptl_crystal_face>
      </PDBo:has_exptl_crystal_face>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:exptl_crystal_growCategory/PDBx:exptl_crystal_grow">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_exptl_crystal_grow>
      <PDBo:exptl_crystal_grow rdf:about="{$base}/exptl_crystal_grow/{$crystal_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_exptl_crystal_grow rdf:resource="{$base}/exptl_crystal_grow/{$crystal_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:exptl_crystal_grow>
      </PDBo:has_exptl_crystal_grow>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:exptl_crystal_grow_compCategory/PDBx:exptl_crystal_grow_comp">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_exptl_crystal_grow_comp>
      <PDBo:exptl_crystal_grow_comp rdf:about="{$base}/exptl_crystal_grow_comp/{$crystal_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_exptl_crystal_grow_comp rdf:resource="{$base}/exptl_crystal_grow_comp/{$crystal_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:exptl_crystal_grow_comp>
      </PDBo:has_exptl_crystal_grow_comp>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geomCategory/PDBx:geom">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom>
      <PDBo:geom rdf:about="{$base}/geom/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_geom rdf:resource="{$base}/geom/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_24_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom>
      </PDBo:has_geom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geom_angleCategory/PDBx:geom_angle">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_3)&lt;64"><xsl:value-of select="@atom_site_id_3"/></xsl:when><xsl:when test="contains(@atom_site_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_3_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_3)&lt;64"><xsl:value-of select="@site_symmetry_3"/></xsl:when><xsl:when test="contains(@site_symmetry_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom_angle>
      <PDBo:geom_angle rdf:about="{$base}/geom_angle/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$atom_site_id_3_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded},{$site_symmetry_3_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom_angle>
      </PDBo:has_geom_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geom_bondCategory/PDBx:geom_bond">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom_bond>
      <PDBo:geom_bond rdf:about="{$base}/geom_bond/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom_bond>
      </PDBo:has_geom_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geom_contactCategory/PDBx:geom_contact">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom_contact>
      <PDBo:geom_contact rdf:about="{$base}/geom_contact/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom_contact>
      </PDBo:has_geom_contact>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geom_hbondCategory/PDBx:geom_hbond">
      <xsl:variable name="atom_site_id_A_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_A)&lt;64"><xsl:value-of select="@atom_site_id_A"/></xsl:when><xsl:when test="contains(@atom_site_id_A,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_A,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_A,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_A_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_A_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_D_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_D)&lt;64"><xsl:value-of select="@atom_site_id_D"/></xsl:when><xsl:when test="contains(@atom_site_id_D,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_D,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_D,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_D_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_D_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_H_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_H)&lt;64"><xsl:value-of select="@atom_site_id_H"/></xsl:when><xsl:when test="contains(@atom_site_id_H,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_H,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_H,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_H_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_H_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_A_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_A)&lt;64"><xsl:value-of select="@site_symmetry_A"/></xsl:when><xsl:when test="contains(@site_symmetry_A,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_A,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_A,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_A_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_A_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_D_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_D)&lt;64"><xsl:value-of select="@site_symmetry_D"/></xsl:when><xsl:when test="contains(@site_symmetry_D,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_D,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_D,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_D_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_D_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_H_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_H)&lt;64"><xsl:value-of select="@site_symmetry_H"/></xsl:when><xsl:when test="contains(@site_symmetry_H,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_H,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_H,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_H_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_H_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom_hbond>
      <PDBo:geom_hbond rdf:about="{$base}/geom_hbond/{$atom_site_id_A_encoded},{$atom_site_id_D_encoded},{$atom_site_id_H_encoded},{$site_symmetry_A_encoded},{$site_symmetry_D_encoded},{$site_symmetry_H_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom_hbond>
      </PDBo:has_geom_hbond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:geom_torsionCategory/PDBx:geom_torsion">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_3)&lt;64"><xsl:value-of select="@atom_site_id_3"/></xsl:when><xsl:when test="contains(@atom_site_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_4_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_4)&lt;64"><xsl:value-of select="@atom_site_id_4"/></xsl:when><xsl:when test="contains(@atom_site_id_4,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_4,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_4,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_4_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_4_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_3_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_3)&lt;64"><xsl:value-of select="@site_symmetry_3"/></xsl:when><xsl:when test="contains(@site_symmetry_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_4_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_4)&lt;64"><xsl:value-of select="@site_symmetry_4"/></xsl:when><xsl:when test="contains(@site_symmetry_4,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_4,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_4,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_4_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_4_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_geom_torsion>
      <PDBo:geom_torsion rdf:about="{$base}/geom_torsion/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$atom_site_id_3_encoded},{$atom_site_id_4_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded},{$site_symmetry_3_encoded},{$site_symmetry_4_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:geom_torsion>
      </PDBo:has_geom_torsion>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:journalCategory/PDBx:journal">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_journal>
      <PDBo:journal rdf:about="{$base}/journal/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_journal rdf:resource="{$base}/journal/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_25_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:journal>
      </PDBo:has_journal>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:journal_indexCategory/PDBx:journal_index">
      <xsl:variable name="term_truncated"><xsl:choose><xsl:when test="string-length(@term)&lt;64"><xsl:value-of select="@term"/></xsl:when><xsl:when test="contains(@term,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@term,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@term,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="term_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($term_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_journal_index>
      <PDBo:journal_index rdf:about="{$base}/journal_index/{$term_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:journal_index>
      </PDBo:has_journal_index>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:ndb_original_ndb_coordinatesCategory/PDBx:ndb_original_ndb_coordinates">
      <xsl:variable name="coord_section_truncated"><xsl:choose><xsl:when test="string-length(@coord_section)&lt;64"><xsl:value-of select="@coord_section"/></xsl:when><xsl:when test="contains(@coord_section,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@coord_section,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@coord_section,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="coord_section_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($coord_section_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_ndb_original_ndb_coordinates>
      <PDBo:ndb_original_ndb_coordinates rdf:about="{$base}/ndb_original_ndb_coordinates/{$coord_section_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:ndb_original_ndb_coordinates>
      </PDBo:has_ndb_original_ndb_coordinates>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:ndb_struct_conf_naCategory/PDBx:ndb_struct_conf_na">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="feature_truncated"><xsl:choose><xsl:when test="string-length(@feature)&lt;64"><xsl:value-of select="@feature"/></xsl:when><xsl:when test="contains(@feature,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_ndb_struct_conf_na>
      <PDBo:ndb_struct_conf_na rdf:about="{$base}/ndb_struct_conf_na/{$entry_id_encoded},{$feature_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_ndb_struct_conf_na rdf:resource="{$base}/ndb_struct_conf_na/{$entry_id_encoded},{$feature_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_26_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:ndb_struct_conf_na>
      </PDBo:has_ndb_struct_conf_na>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:ndb_struct_feature_naCategory/PDBx:ndb_struct_feature_na">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="feature_truncated"><xsl:choose><xsl:when test="string-length(@feature)&lt;64"><xsl:value-of select="@feature"/></xsl:when><xsl:when test="contains(@feature,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_ndb_struct_feature_na>
      <PDBo:ndb_struct_feature_na rdf:about="{$base}/ndb_struct_feature_na/{$entry_id_encoded},{$feature_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_ndb_struct_feature_na rdf:resource="{$base}/ndb_struct_feature_na/{$entry_id_encoded},{$feature_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_27_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:ndb_struct_feature_na>
      </PDBo:has_ndb_struct_feature_na>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:ndb_struct_na_base_pairCategory/PDBx:ndb_struct_na_base_pair">
      <xsl:variable name="i_label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@i_label_asym_id)&lt;64"><xsl:value-of select="@i_label_asym_id"/></xsl:when><xsl:when test="contains(@i_label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@i_label_comp_id)&lt;64"><xsl:value-of select="@i_label_comp_id"/></xsl:when><xsl:when test="contains(@i_label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@i_label_seq_id)&lt;64"><xsl:value-of select="@i_label_seq_id"/></xsl:when><xsl:when test="contains(@i_label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_symmetry_truncated"><xsl:choose><xsl:when test="string-length(@i_symmetry)&lt;64"><xsl:value-of select="@i_symmetry"/></xsl:when><xsl:when test="contains(@i_symmetry,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_symmetry,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_symmetry,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_symmetry_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_symmetry_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@j_label_asym_id)&lt;64"><xsl:value-of select="@j_label_asym_id"/></xsl:when><xsl:when test="contains(@j_label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@j_label_comp_id)&lt;64"><xsl:value-of select="@j_label_comp_id"/></xsl:when><xsl:when test="contains(@j_label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@j_label_seq_id)&lt;64"><xsl:value-of select="@j_label_seq_id"/></xsl:when><xsl:when test="contains(@j_label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_symmetry_truncated"><xsl:choose><xsl:when test="string-length(@j_symmetry)&lt;64"><xsl:value-of select="@j_symmetry"/></xsl:when><xsl:when test="contains(@j_symmetry,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_symmetry,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_symmetry,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_symmetry_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_symmetry_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_number_truncated"><xsl:choose><xsl:when test="string-length(@model_number)&lt;64"><xsl:value-of select="@model_number"/></xsl:when><xsl:when test="contains(@model_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_ndb_struct_na_base_pair>
      <PDBo:ndb_struct_na_base_pair rdf:about="{$base}/ndb_struct_na_base_pair/{$i_label_asym_id_encoded},{$i_label_comp_id_encoded},{$i_label_seq_id_encoded},{$i_symmetry_encoded},{$j_label_asym_id_encoded},{$j_label_comp_id_encoded},{$j_label_seq_id_encoded},{$j_symmetry_encoded},{$model_number_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:ndb_struct_na_base_pair>
      </PDBo:has_ndb_struct_na_base_pair>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:ndb_struct_na_base_pair_stepCategory/PDBx:ndb_struct_na_base_pair_step">
      <xsl:variable name="i_label_asym_id_1_truncated"><xsl:choose><xsl:when test="string-length(@i_label_asym_id_1)&lt;64"><xsl:value-of select="@i_label_asym_id_1"/></xsl:when><xsl:when test="contains(@i_label_asym_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_asym_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_asym_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_asym_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_asym_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_asym_id_2_truncated"><xsl:choose><xsl:when test="string-length(@i_label_asym_id_2)&lt;64"><xsl:value-of select="@i_label_asym_id_2"/></xsl:when><xsl:when test="contains(@i_label_asym_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_asym_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_asym_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_asym_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_asym_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_comp_id_1_truncated"><xsl:choose><xsl:when test="string-length(@i_label_comp_id_1)&lt;64"><xsl:value-of select="@i_label_comp_id_1"/></xsl:when><xsl:when test="contains(@i_label_comp_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_comp_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_comp_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_comp_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_comp_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_comp_id_2_truncated"><xsl:choose><xsl:when test="string-length(@i_label_comp_id_2)&lt;64"><xsl:value-of select="@i_label_comp_id_2"/></xsl:when><xsl:when test="contains(@i_label_comp_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_comp_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_comp_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_comp_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_comp_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_seq_id_1_truncated"><xsl:choose><xsl:when test="string-length(@i_label_seq_id_1)&lt;64"><xsl:value-of select="@i_label_seq_id_1"/></xsl:when><xsl:when test="contains(@i_label_seq_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_seq_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_seq_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_seq_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_seq_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_label_seq_id_2_truncated"><xsl:choose><xsl:when test="string-length(@i_label_seq_id_2)&lt;64"><xsl:value-of select="@i_label_seq_id_2"/></xsl:when><xsl:when test="contains(@i_label_seq_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_label_seq_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_label_seq_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_label_seq_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_label_seq_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@i_symmetry_1)&lt;64"><xsl:value-of select="@i_symmetry_1"/></xsl:when><xsl:when test="contains(@i_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="i_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@i_symmetry_2)&lt;64"><xsl:value-of select="@i_symmetry_2"/></xsl:when><xsl:when test="contains(@i_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@i_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@i_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="i_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($i_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_asym_id_1_truncated"><xsl:choose><xsl:when test="string-length(@j_label_asym_id_1)&lt;64"><xsl:value-of select="@j_label_asym_id_1"/></xsl:when><xsl:when test="contains(@j_label_asym_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_asym_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_asym_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_asym_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_asym_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_asym_id_2_truncated"><xsl:choose><xsl:when test="string-length(@j_label_asym_id_2)&lt;64"><xsl:value-of select="@j_label_asym_id_2"/></xsl:when><xsl:when test="contains(@j_label_asym_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_asym_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_asym_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_asym_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_asym_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_comp_id_1_truncated"><xsl:choose><xsl:when test="string-length(@j_label_comp_id_1)&lt;64"><xsl:value-of select="@j_label_comp_id_1"/></xsl:when><xsl:when test="contains(@j_label_comp_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_comp_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_comp_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_comp_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_comp_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_comp_id_2_truncated"><xsl:choose><xsl:when test="string-length(@j_label_comp_id_2)&lt;64"><xsl:value-of select="@j_label_comp_id_2"/></xsl:when><xsl:when test="contains(@j_label_comp_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_comp_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_comp_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_comp_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_comp_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_seq_id_1_truncated"><xsl:choose><xsl:when test="string-length(@j_label_seq_id_1)&lt;64"><xsl:value-of select="@j_label_seq_id_1"/></xsl:when><xsl:when test="contains(@j_label_seq_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_seq_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_seq_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_seq_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_seq_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_label_seq_id_2_truncated"><xsl:choose><xsl:when test="string-length(@j_label_seq_id_2)&lt;64"><xsl:value-of select="@j_label_seq_id_2"/></xsl:when><xsl:when test="contains(@j_label_seq_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_label_seq_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_label_seq_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_label_seq_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_label_seq_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@j_symmetry_1)&lt;64"><xsl:value-of select="@j_symmetry_1"/></xsl:when><xsl:when test="contains(@j_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="j_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@j_symmetry_2)&lt;64"><xsl:value-of select="@j_symmetry_2"/></xsl:when><xsl:when test="contains(@j_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@j_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@j_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="j_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($j_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_number_truncated"><xsl:choose><xsl:when test="string-length(@model_number)&lt;64"><xsl:value-of select="@model_number"/></xsl:when><xsl:when test="contains(@model_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_ndb_struct_na_base_pair_step>
      <PDBo:ndb_struct_na_base_pair_step rdf:about="{$base}/ndb_struct_na_base_pair_step/{$i_label_asym_id_1_encoded},{$i_label_asym_id_2_encoded},{$i_label_comp_id_1_encoded},{$i_label_comp_id_2_encoded},{$i_label_seq_id_1_encoded},{$i_label_seq_id_2_encoded},{$i_symmetry_1_encoded},{$i_symmetry_2_encoded},{$j_label_asym_id_1_encoded},{$j_label_asym_id_2_encoded},{$j_label_comp_id_1_encoded},{$j_label_comp_id_2_encoded},{$j_label_seq_id_1_encoded},{$j_label_seq_id_2_encoded},{$j_symmetry_1_encoded},{$j_symmetry_2_encoded},{$model_number_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:ndb_struct_na_base_pair_step>
      </PDBo:has_ndb_struct_na_base_pair_step>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_SG_projectCategory/PDBx:pdbx_SG_project">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_SG_project>
      <PDBo:pdbx_SG_project rdf:about="{$base}/pdbx_SG_project/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_SG_project>
      </PDBo:has_pdbx_SG_project>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_atlasCategory/PDBx:pdbx_atlas">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="page_id_truncated"><xsl:choose><xsl:when test="string-length(@page_id)&lt;64"><xsl:value-of select="@page_id"/></xsl:when><xsl:when test="contains(@page_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@page_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@page_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="page_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($page_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_atlas>
      <PDBo:pdbx_atlas rdf:about="{$base}/pdbx_atlas/{$entry_id_encoded},{$page_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_atlas rdf:resource="{$base}/pdbx_atlas/{$entry_id_encoded},{$page_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_28_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_atlas>
      </PDBo:has_pdbx_atlas>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_atom_site_aniso_tlsCategory/PDBx:pdbx_atom_site_aniso_tls">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="tls_group_id_truncated"><xsl:choose><xsl:when test="string-length(@tls_group_id)&lt;64"><xsl:value-of select="@tls_group_id"/></xsl:when><xsl:when test="contains(@tls_group_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@tls_group_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@tls_group_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="tls_group_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($tls_group_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_atom_site_aniso_tls>
      <PDBo:pdbx_atom_site_aniso_tls rdf:about="{$base}/pdbx_atom_site_aniso_tls/{$id_encoded},{$tls_group_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:label_alt_id!=''">
	<PDBo:reference_to_atom_sites_alt>
	  <rdf:Description rdf:about="{$base}/atom_sites_alt/{translate(PDBx:label_alt_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_atom_site_aniso_tls rdf:resource="{$base}/pdbx_atom_site_aniso_tls/{$id_encoded},{$tls_group_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_atom_sites_alt>
	<!-- atom_sites_altKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:if test="@tls_group_id!=''">
	<PDBo:reference_to_pdbx_refine_tls>
	  <rdf:Description rdf:about="{$base}/pdbx_refine_tls/">
	    <PDBo:referenced_by_pdbx_atom_site_aniso_tls rdf:resource="{$base}/pdbx_atom_site_aniso_tls/{$id_encoded},{$tls_group_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_refine_tls>
	<!-- pdbx_refine_tlsKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_atom_site_aniso_tls>
      </PDBo:has_pdbx_atom_site_aniso_tls>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_auditCategory/PDBx:pdbx_audit">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit>
      <PDBo:pdbx_audit rdf:about="{$base}/pdbx_audit/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:current_version!=''">
	<PDBo:reference_to_audit>
	  <rdf:Description rdf:about="{$base}/audit/{translate(PDBx:current_version,' ^','__')}">
	    <PDBo:referenced_by_pdbx_audit rdf:resource="{$base}/pdbx_audit/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_audit>
	<!-- auditKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_audit rdf:resource="{$base}/pdbx_audit/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_29_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit>
      </PDBo:has_pdbx_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_authorCategory/PDBx:pdbx_audit_author">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_author>
      <PDBo:pdbx_audit_author rdf:about="{$base}/pdbx_audit_author/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_author>
      </PDBo:has_pdbx_audit_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_conformCategory/PDBx:pdbx_audit_conform">
      <xsl:variable name="dict_name_truncated"><xsl:choose><xsl:when test="string-length(@dict_name)&lt;64"><xsl:value-of select="@dict_name"/></xsl:when><xsl:when test="contains(@dict_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dict_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dict_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dict_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dict_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="dict_version_truncated"><xsl:choose><xsl:when test="string-length(@dict_version)&lt;64"><xsl:value-of select="@dict_version"/></xsl:when><xsl:when test="contains(@dict_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dict_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dict_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dict_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dict_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_conform>
      <PDBo:pdbx_audit_conform rdf:about="{$base}/pdbx_audit_conform/{$dict_name_encoded},{$dict_version_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_conform>
      </PDBo:has_pdbx_audit_conform>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_conform_extensionCategory/PDBx:pdbx_audit_conform_extension">
      <xsl:variable name="extension_dict_name_truncated"><xsl:choose><xsl:when test="string-length(@extension_dict_name)&lt;64"><xsl:value-of select="@extension_dict_name"/></xsl:when><xsl:when test="contains(@extension_dict_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@extension_dict_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@extension_dict_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="extension_dict_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($extension_dict_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="extension_dict_version_truncated"><xsl:choose><xsl:when test="string-length(@extension_dict_version)&lt;64"><xsl:value-of select="@extension_dict_version"/></xsl:when><xsl:when test="contains(@extension_dict_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@extension_dict_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@extension_dict_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="extension_dict_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($extension_dict_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_conform_extension>
      <PDBo:pdbx_audit_conform_extension rdf:about="{$base}/pdbx_audit_conform_extension/{$extension_dict_name_encoded},{$extension_dict_version_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_conform_extension>
      </PDBo:has_pdbx_audit_conform_extension>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_revision_categoryCategory/PDBx:pdbx_audit_revision_category">
      <xsl:variable name="data_content_type_truncated"><xsl:choose><xsl:when test="string-length(@data_content_type)&lt;64"><xsl:value-of select="@data_content_type"/></xsl:when><xsl:when test="contains(@data_content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="revision_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@revision_ordinal)&lt;64"><xsl:value-of select="@revision_ordinal"/></xsl:when><xsl:when test="contains(@revision_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_revision_category>
      <PDBo:pdbx_audit_revision_category rdf:about="{$base}/pdbx_audit_revision_category/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@data_content_type!='' and @revision_ordinal!=''">
	<PDBo:reference_to_pdbx_audit_revision_history>
	  <rdf:Description rdf:about="{$base}/pdbx_audit_revision_history/,">
	    <PDBo:referenced_by_pdbx_audit_revision_category rdf:resource="{$base}/pdbx_audit_revision_category/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_audit_revision_history>
	<!-- pdbx_audit_revision_historyKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_revision_category>
      </PDBo:has_pdbx_audit_revision_category>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_revision_detailsCategory/PDBx:pdbx_audit_revision_details">
      <xsl:variable name="data_content_type_truncated"><xsl:choose><xsl:when test="string-length(@data_content_type)&lt;64"><xsl:value-of select="@data_content_type"/></xsl:when><xsl:when test="contains(@data_content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="revision_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@revision_ordinal)&lt;64"><xsl:value-of select="@revision_ordinal"/></xsl:when><xsl:when test="contains(@revision_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_revision_details>
      <PDBo:pdbx_audit_revision_details rdf:about="{$base}/pdbx_audit_revision_details/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@data_content_type!='' and @revision_ordinal!=''">
	<PDBo:reference_to_pdbx_audit_revision_history>
	  <rdf:Description rdf:about="{$base}/pdbx_audit_revision_history/,">
	    <PDBo:referenced_by_pdbx_audit_revision_details rdf:resource="{$base}/pdbx_audit_revision_details/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_audit_revision_history>
	<!-- pdbx_audit_revision_historyKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_revision_details>
      </PDBo:has_pdbx_audit_revision_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_revision_groupCategory/PDBx:pdbx_audit_revision_group">
      <xsl:variable name="data_content_type_truncated"><xsl:choose><xsl:when test="string-length(@data_content_type)&lt;64"><xsl:value-of select="@data_content_type"/></xsl:when><xsl:when test="contains(@data_content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="revision_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@revision_ordinal)&lt;64"><xsl:value-of select="@revision_ordinal"/></xsl:when><xsl:when test="contains(@revision_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_revision_group>
      <PDBo:pdbx_audit_revision_group rdf:about="{$base}/pdbx_audit_revision_group/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@data_content_type!='' and @revision_ordinal!=''">
	<PDBo:reference_to_pdbx_audit_revision_history>
	  <rdf:Description rdf:about="{$base}/pdbx_audit_revision_history/,">
	    <PDBo:referenced_by_pdbx_audit_revision_group rdf:resource="{$base}/pdbx_audit_revision_group/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_audit_revision_history>
	<!-- pdbx_audit_revision_historyKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_revision_group>
      </PDBo:has_pdbx_audit_revision_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_revision_historyCategory/PDBx:pdbx_audit_revision_history">
      <xsl:variable name="data_content_type_truncated"><xsl:choose><xsl:when test="string-length(@data_content_type)&lt;64"><xsl:value-of select="@data_content_type"/></xsl:when><xsl:when test="contains(@data_content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_revision_history>
      <PDBo:pdbx_audit_revision_history rdf:about="{$base}/pdbx_audit_revision_history/{$data_content_type_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_revision_history>
      </PDBo:has_pdbx_audit_revision_history>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_revision_itemCategory/PDBx:pdbx_audit_revision_item">
      <xsl:variable name="data_content_type_truncated"><xsl:choose><xsl:when test="string-length(@data_content_type)&lt;64"><xsl:value-of select="@data_content_type"/></xsl:when><xsl:when test="contains(@data_content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="revision_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@revision_ordinal)&lt;64"><xsl:value-of select="@revision_ordinal"/></xsl:when><xsl:when test="contains(@revision_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_revision_item>
      <PDBo:pdbx_audit_revision_item rdf:about="{$base}/pdbx_audit_revision_item/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@data_content_type!='' and @revision_ordinal!=''">
	<PDBo:reference_to_pdbx_audit_revision_history>
	  <rdf:Description rdf:about="{$base}/pdbx_audit_revision_history/,">
	    <PDBo:referenced_by_pdbx_audit_revision_item rdf:resource="{$base}/pdbx_audit_revision_item/{$data_content_type_encoded},{$ordinal_encoded},{$revision_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_audit_revision_history>
	<!-- pdbx_audit_revision_historyKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_revision_item>
      </PDBo:has_pdbx_audit_revision_item>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_audit_supportCategory/PDBx:pdbx_audit_support">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_audit_support>
      <PDBo:pdbx_audit_support rdf:about="{$base}/pdbx_audit_support/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_audit_support>
      </PDBo:has_pdbx_audit_support>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_bond_distance_limitsCategory/PDBx:pdbx_bond_distance_limits">
      <xsl:variable name="atom_type_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_type_1)&lt;64"><xsl:value-of select="@atom_type_1"/></xsl:when><xsl:when test="contains(@atom_type_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_type_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_type_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_type_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_type_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_type_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_type_2)&lt;64"><xsl:value-of select="@atom_type_2"/></xsl:when><xsl:when test="contains(@atom_type_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_type_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_type_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_type_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_type_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_bond_distance_limits>
      <PDBo:pdbx_bond_distance_limits rdf:about="{$base}/pdbx_bond_distance_limits/{$atom_type_1_encoded},{$atom_type_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_bond_distance_limits>
      </PDBo:has_pdbx_bond_distance_limits>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_branch_schemeCategory/PDBx:pdbx_branch_scheme">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="mon_id_truncated"><xsl:choose><xsl:when test="string-length(@mon_id)&lt;64"><xsl:value-of select="@mon_id"/></xsl:when><xsl:when test="contains(@mon_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@mon_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@mon_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="mon_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($mon_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="num_truncated"><xsl:choose><xsl:when test="string-length(@num)&lt;64"><xsl:value-of select="@num"/></xsl:when><xsl:when test="contains(@num,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@num,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@num,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="num_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($num_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_branch_scheme>
      <PDBo:pdbx_branch_scheme rdf:about="{$base}/pdbx_branch_scheme/{$asym_id_encoded},{$entity_id_encoded},{$mon_id_encoded},{$num_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_branch_scheme rdf:resource="{$base}/pdbx_branch_scheme/{$asym_id_encoded},{$entity_id_encoded},{$mon_id_encoded},{$num_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_8_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_branch_scheme>
      </PDBo:has_pdbx_branch_scheme>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_bufferCategory/PDBx:pdbx_buffer">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_buffer>
      <PDBo:pdbx_buffer rdf:about="{$base}/pdbx_buffer/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_buffer>
      </PDBo:has_pdbx_buffer>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_buffer_componentsCategory/PDBx:pdbx_buffer_components">
      <xsl:variable name="buffer_id_truncated"><xsl:choose><xsl:when test="string-length(@buffer_id)&lt;64"><xsl:value-of select="@buffer_id"/></xsl:when><xsl:when test="contains(@buffer_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@buffer_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@buffer_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="buffer_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($buffer_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_buffer_components>
      <PDBo:pdbx_buffer_components rdf:about="{$base}/pdbx_buffer_components/{$buffer_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/">
	    <PDBo:referenced_by_pdbx_buffer_components rdf:resource="{$base}/pdbx_buffer_components/{$buffer_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_buffer_components>
      </PDBo:has_pdbx_buffer_components>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chain_remappingCategory/PDBx:pdbx_chain_remapping">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chain_remapping>
      <PDBo:pdbx_chain_remapping rdf:about="{$base}/pdbx_chain_remapping/{$entity_id_encoded},{$label_asym_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_chain_remapping rdf:resource="{$base}/pdbx_chain_remapping/{$entity_id_encoded},{$label_asym_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_9_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chain_remapping>
      </PDBo:has_pdbx_chain_remapping>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_atom_editCategory/PDBx:pdbx_chem_comp_atom_edit">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_atom_edit>
      <PDBo:pdbx_chem_comp_atom_edit rdf:about="{$base}/pdbx_chem_comp_atom_edit/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:comp_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_import>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_import/{translate(PDBx:comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_chem_comp_atom_edit rdf:resource="{$base}/pdbx_chem_comp_atom_edit/{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_import>
	<!-- pdbx_chem_comp_importKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_atom_edit>
      </PDBo:has_pdbx_chem_comp_atom_edit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_atom_featureCategory/PDBx:pdbx_chem_comp_atom_feature">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="feature_type_truncated"><xsl:choose><xsl:when test="string-length(@feature_type)&lt;64"><xsl:value-of select="@feature_type"/></xsl:when><xsl:when test="contains(@feature_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_atom_feature>
      <PDBo:pdbx_chem_comp_atom_feature rdf:about="{$base}/pdbx_chem_comp_atom_feature/{$atom_id_encoded},{$comp_id_encoded},{$feature_type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@atom_id!='' and @comp_id!=''">
	<PDBo:reference_to_chem_comp_atom>
	  <rdf:Description rdf:about="{$base}/chem_comp_atom/,">
	    <PDBo:referenced_by_pdbx_chem_comp_atom_feature rdf:resource="{$base}/pdbx_chem_comp_atom_feature/{$atom_id_encoded},{$comp_id_encoded},{$feature_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp_atom>
	<!-- chem_comp_atomKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_atom_feature>
      </PDBo:has_pdbx_chem_comp_atom_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_atom_relatedCategory/PDBx:pdbx_chem_comp_atom_related">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="related_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@related_comp_id)&lt;64"><xsl:value-of select="@related_comp_id"/></xsl:when><xsl:when test="contains(@related_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@related_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@related_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="related_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($related_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_atom_related>
      <PDBo:pdbx_chem_comp_atom_related rdf:about="{$base}/pdbx_chem_comp_atom_related/{$comp_id_encoded},{$ordinal_encoded},{$related_comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_atom_related rdf:resource="{$base}/pdbx_chem_comp_atom_related/{$comp_id_encoded},{$ordinal_encoded},{$related_comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_8_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_atom_related>
      </PDBo:has_pdbx_chem_comp_atom_related>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_auditCategory/PDBx:pdbx_chem_comp_audit">
      <xsl:variable name="action_type_truncated"><xsl:choose><xsl:when test="string-length(@action_type)&lt;64"><xsl:value-of select="@action_type"/></xsl:when><xsl:when test="contains(@action_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@action_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@action_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="action_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($action_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="date_truncated"><xsl:choose><xsl:when test="string-length(@date)&lt;64"><xsl:value-of select="@date"/></xsl:when><xsl:when test="contains(@date,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@date,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@date,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="date_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($date_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_audit>
      <PDBo:pdbx_chem_comp_audit rdf:about="{$base}/pdbx_chem_comp_audit/{$action_type_encoded},{$comp_id_encoded},{$date_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_audit rdf:resource="{$base}/pdbx_chem_comp_audit/{$action_type_encoded},{$comp_id_encoded},{$date_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_9_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_audit>
      </PDBo:has_pdbx_chem_comp_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_bond_editCategory/PDBx:pdbx_chem_comp_bond_edit">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="edit_op_truncated"><xsl:choose><xsl:when test="string-length(@edit_op)&lt;64"><xsl:value-of select="@edit_op"/></xsl:when><xsl:when test="contains(@edit_op,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@edit_op,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@edit_op,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="edit_op_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($edit_op_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_bond_edit>
      <PDBo:pdbx_chem_comp_bond_edit rdf:about="{$base}/pdbx_chem_comp_bond_edit/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded},{$edit_op_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_import>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_import/">
	    <PDBo:referenced_by_pdbx_chem_comp_bond_edit rdf:resource="{$base}/pdbx_chem_comp_bond_edit/{$atom_id_1_encoded},{$atom_id_2_encoded},{$comp_id_encoded},{$edit_op_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_import>
	<!-- pdbx_chem_comp_importKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_bond_edit>
      </PDBo:has_pdbx_chem_comp_bond_edit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_depositor_infoCategory/PDBx:pdbx_chem_comp_depositor_info">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_depositor_info>
      <PDBo:pdbx_chem_comp_depositor_info rdf:about="{$base}/pdbx_chem_comp_depositor_info/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_depositor_info>
      </PDBo:has_pdbx_chem_comp_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_descriptorCategory/PDBx:pdbx_chem_comp_descriptor">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="program_truncated"><xsl:choose><xsl:when test="string-length(@program)&lt;64"><xsl:value-of select="@program"/></xsl:when><xsl:when test="contains(@program,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@program,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@program,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="program_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($program_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="program_version_truncated"><xsl:choose><xsl:when test="string-length(@program_version)&lt;64"><xsl:value-of select="@program_version"/></xsl:when><xsl:when test="contains(@program_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@program_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@program_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="program_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($program_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_descriptor>
      <PDBo:pdbx_chem_comp_descriptor rdf:about="{$base}/pdbx_chem_comp_descriptor/{$comp_id_encoded},{$program_encoded},{$program_version_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_descriptor rdf:resource="{$base}/pdbx_chem_comp_descriptor/{$comp_id_encoded},{$program_encoded},{$program_version_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_10_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_descriptor>
      </PDBo:has_pdbx_chem_comp_descriptor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_featureCategory/PDBx:pdbx_chem_comp_feature">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="source_truncated"><xsl:choose><xsl:when test="string-length(@source)&lt;64"><xsl:value-of select="@source"/></xsl:when><xsl:when test="contains(@source,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@source,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@source,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="source_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($source_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="value_truncated"><xsl:choose><xsl:when test="string-length(@value)&lt;64"><xsl:value-of select="@value"/></xsl:when><xsl:when test="contains(@value,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@value,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@value,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="value_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($value_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_feature>
      <PDBo:pdbx_chem_comp_feature rdf:about="{$base}/pdbx_chem_comp_feature/{$comp_id_encoded},{$source_encoded},{$type_encoded},{$value_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_feature rdf:resource="{$base}/pdbx_chem_comp_feature/{$comp_id_encoded},{$source_encoded},{$type_encoded},{$value_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_11_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_feature>
      </PDBo:has_pdbx_chem_comp_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_identifierCategory/PDBx:pdbx_chem_comp_identifier">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="program_truncated"><xsl:choose><xsl:when test="string-length(@program)&lt;64"><xsl:value-of select="@program"/></xsl:when><xsl:when test="contains(@program,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@program,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@program,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="program_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($program_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="program_version_truncated"><xsl:choose><xsl:when test="string-length(@program_version)&lt;64"><xsl:value-of select="@program_version"/></xsl:when><xsl:when test="contains(@program_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@program_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@program_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="program_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($program_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_identifier>
      <PDBo:pdbx_chem_comp_identifier rdf:about="{$base}/pdbx_chem_comp_identifier/{$comp_id_encoded},{$program_encoded},{$program_version_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_identifier rdf:resource="{$base}/pdbx_chem_comp_identifier/{$comp_id_encoded},{$program_encoded},{$program_version_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_12_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_identifier>
      </PDBo:has_pdbx_chem_comp_identifier>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_importCategory/PDBx:pdbx_chem_comp_import">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_import>
      <PDBo:pdbx_chem_comp_import rdf:about="{$base}/pdbx_chem_comp_import/{$comp_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_import rdf:resource="{$base}/pdbx_chem_comp_import/{$comp_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_13_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_import>
      </PDBo:has_pdbx_chem_comp_import>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_instance_depositor_infoCategory/PDBx:pdbx_chem_comp_instance_depositor_info">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_instance_depositor_info>
      <PDBo:pdbx_chem_comp_instance_depositor_info rdf:about="{$base}/pdbx_chem_comp_instance_depositor_info/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_instance_depositor_info>
      </PDBo:has_pdbx_chem_comp_instance_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_modelCategory/PDBx:pdbx_chem_comp_model">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model>
      <PDBo:pdbx_chem_comp_model rdf:about="{$base}/pdbx_chem_comp_model/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model>
      </PDBo:has_pdbx_chem_comp_model>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_atomCategory/PDBx:pdbx_chem_comp_model_atom">
      <xsl:variable name="atom_id_truncated"><xsl:choose><xsl:when test="string-length(@atom_id)&lt;64"><xsl:value-of select="@atom_id"/></xsl:when><xsl:when test="contains(@atom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_atom>
      <PDBo:pdbx_chem_comp_model_atom rdf:about="{$base}/pdbx_chem_comp_model_atom/{$atom_id_encoded},{$model_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@model_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_model>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_model/">
	    <PDBo:referenced_by_pdbx_chem_comp_model_atom rdf:resource="{$base}/pdbx_chem_comp_model_atom/{$atom_id_encoded},{$model_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_model>
	<!-- pdbx_chem_comp_modelKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_atom>
      </PDBo:has_pdbx_chem_comp_model_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_auditCategory/PDBx:pdbx_chem_comp_model_audit">
      <xsl:variable name="action_type_truncated"><xsl:choose><xsl:when test="string-length(@action_type)&lt;64"><xsl:value-of select="@action_type"/></xsl:when><xsl:when test="contains(@action_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@action_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@action_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="action_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($action_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="date_truncated"><xsl:choose><xsl:when test="string-length(@date)&lt;64"><xsl:value-of select="@date"/></xsl:when><xsl:when test="contains(@date,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@date,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@date,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="date_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($date_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_audit>
      <PDBo:pdbx_chem_comp_model_audit rdf:about="{$base}/pdbx_chem_comp_model_audit/{$action_type_encoded},{$date_encoded},{$model_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_audit>
      </PDBo:has_pdbx_chem_comp_model_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_bondCategory/PDBx:pdbx_chem_comp_model_bond">
      <xsl:variable name="atom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_1)&lt;64"><xsl:value-of select="@atom_id_1"/></xsl:when><xsl:when test="contains(@atom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_id_2)&lt;64"><xsl:value-of select="@atom_id_2"/></xsl:when><xsl:when test="contains(@atom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_bond>
      <PDBo:pdbx_chem_comp_model_bond rdf:about="{$base}/pdbx_chem_comp_model_bond/{$atom_id_1_encoded},{$atom_id_2_encoded},{$model_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_bond>
      </PDBo:has_pdbx_chem_comp_model_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_descriptorCategory/PDBx:pdbx_chem_comp_model_descriptor">
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_descriptor>
      <PDBo:pdbx_chem_comp_model_descriptor rdf:about="{$base}/pdbx_chem_comp_model_descriptor/{$model_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@model_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_model>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_model/">
	    <PDBo:referenced_by_pdbx_chem_comp_model_descriptor rdf:resource="{$base}/pdbx_chem_comp_model_descriptor/{$model_id_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_model>
	<!-- pdbx_chem_comp_modelKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_descriptor>
      </PDBo:has_pdbx_chem_comp_model_descriptor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_featureCategory/PDBx:pdbx_chem_comp_model_feature">
      <xsl:variable name="feature_name_truncated"><xsl:choose><xsl:when test="string-length(@feature_name)&lt;64"><xsl:value-of select="@feature_name"/></xsl:when><xsl:when test="contains(@feature_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_feature>
      <PDBo:pdbx_chem_comp_model_feature rdf:about="{$base}/pdbx_chem_comp_model_feature/{$feature_name_encoded},{$model_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@model_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_model>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_model/">
	    <PDBo:referenced_by_pdbx_chem_comp_model_feature rdf:resource="{$base}/pdbx_chem_comp_model_feature/{$feature_name_encoded},{$model_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_model>
	<!-- pdbx_chem_comp_modelKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_feature>
      </PDBo:has_pdbx_chem_comp_model_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_model_referenceCategory/PDBx:pdbx_chem_comp_model_reference">
      <xsl:variable name="db_code_truncated"><xsl:choose><xsl:when test="string-length(@db_code)&lt;64"><xsl:value-of select="@db_code"/></xsl:when><xsl:when test="contains(@db_code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@db_code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@db_code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="db_code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($db_code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="db_name_truncated"><xsl:choose><xsl:when test="string-length(@db_name)&lt;64"><xsl:value-of select="@db_name"/></xsl:when><xsl:when test="contains(@db_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@db_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@db_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="db_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($db_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_model_reference>
      <PDBo:pdbx_chem_comp_model_reference rdf:about="{$base}/pdbx_chem_comp_model_reference/{$db_code_encoded},{$db_name_encoded},{$model_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@model_id!=''">
	<PDBo:reference_to_pdbx_chem_comp_model>
	  <rdf:Description rdf:about="{$base}/pdbx_chem_comp_model/">
	    <PDBo:referenced_by_pdbx_chem_comp_model_reference rdf:resource="{$base}/pdbx_chem_comp_model_reference/{$db_code_encoded},{$db_name_encoded},{$model_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_chem_comp_model>
	<!-- pdbx_chem_comp_modelKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_model_reference>
      </PDBo:has_pdbx_chem_comp_model_reference>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_nonstandardCategory/PDBx:pdbx_chem_comp_nonstandard">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_nonstandard>
      <PDBo:pdbx_chem_comp_nonstandard rdf:about="{$base}/pdbx_chem_comp_nonstandard/{$comp_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_nonstandard rdf:resource="{$base}/pdbx_chem_comp_nonstandard/{$comp_id_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_14_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_nonstandard>
      </PDBo:has_pdbx_chem_comp_nonstandard>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_pcmCategory/PDBx:pdbx_chem_comp_pcm">
      <xsl:variable name="pcm_id_truncated"><xsl:choose><xsl:when test="string-length(@pcm_id)&lt;64"><xsl:value-of select="@pcm_id"/></xsl:when><xsl:when test="contains(@pcm_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pcm_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pcm_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pcm_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pcm_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_pcm>
      <PDBo:pdbx_chem_comp_pcm rdf:about="{$base}/pdbx_chem_comp_pcm/{$pcm_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_chem_comp_pcm rdf:resource="{$base}/pdbx_chem_comp_pcm/{$pcm_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_15_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_pcm>
      </PDBo:has_pdbx_chem_comp_pcm>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_relatedCategory/PDBx:pdbx_chem_comp_related">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="related_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@related_comp_id)&lt;64"><xsl:value-of select="@related_comp_id"/></xsl:when><xsl:when test="contains(@related_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@related_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@related_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="related_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($related_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="relationship_type_truncated"><xsl:choose><xsl:when test="string-length(@relationship_type)&lt;64"><xsl:value-of select="@relationship_type"/></xsl:when><xsl:when test="contains(@relationship_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@relationship_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@relationship_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="relationship_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($relationship_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_related>
      <PDBo:pdbx_chem_comp_related rdf:about="{$base}/pdbx_chem_comp_related/{$comp_id_encoded},{$related_comp_id_encoded},{$relationship_type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_related rdf:resource="{$base}/pdbx_chem_comp_related/{$comp_id_encoded},{$related_comp_id_encoded},{$relationship_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_16_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_related>
      </PDBo:has_pdbx_chem_comp_related>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_subcomponent_entity_listCategory/PDBx:pdbx_chem_comp_subcomponent_entity_list">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_subcomponent_entity_list>
      <PDBo:pdbx_chem_comp_subcomponent_entity_list rdf:about="{$base}/pdbx_chem_comp_subcomponent_entity_list/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:parent_comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:parent_comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_chem_comp_subcomponent_entity_list rdf:resource="{$base}/pdbx_chem_comp_subcomponent_entity_list/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_17_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_subcomponent_entity_list>
      </PDBo:has_pdbx_chem_comp_subcomponent_entity_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_subcomponent_struct_connCategory/PDBx:pdbx_chem_comp_subcomponent_struct_conn">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_subcomponent_struct_conn>
      <PDBo:pdbx_chem_comp_subcomponent_struct_conn rdf:about="{$base}/pdbx_chem_comp_subcomponent_struct_conn/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_subcomponent_struct_conn>
      </PDBo:has_pdbx_chem_comp_subcomponent_struct_conn>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_synonymsCategory/PDBx:pdbx_chem_comp_synonyms">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_synonyms>
      <PDBo:pdbx_chem_comp_synonyms rdf:about="{$base}/pdbx_chem_comp_synonyms/{$comp_id_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_chem_comp_synonyms rdf:resource="{$base}/pdbx_chem_comp_synonyms/{$comp_id_encoded},{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_18_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_synonyms>
      </PDBo:has_pdbx_chem_comp_synonyms>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_chem_comp_upload_depositor_infoCategory/PDBx:pdbx_chem_comp_upload_depositor_info">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_chem_comp_upload_depositor_info>
      <PDBo:pdbx_chem_comp_upload_depositor_info rdf:about="{$base}/pdbx_chem_comp_upload_depositor_info/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_chem_comp_upload_depositor_info>
      </PDBo:has_pdbx_chem_comp_upload_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_columninfoCategory/PDBx:pdbx_columninfo">
      <xsl:variable name="columnname_truncated"><xsl:choose><xsl:when test="string-length(@columnname)&lt;64"><xsl:value-of select="@columnname"/></xsl:when><xsl:when test="contains(@columnname,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@columnname,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@columnname,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="columnname_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($columnname_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="tablename_truncated"><xsl:choose><xsl:when test="string-length(@tablename)&lt;64"><xsl:value-of select="@tablename"/></xsl:when><xsl:when test="contains(@tablename,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@tablename,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@tablename,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="tablename_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($tablename_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_columninfo>
      <PDBo:pdbx_columninfo rdf:about="{$base}/pdbx_columninfo/{$columnname_encoded},{$tablename_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_columninfo>
      </PDBo:has_pdbx_columninfo>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_connectCategory/PDBx:pdbx_connect">
      <xsl:variable name="res_name_truncated"><xsl:choose><xsl:when test="string-length(@res_name)&lt;64"><xsl:value-of select="@res_name"/></xsl:when><xsl:when test="contains(@res_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@res_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@res_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="res_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($res_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_connect>
      <PDBo:pdbx_connect rdf:about="{$base}/pdbx_connect/{$res_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_connect>
      </PDBo:has_pdbx_connect>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_connect_atomCategory/PDBx:pdbx_connect_atom">
      <xsl:variable name="atom_name_truncated"><xsl:choose><xsl:when test="string-length(@atom_name)&lt;64"><xsl:value-of select="@atom_name"/></xsl:when><xsl:when test="contains(@atom_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="connect_to_truncated"><xsl:choose><xsl:when test="string-length(@connect_to)&lt;64"><xsl:value-of select="@connect_to"/></xsl:when><xsl:when test="contains(@connect_to,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@connect_to,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@connect_to,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="connect_to_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($connect_to_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="res_name_truncated"><xsl:choose><xsl:when test="string-length(@res_name)&lt;64"><xsl:value-of select="@res_name"/></xsl:when><xsl:when test="contains(@res_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@res_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@res_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="res_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($res_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_connect_atom>
      <PDBo:pdbx_connect_atom rdf:about="{$base}/pdbx_connect_atom/{$atom_name_encoded},{$connect_to_encoded},{$res_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_connect_atom>
      </PDBo:has_pdbx_connect_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_connect_modificationCategory/PDBx:pdbx_connect_modification">
      <xsl:variable name="res_name_truncated"><xsl:choose><xsl:when test="string-length(@res_name)&lt;64"><xsl:value-of select="@res_name"/></xsl:when><xsl:when test="contains(@res_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@res_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@res_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="res_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($res_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_connect_modification>
      <PDBo:pdbx_connect_modification rdf:about="{$base}/pdbx_connect_modification/{$res_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_connect_modification>
      </PDBo:has_pdbx_connect_modification>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_connect_typeCategory/PDBx:pdbx_connect_type">
      <xsl:variable name="res_name_truncated"><xsl:choose><xsl:when test="string-length(@res_name)&lt;64"><xsl:value-of select="@res_name"/></xsl:when><xsl:when test="contains(@res_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@res_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@res_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="res_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($res_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_connect_type>
      <PDBo:pdbx_connect_type rdf:about="{$base}/pdbx_connect_type/{$res_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_connect_type>
      </PDBo:has_pdbx_connect_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_constructCategory/PDBx:pdbx_construct">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_construct>
      <PDBo:pdbx_construct rdf:about="{$base}/pdbx_construct/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_construct rdf:resource="{$base}/pdbx_construct/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_30_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_construct>
      </PDBo:has_pdbx_construct>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_construct_featureCategory/PDBx:pdbx_construct_feature">
      <xsl:variable name="construct_id_truncated"><xsl:choose><xsl:when test="string-length(@construct_id)&lt;64"><xsl:value-of select="@construct_id"/></xsl:when><xsl:when test="contains(@construct_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@construct_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@construct_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="construct_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($construct_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_construct_feature>
      <PDBo:pdbx_construct_feature rdf:about="{$base}/pdbx_construct_feature/{$construct_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_construct_feature rdf:resource="{$base}/pdbx_construct_feature/{$construct_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_31_0 -->
      </xsl:if>
      <xsl:if test="@construct_id!=''">
	<PDBo:reference_to_pdbx_construct>
	  <rdf:Description rdf:about="{$base}/pdbx_construct/">
	    <PDBo:referenced_by_pdbx_construct_feature rdf:resource="{$base}/pdbx_construct_feature/{$construct_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_construct>
	<!-- pdbx_constructKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_construct_feature>
      </PDBo:has_pdbx_construct_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_contact_authorCategory/PDBx:pdbx_contact_author">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_contact_author>
      <PDBo:pdbx_contact_author rdf:about="{$base}/pdbx_contact_author/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_contact_author>
      </PDBo:has_pdbx_contact_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_coordCategory/PDBx:pdbx_coord">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_coord>
      <PDBo:pdbx_coord rdf:about="{$base}/pdbx_coord/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_coord rdf:resource="{$base}/pdbx_coord/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_32_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_coord>
      </PDBo:has_pdbx_coord>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_coordinate_modelCategory/PDBx:pdbx_coordinate_model">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_coordinate_model>
      <PDBo:pdbx_coordinate_model rdf:about="{$base}/pdbx_coordinate_model/{$asym_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_coordinate_model rdf:resource="{$base}/pdbx_coordinate_model/{$asym_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_coordinate_model>
      </PDBo:has_pdbx_coordinate_model>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_crystal_alignmentCategory/PDBx:pdbx_crystal_alignment">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_crystal_alignment>
      <PDBo:pdbx_crystal_alignment rdf:about="{$base}/pdbx_crystal_alignment/{$crystal_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_crystal_alignment>
      </PDBo:has_pdbx_crystal_alignment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_data_processing_cellCategory/PDBx:pdbx_data_processing_cell">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_data_processing_cell>
      <PDBo:pdbx_data_processing_cell rdf:about="{$base}/pdbx_data_processing_cell/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_data_processing_cell rdf:resource="{$base}/pdbx_data_processing_cell/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_33_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_data_processing_cell>
      </PDBo:has_pdbx_data_processing_cell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_data_processing_detectorCategory/PDBx:pdbx_data_processing_detector">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_data_processing_detector>
      <PDBo:pdbx_data_processing_detector rdf:about="{$base}/pdbx_data_processing_detector/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_data_processing_detector rdf:resource="{$base}/pdbx_data_processing_detector/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_34_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_data_processing_detector>
      </PDBo:has_pdbx_data_processing_detector>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_data_processing_reflnsCategory/PDBx:pdbx_data_processing_reflns">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_data_processing_reflns>
      <PDBo:pdbx_data_processing_reflns rdf:about="{$base}/pdbx_data_processing_reflns/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_data_processing_reflns rdf:resource="{$base}/pdbx_data_processing_reflns/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_35_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_data_processing_reflns>
      </PDBo:has_pdbx_data_processing_reflns>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_data_processing_statusCategory/PDBx:pdbx_data_processing_status">
      <xsl:variable name="status_truncated"><xsl:choose><xsl:when test="string-length(@status)&lt;64"><xsl:value-of select="@status"/></xsl:when><xsl:when test="contains(@status,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@status,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@status,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="status_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($status_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="task_name_truncated"><xsl:choose><xsl:when test="string-length(@task_name)&lt;64"><xsl:value-of select="@task_name"/></xsl:when><xsl:when test="contains(@task_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@task_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@task_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="task_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($task_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_data_processing_status>
      <PDBo:pdbx_data_processing_status rdf:about="{$base}/pdbx_data_processing_status/{$status_encoded},{$task_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_data_processing_status>
      </PDBo:has_pdbx_data_processing_status>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_data_usageCategory/PDBx:pdbx_data_usage">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_data_usage>
      <PDBo:pdbx_data_usage rdf:about="{$base}/pdbx_data_usage/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_data_usage>
      </PDBo:has_pdbx_data_usage>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_PDB_masterCategory/PDBx:pdbx_database_PDB_master">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_PDB_master>
      <PDBo:pdbx_database_PDB_master rdf:about="{$base}/pdbx_database_PDB_master/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_database_PDB_master rdf:resource="{$base}/pdbx_database_PDB_master/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_36_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_PDB_master>
      </PDBo:has_pdbx_database_PDB_master>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_PDB_obs_sprCategory/PDBx:pdbx_database_PDB_obs_spr">
      <xsl:variable name="pdb_id_truncated"><xsl:choose><xsl:when test="string-length(@pdb_id)&lt;64"><xsl:value-of select="@pdb_id"/></xsl:when><xsl:when test="contains(@pdb_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="replace_pdb_id_truncated"><xsl:choose><xsl:when test="string-length(@replace_pdb_id)&lt;64"><xsl:value-of select="@replace_pdb_id"/></xsl:when><xsl:when test="contains(@replace_pdb_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@replace_pdb_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@replace_pdb_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="replace_pdb_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($replace_pdb_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_PDB_obs_spr>
      <PDBo:pdbx_database_PDB_obs_spr rdf:about="{$base}/pdbx_database_PDB_obs_spr/{$pdb_id_encoded},{$replace_pdb_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_PDB_obs_spr>
      </PDBo:has_pdbx_database_PDB_obs_spr>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_doiCategory/PDBx:pdbx_database_doi">
      <xsl:variable name="db_name_truncated"><xsl:choose><xsl:when test="string-length(@db_name)&lt;64"><xsl:value-of select="@db_name"/></xsl:when><xsl:when test="contains(@db_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@db_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@db_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="db_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($db_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_doi>
      <PDBo:pdbx_database_doi rdf:about="{$base}/pdbx_database_doi/{$db_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_doi>
      </PDBo:has_pdbx_database_doi>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_messageCategory/PDBx:pdbx_database_message">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="message_id_truncated"><xsl:choose><xsl:when test="string-length(@message_id)&lt;64"><xsl:value-of select="@message_id"/></xsl:when><xsl:when test="contains(@message_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@message_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@message_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="message_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($message_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_message>
      <PDBo:pdbx_database_message rdf:about="{$base}/pdbx_database_message/{$entry_id_encoded},{$message_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_database_message rdf:resource="{$base}/pdbx_database_message/{$entry_id_encoded},{$message_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_37_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_message>
      </PDBo:has_pdbx_database_message>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_pdb_omitCategory/PDBx:pdbx_database_pdb_omit">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="record_name_truncated"><xsl:choose><xsl:when test="string-length(@record_name)&lt;64"><xsl:value-of select="@record_name"/></xsl:when><xsl:when test="contains(@record_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@record_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@record_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="record_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($record_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_pdb_omit>
      <PDBo:pdbx_database_pdb_omit rdf:about="{$base}/pdbx_database_pdb_omit/{$entry_id_encoded},{$record_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_pdb_omit>
      </PDBo:has_pdbx_database_pdb_omit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_procCategory/PDBx:pdbx_database_proc">
      <xsl:variable name="cycle_id_truncated"><xsl:choose><xsl:when test="string-length(@cycle_id)&lt;64"><xsl:value-of select="@cycle_id"/></xsl:when><xsl:when test="contains(@cycle_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@cycle_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@cycle_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="cycle_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($cycle_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_proc>
      <PDBo:pdbx_database_proc rdf:about="{$base}/pdbx_database_proc/{$cycle_id_encoded},{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_database_proc rdf:resource="{$base}/pdbx_database_proc/{$cycle_id_encoded},{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_38_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_proc>
      </PDBo:has_pdbx_database_proc>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_relatedCategory/PDBx:pdbx_database_related">
      <xsl:variable name="content_type_truncated"><xsl:choose><xsl:when test="string-length(@content_type)&lt;64"><xsl:value-of select="@content_type"/></xsl:when><xsl:when test="contains(@content_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@content_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@content_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="content_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($content_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="db_id_truncated"><xsl:choose><xsl:when test="string-length(@db_id)&lt;64"><xsl:value-of select="@db_id"/></xsl:when><xsl:when test="contains(@db_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@db_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@db_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="db_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($db_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="db_name_truncated"><xsl:choose><xsl:when test="string-length(@db_name)&lt;64"><xsl:value-of select="@db_name"/></xsl:when><xsl:when test="contains(@db_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@db_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@db_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="db_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($db_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_related>
      <PDBo:pdbx_database_related rdf:about="{$base}/pdbx_database_related/{$content_type_encoded},{$db_id_encoded},{$db_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_related>
      </PDBo:has_pdbx_database_related>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_remarkCategory/PDBx:pdbx_database_remark">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_remark>
      <PDBo:pdbx_database_remark rdf:about="{$base}/pdbx_database_remark/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_remark>
      </PDBo:has_pdbx_database_remark>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_statusCategory/PDBx:pdbx_database_status">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_status>
      <PDBo:pdbx_database_status rdf:about="{$base}/pdbx_database_status/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_database_status rdf:resource="{$base}/pdbx_database_status/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_39_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_status>
      </PDBo:has_pdbx_database_status>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_database_status_historyCategory/PDBx:pdbx_database_status_history">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_database_status_history>
      <PDBo:pdbx_database_status_history rdf:about="{$base}/pdbx_database_status_history/{$entry_id_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_database_status_history rdf:resource="{$base}/pdbx_database_status_history/{$entry_id_encoded},{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_40_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_database_status_history>
      </PDBo:has_pdbx_database_status_history>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dbrefCategory/PDBx:pdbx_dbref">
      <xsl:variable name="begin_res_number_truncated"><xsl:choose><xsl:when test="string-length(@begin_res_number)&lt;64"><xsl:value-of select="@begin_res_number"/></xsl:when><xsl:when test="contains(@begin_res_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@begin_res_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@begin_res_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="begin_res_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($begin_res_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="chain_id_truncated"><xsl:choose><xsl:when test="string-length(@chain_id)&lt;64"><xsl:value-of select="@chain_id"/></xsl:when><xsl:when test="contains(@chain_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@chain_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@chain_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="chain_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($chain_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="database_name_truncated"><xsl:choose><xsl:when test="string-length(@database_name)&lt;64"><xsl:value-of select="@database_name"/></xsl:when><xsl:when test="contains(@database_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@database_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@database_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="database_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($database_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="end_res_number_truncated"><xsl:choose><xsl:when test="string-length(@end_res_number)&lt;64"><xsl:value-of select="@end_res_number"/></xsl:when><xsl:when test="contains(@end_res_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@end_res_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@end_res_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="end_res_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($end_res_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdb_id_code_truncated"><xsl:choose><xsl:when test="string-length(@pdb_id_code)&lt;64"><xsl:value-of select="@pdb_id_code"/></xsl:when><xsl:when test="contains(@pdb_id_code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_id_code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_id_code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_id_code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_id_code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dbref>
      <PDBo:pdbx_dbref rdf:about="{$base}/pdbx_dbref/{$begin_res_number_encoded},{$chain_id_encoded},{$database_name_encoded},{$end_res_number_encoded},{$pdb_id_code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dbref>
      </PDBo:has_pdbx_dbref>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_densityCategory/PDBx:pdbx_dcc_density">
      <xsl:variable name="pdbid_truncated"><xsl:choose><xsl:when test="string-length(@pdbid)&lt;64"><xsl:value-of select="@pdbid"/></xsl:when><xsl:when test="contains(@pdbid,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbid,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbid,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbid_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbid_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_density>
      <PDBo:pdbx_dcc_density rdf:about="{$base}/pdbx_dcc_density/{$pdbid_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_density>
      </PDBo:has_pdbx_dcc_density>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_density_corrCategory/PDBx:pdbx_dcc_density_corr">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_density_corr>
      <PDBo:pdbx_dcc_density_corr rdf:about="{$base}/pdbx_dcc_density_corr/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_density_corr>
      </PDBo:has_pdbx_dcc_density_corr>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_geometryCategory/PDBx:pdbx_dcc_geometry">
      <xsl:variable name="pdbid_truncated"><xsl:choose><xsl:when test="string-length(@pdbid)&lt;64"><xsl:value-of select="@pdbid"/></xsl:when><xsl:when test="contains(@pdbid,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbid,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbid,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbid_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbid_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_geometry>
      <PDBo:pdbx_dcc_geometry rdf:about="{$base}/pdbx_dcc_geometry/{$pdbid_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_geometry>
      </PDBo:has_pdbx_dcc_geometry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_mapCategory/PDBx:pdbx_dcc_map">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_map>
      <PDBo:pdbx_dcc_map rdf:about="{$base}/pdbx_dcc_map/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_map>
      </PDBo:has_pdbx_dcc_map>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_mapmanCategory/PDBx:pdbx_dcc_mapman">
      <xsl:variable name="pdbid_truncated"><xsl:choose><xsl:when test="string-length(@pdbid)&lt;64"><xsl:value-of select="@pdbid"/></xsl:when><xsl:when test="contains(@pdbid,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbid,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbid,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbid_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbid_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_mapman>
      <PDBo:pdbx_dcc_mapman rdf:about="{$base}/pdbx_dcc_mapman/{$pdbid_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_mapman>
      </PDBo:has_pdbx_dcc_mapman>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_rscc_mapmanCategory/PDBx:pdbx_dcc_rscc_mapman">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_rscc_mapman>
      <PDBo:pdbx_dcc_rscc_mapman rdf:about="{$base}/pdbx_dcc_rscc_mapman/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_rscc_mapman>
      </PDBo:has_pdbx_dcc_rscc_mapman>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_dcc_rscc_mapman_overallCategory/PDBx:pdbx_dcc_rscc_mapman_overall">
      <xsl:variable name="pdbid_truncated"><xsl:choose><xsl:when test="string-length(@pdbid)&lt;64"><xsl:value-of select="@pdbid"/></xsl:when><xsl:when test="contains(@pdbid,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbid,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbid,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbid_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbid_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_dcc_rscc_mapman_overall>
      <PDBo:pdbx_dcc_rscc_mapman_overall rdf:about="{$base}/pdbx_dcc_rscc_mapman_overall/{$pdbid_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_dcc_rscc_mapman_overall>
      </PDBo:has_pdbx_dcc_rscc_mapman_overall>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_deposit_groupCategory/PDBx:pdbx_deposit_group">
      <xsl:variable name="group_id_truncated"><xsl:choose><xsl:when test="string-length(@group_id)&lt;64"><xsl:value-of select="@group_id"/></xsl:when><xsl:when test="contains(@group_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@group_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@group_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="group_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($group_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_deposit_group>
      <PDBo:pdbx_deposit_group rdf:about="{$base}/pdbx_deposit_group/{$group_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_deposit_group>
      </PDBo:has_pdbx_deposit_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_deposit_group_indexCategory/PDBx:pdbx_deposit_group_index">
      <xsl:variable name="group_id_truncated"><xsl:choose><xsl:when test="string-length(@group_id)&lt;64"><xsl:value-of select="@group_id"/></xsl:when><xsl:when test="contains(@group_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@group_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@group_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="group_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($group_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_id_truncated"><xsl:choose><xsl:when test="string-length(@ordinal_id)&lt;64"><xsl:value-of select="@ordinal_id"/></xsl:when><xsl:when test="contains(@ordinal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_deposit_group_index>
      <PDBo:pdbx_deposit_group_index rdf:about="{$base}/pdbx_deposit_group_index/{$group_id_encoded},{$ordinal_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@group_id!=''">
	<PDBo:reference_to_pdbx_deposit_group>
	  <rdf:Description rdf:about="{$base}/pdbx_deposit_group/">
	    <PDBo:referenced_by_pdbx_deposit_group_index rdf:resource="{$base}/pdbx_deposit_group_index/{$group_id_encoded},{$ordinal_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_deposit_group>
	<!-- pdbx_deposit_groupKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_deposit_group_index>
      </PDBo:has_pdbx_deposit_group_index>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_deposition_message_file_referenceCategory/PDBx:pdbx_deposition_message_file_reference">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_deposition_message_file_reference>
      <PDBo:pdbx_deposition_message_file_reference rdf:about="{$base}/pdbx_deposition_message_file_reference/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_deposition_message_file_reference>
      </PDBo:has_pdbx_deposition_message_file_reference>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_deposition_message_infoCategory/PDBx:pdbx_deposition_message_info">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_deposition_message_info>
      <PDBo:pdbx_deposition_message_info rdf:about="{$base}/pdbx_deposition_message_info/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_deposition_message_info>
      </PDBo:has_pdbx_deposition_message_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_entity_featuresCategory/PDBx:pdbx_depui_entity_features">
      <xsl:variable name="dep_dataset_id_truncated"><xsl:choose><xsl:when test="string-length(@dep_dataset_id)&lt;64"><xsl:value-of select="@dep_dataset_id"/></xsl:when><xsl:when test="contains(@dep_dataset_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dep_dataset_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dep_dataset_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dep_dataset_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dep_dataset_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_entity_features>
      <PDBo:pdbx_depui_entity_features rdf:about="{$base}/pdbx_depui_entity_features/{$dep_dataset_id_encoded},{$entity_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_entity_features>
      </PDBo:has_pdbx_depui_entity_features>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_entity_status_flagsCategory/PDBx:pdbx_depui_entity_status_flags">
      <xsl:variable name="dep_dataset_id_truncated"><xsl:choose><xsl:when test="string-length(@dep_dataset_id)&lt;64"><xsl:value-of select="@dep_dataset_id"/></xsl:when><xsl:when test="contains(@dep_dataset_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dep_dataset_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dep_dataset_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dep_dataset_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dep_dataset_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_entity_status_flags>
      <PDBo:pdbx_depui_entity_status_flags rdf:about="{$base}/pdbx_depui_entity_status_flags/{$dep_dataset_id_encoded},{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_entity_status_flags>
      </PDBo:has_pdbx_depui_entity_status_flags>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_entry_detailsCategory/PDBx:pdbx_depui_entry_details">
      <xsl:variable name="dep_dataset_id_truncated"><xsl:choose><xsl:when test="string-length(@dep_dataset_id)&lt;64"><xsl:value-of select="@dep_dataset_id"/></xsl:when><xsl:when test="contains(@dep_dataset_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dep_dataset_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dep_dataset_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dep_dataset_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dep_dataset_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_entry_details>
      <PDBo:pdbx_depui_entry_details rdf:about="{$base}/pdbx_depui_entry_details/{$dep_dataset_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_entry_details>
      </PDBo:has_pdbx_depui_entry_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_status_flagsCategory/PDBx:pdbx_depui_status_flags">
      <xsl:variable name="dep_dataset_id_truncated"><xsl:choose><xsl:when test="string-length(@dep_dataset_id)&lt;64"><xsl:value-of select="@dep_dataset_id"/></xsl:when><xsl:when test="contains(@dep_dataset_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dep_dataset_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dep_dataset_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dep_dataset_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dep_dataset_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_status_flags>
      <PDBo:pdbx_depui_status_flags rdf:about="{$base}/pdbx_depui_status_flags/{$dep_dataset_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_status_flags>
      </PDBo:has_pdbx_depui_status_flags>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_uploadCategory/PDBx:pdbx_depui_upload">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_upload>
      <PDBo:pdbx_depui_upload rdf:about="{$base}/pdbx_depui_upload/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_upload>
      </PDBo:has_pdbx_depui_upload>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_depui_validation_status_flagsCategory/PDBx:pdbx_depui_validation_status_flags">
      <xsl:variable name="dep_dataset_id_truncated"><xsl:choose><xsl:when test="string-length(@dep_dataset_id)&lt;64"><xsl:value-of select="@dep_dataset_id"/></xsl:when><xsl:when test="contains(@dep_dataset_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dep_dataset_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dep_dataset_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dep_dataset_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dep_dataset_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_depui_validation_status_flags>
      <PDBo:pdbx_depui_validation_status_flags rdf:about="{$base}/pdbx_depui_validation_status_flags/{$dep_dataset_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_depui_validation_status_flags>
      </PDBo:has_pdbx_depui_validation_status_flags>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_batchCategory/PDBx:pdbx_diffrn_batch">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_batch>
      <PDBo:pdbx_diffrn_batch rdf:about="{$base}/pdbx_diffrn_batch/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_batch>
      </PDBo:has_pdbx_diffrn_batch>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_batch_scanCategory/PDBx:pdbx_diffrn_batch_scan">
      <xsl:variable name="batch_id_truncated"><xsl:choose><xsl:when test="string-length(@batch_id)&lt;64"><xsl:value-of select="@batch_id"/></xsl:when><xsl:when test="contains(@batch_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@batch_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@batch_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="batch_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($batch_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_batch_scan>
      <PDBo:pdbx_diffrn_batch_scan rdf:about="{$base}/pdbx_diffrn_batch_scan/{$batch_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_batch_scan>
      </PDBo:has_pdbx_diffrn_batch_scan>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_cellCategory/PDBx:pdbx_diffrn_cell">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_cell>
      <PDBo:pdbx_diffrn_cell rdf:about="{$base}/pdbx_diffrn_cell/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_cell>
      </PDBo:has_pdbx_diffrn_cell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_detector_panel_mappingCategory/PDBx:pdbx_diffrn_detector_panel_mapping">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_detector_panel_mapping>
      <PDBo:pdbx_diffrn_detector_panel_mapping rdf:about="{$base}/pdbx_diffrn_detector_panel_mapping/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:array_id!=''">
	<PDBo:reference_to_array_structure>
	  <rdf:Description rdf:about="{$base}/array_structure/{translate(PDBx:array_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_diffrn_detector_panel_mapping rdf:resource="{$base}/pdbx_diffrn_detector_panel_mapping/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_array_structure>
	<!-- array_structureKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_detector_panel_mapping>
      </PDBo:has_pdbx_diffrn_detector_panel_mapping>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_orientationCategory/PDBx:pdbx_diffrn_orientation">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_orientation>
      <PDBo:pdbx_diffrn_orientation rdf:about="{$base}/pdbx_diffrn_orientation/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_orientation>
      </PDBo:has_pdbx_diffrn_orientation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_diffrn_reflns_shellCategory/PDBx:pdbx_diffrn_reflns_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_diffrn_reflns_shell>
      <PDBo:pdbx_diffrn_reflns_shell rdf:about="{$base}/pdbx_diffrn_reflns_shell/{$d_res_high_encoded},{$d_res_low_encoded},{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_diffrn_reflns_shell rdf:resource="{$base}/pdbx_diffrn_reflns_shell/{$d_res_high_encoded},{$d_res_low_encoded},{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_10_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_diffrn_reflns_shell>
      </PDBo:has_pdbx_diffrn_reflns_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_distant_solvent_atomsCategory/PDBx:pdbx_distant_solvent_atoms">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_distant_solvent_atoms>
      <PDBo:pdbx_distant_solvent_atoms rdf:about="{$base}/pdbx_distant_solvent_atoms/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:auth_comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:auth_comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_distant_solvent_atoms rdf:resource="{$base}/pdbx_distant_solvent_atoms/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_19_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_distant_solvent_atoms>
      </PDBo:has_pdbx_distant_solvent_atoms>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_domainCategory/PDBx:pdbx_domain">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_domain>
      <PDBo:pdbx_domain rdf:about="{$base}/pdbx_domain/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_domain>
      </PDBo:has_pdbx_domain>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_domain_rangeCategory/PDBx:pdbx_domain_range">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_domain_range>
      <PDBo:pdbx_domain_range rdf:about="{$base}/pdbx_domain_range/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:domain_id!=''">
	<PDBo:reference_to_pdbx_domain>
	  <rdf:Description rdf:about="{$base}/pdbx_domain/{translate(PDBx:domain_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_domain_range rdf:resource="{$base}/pdbx_domain_range/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_domain>
	<!-- pdbx_domainKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_domain_range>
      </PDBo:has_pdbx_domain_range>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_drug_infoCategory/PDBx:pdbx_drug_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_drug_info>
      <PDBo:pdbx_drug_info rdf:about="{$base}/pdbx_drug_info/{$id_encoded},{$name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_drug_info>
      </PDBo:has_pdbx_drug_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_assemblyCategory/PDBx:pdbx_entity_assembly">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_assembly>
      <PDBo:pdbx_entity_assembly rdf:about="{$base}/pdbx_entity_assembly/{$entity_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_assembly rdf:resource="{$base}/pdbx_entity_assembly/{$entity_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_10_0 -->
      </xsl:if>
      <xsl:if test="PDBx:biol_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/{translate(PDBx:biol_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_assembly rdf:resource="{$base}/pdbx_entity_assembly/{$entity_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_assembly>
      </PDBo:has_pdbx_entity_assembly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_branchCategory/PDBx:pdbx_entity_branch">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_branch>
      <PDBo:pdbx_entity_branch rdf:about="{$base}/pdbx_entity_branch/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_branch rdf:resource="{$base}/pdbx_entity_branch/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_11_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_branch>
      </PDBo:has_pdbx_entity_branch>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_branch_descriptorCategory/PDBx:pdbx_entity_branch_descriptor">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_branch_descriptor>
      <PDBo:pdbx_entity_branch_descriptor rdf:about="{$base}/pdbx_entity_branch_descriptor/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:entity_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_branch_descriptor rdf:resource="{$base}/pdbx_entity_branch_descriptor/{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_12_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_branch_descriptor>
      </PDBo:has_pdbx_entity_branch_descriptor>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_branch_linkCategory/PDBx:pdbx_entity_branch_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_branch_link>
      <PDBo:pdbx_entity_branch_link rdf:about="{$base}/pdbx_entity_branch_link/{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_branch_link>
      </PDBo:has_pdbx_entity_branch_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_branch_listCategory/PDBx:pdbx_entity_branch_list">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="num_truncated"><xsl:choose><xsl:when test="string-length(@num)&lt;64"><xsl:value-of select="@num"/></xsl:when><xsl:when test="contains(@num,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@num,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@num,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="num_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($num_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_branch_list>
      <PDBo:pdbx_entity_branch_list rdf:about="{$base}/pdbx_entity_branch_list/{$comp_id_encoded},{$entity_id_encoded},{$num_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/">
	    <PDBo:referenced_by_pdbx_entity_branch_list rdf:resource="{$base}/pdbx_entity_branch_list/{$comp_id_encoded},{$entity_id_encoded},{$num_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_20_0 -->
      </xsl:if>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_branch_list rdf:resource="{$base}/pdbx_entity_branch_list/{$comp_id_encoded},{$entity_id_encoded},{$num_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_13_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_branch_list>
      </PDBo:has_pdbx_entity_branch_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_func_bind_modeCategory/PDBx:pdbx_entity_func_bind_mode">
      <xsl:variable name="domain_id_truncated"><xsl:choose><xsl:when test="string-length(@domain_id)&lt;64"><xsl:value-of select="@domain_id"/></xsl:when><xsl:when test="contains(@domain_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@domain_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@domain_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="domain_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($domain_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_func_bind_mode>
      <PDBo:pdbx_entity_func_bind_mode rdf:about="{$base}/pdbx_entity_func_bind_mode/{$domain_id_encoded},{$entity_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_func_bind_mode rdf:resource="{$base}/pdbx_entity_func_bind_mode/{$domain_id_encoded},{$entity_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_14_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_func_bind_mode>
      </PDBo:has_pdbx_entity_func_bind_mode>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_func_enzymeCategory/PDBx:pdbx_entity_func_enzyme">
      <xsl:variable name="bind_mode_id_truncated"><xsl:choose><xsl:when test="string-length(@bind_mode_id)&lt;64"><xsl:value-of select="@bind_mode_id"/></xsl:when><xsl:when test="contains(@bind_mode_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@bind_mode_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@bind_mode_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="bind_mode_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($bind_mode_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_func_enzyme>
      <PDBo:pdbx_entity_func_enzyme rdf:about="{$base}/pdbx_entity_func_enzyme/{$bind_mode_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_func_enzyme>
      </PDBo:has_pdbx_entity_func_enzyme>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_func_otherCategory/PDBx:pdbx_entity_func_other">
      <xsl:variable name="bind_mode_id_truncated"><xsl:choose><xsl:when test="string-length(@bind_mode_id)&lt;64"><xsl:value-of select="@bind_mode_id"/></xsl:when><xsl:when test="contains(@bind_mode_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@bind_mode_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@bind_mode_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="bind_mode_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($bind_mode_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_func_other>
      <PDBo:pdbx_entity_func_other rdf:about="{$base}/pdbx_entity_func_other/{$bind_mode_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_func_other>
      </PDBo:has_pdbx_entity_func_other>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_func_regulatoryCategory/PDBx:pdbx_entity_func_regulatory">
      <xsl:variable name="bind_mode_id_truncated"><xsl:choose><xsl:when test="string-length(@bind_mode_id)&lt;64"><xsl:value-of select="@bind_mode_id"/></xsl:when><xsl:when test="contains(@bind_mode_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@bind_mode_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@bind_mode_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="bind_mode_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($bind_mode_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_func_regulatory>
      <PDBo:pdbx_entity_func_regulatory rdf:about="{$base}/pdbx_entity_func_regulatory/{$bind_mode_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_func_regulatory>
      </PDBo:has_pdbx_entity_func_regulatory>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_func_structuralCategory/PDBx:pdbx_entity_func_structural">
      <xsl:variable name="bind_mode_id_truncated"><xsl:choose><xsl:when test="string-length(@bind_mode_id)&lt;64"><xsl:value-of select="@bind_mode_id"/></xsl:when><xsl:when test="contains(@bind_mode_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@bind_mode_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@bind_mode_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="bind_mode_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($bind_mode_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_func_structural>
      <PDBo:pdbx_entity_func_structural rdf:about="{$base}/pdbx_entity_func_structural/{$bind_mode_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_func_structural>
      </PDBo:has_pdbx_entity_func_structural>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_instance_featureCategory/PDBx:pdbx_entity_instance_feature">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_instance_feature>
      <PDBo:pdbx_entity_instance_feature rdf:about="{$base}/pdbx_entity_instance_feature/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_instance_feature>
      </PDBo:has_pdbx_entity_instance_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_nameCategory/PDBx:pdbx_entity_name">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_type_truncated"><xsl:choose><xsl:when test="string-length(@name_type)&lt;64"><xsl:value-of select="@name_type"/></xsl:when><xsl:when test="contains(@name_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_name>
      <PDBo:pdbx_entity_name rdf:about="{$base}/pdbx_entity_name/{$entity_id_encoded},{$name_encoded},{$name_type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_name rdf:resource="{$base}/pdbx_entity_name/{$entity_id_encoded},{$name_encoded},{$name_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_15_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_name>
      </PDBo:has_pdbx_entity_name>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_name_instanceCategory/PDBx:pdbx_entity_name_instance">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdb_id_truncated"><xsl:choose><xsl:when test="string-length(@pdb_id)&lt;64"><xsl:value-of select="@pdb_id"/></xsl:when><xsl:when test="contains(@pdb_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_name_instance>
      <PDBo:pdbx_entity_name_instance rdf:about="{$base}/pdbx_entity_name_instance/{$entity_id_encoded},{$name_encoded},{$pdb_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_name_instance>
      </PDBo:has_pdbx_entity_name_instance>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_name_taxonomyCategory/PDBx:pdbx_entity_name_taxonomy">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_name_taxonomy>
      <PDBo:pdbx_entity_name_taxonomy rdf:about="{$base}/pdbx_entity_name_taxonomy/{$id_encoded},{$name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_name_taxonomy>
      </PDBo:has_pdbx_entity_name_taxonomy>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_name_taxonomy_treeCategory/PDBx:pdbx_entity_name_taxonomy_tree">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="parent_id_truncated"><xsl:choose><xsl:when test="string-length(@parent_id)&lt;64"><xsl:value-of select="@parent_id"/></xsl:when><xsl:when test="contains(@parent_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@parent_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@parent_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="parent_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($parent_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_name_taxonomy_tree>
      <PDBo:pdbx_entity_name_taxonomy_tree rdf:about="{$base}/pdbx_entity_name_taxonomy_tree/{$id_encoded},{$parent_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_name_taxonomy_tree>
      </PDBo:has_pdbx_entity_name_taxonomy_tree>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_nonpolyCategory/PDBx:pdbx_entity_nonpoly">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_nonpoly>
      <PDBo:pdbx_entity_nonpoly rdf:about="{$base}/pdbx_entity_nonpoly/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_nonpoly rdf:resource="{$base}/pdbx_entity_nonpoly/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_16_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_nonpoly>
      </PDBo:has_pdbx_entity_nonpoly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_poly_comp_link_listCategory/PDBx:pdbx_entity_poly_comp_link_list">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_poly_comp_link_list>
      <PDBo:pdbx_entity_poly_comp_link_list rdf:about="{$base}/pdbx_entity_poly_comp_link_list/{$link_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entity_id!='' and PDBx:comp_id_1!='' and PDBx:entity_comp_num_1!=''">
	<PDBo:reference_to_entity_poly_seq>
	  <rdf:Description rdf:about="{$base}/entity_poly_seq/{translate(PDBx:entity_id,' ^','__')},{translate(PDBx:comp_id_1,' ^','__')},{translate(PDBx:entity_comp_num_1,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_poly_comp_link_list rdf:resource="{$base}/pdbx_entity_poly_comp_link_list/{$link_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity_poly_seq>
	<!-- entity_poly_seqKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_poly_comp_link_list>
      </PDBo:has_pdbx_entity_poly_comp_link_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_poly_domainCategory/PDBx:pdbx_entity_poly_domain">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_poly_domain>
      <PDBo:pdbx_entity_poly_domain rdf:about="{$base}/pdbx_entity_poly_domain/{$entity_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_poly_domain rdf:resource="{$base}/pdbx_entity_poly_domain/{$entity_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_17_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_poly_domain>
      </PDBo:has_pdbx_entity_poly_domain>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_poly_na_nonstandardCategory/PDBx:pdbx_entity_poly_na_nonstandard">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="feature_truncated"><xsl:choose><xsl:when test="string-length(@feature)&lt;64"><xsl:value-of select="@feature"/></xsl:when><xsl:when test="contains(@feature,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_poly_na_nonstandard>
      <PDBo:pdbx_entity_poly_na_nonstandard rdf:about="{$base}/pdbx_entity_poly_na_nonstandard/{$entity_id_encoded},{$feature_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_poly_na_nonstandard rdf:resource="{$base}/pdbx_entity_poly_na_nonstandard/{$entity_id_encoded},{$feature_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_18_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_poly_na_nonstandard>
      </PDBo:has_pdbx_entity_poly_na_nonstandard>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_poly_na_typeCategory/PDBx:pdbx_entity_poly_na_type">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_poly_na_type>
      <PDBo:pdbx_entity_poly_na_type rdf:about="{$base}/pdbx_entity_poly_na_type/{$entity_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_poly_na_type rdf:resource="{$base}/pdbx_entity_poly_na_type/{$entity_id_encoded},{$type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_19_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_poly_na_type>
      </PDBo:has_pdbx_entity_poly_na_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_poly_protein_classCategory/PDBx:pdbx_entity_poly_protein_class">
      <xsl:variable name="class_truncated"><xsl:choose><xsl:when test="string-length(@class)&lt;64"><xsl:value-of select="@class"/></xsl:when><xsl:when test="contains(@class,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@class,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@class,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="class_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($class_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_poly_protein_class>
      <PDBo:pdbx_entity_poly_protein_class rdf:about="{$base}/pdbx_entity_poly_protein_class/{$class_encoded},{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_poly_protein_class rdf:resource="{$base}/pdbx_entity_poly_protein_class/{$class_encoded},{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_20_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_poly_protein_class>
      </PDBo:has_pdbx_entity_poly_protein_class>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_prod_protocolCategory/PDBx:pdbx_entity_prod_protocol">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="protocol_type_truncated"><xsl:choose><xsl:when test="string-length(@protocol_type)&lt;64"><xsl:value-of select="@protocol_type"/></xsl:when><xsl:when test="contains(@protocol_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@protocol_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@protocol_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="protocol_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($protocol_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_prod_protocol>
      <PDBo:pdbx_entity_prod_protocol rdf:about="{$base}/pdbx_entity_prod_protocol/{$entity_id_encoded},{$entry_id_encoded},{$protocol_type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_prod_protocol rdf:resource="{$base}/pdbx_entity_prod_protocol/{$entity_id_encoded},{$entry_id_encoded},{$protocol_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_21_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_prod_protocol rdf:resource="{$base}/pdbx_entity_prod_protocol/{$entity_id_encoded},{$entry_id_encoded},{$protocol_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_41_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_prod_protocol>
      </PDBo:has_pdbx_entity_prod_protocol>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_remappingCategory/PDBx:pdbx_entity_remapping">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_remapping>
      <PDBo:pdbx_entity_remapping rdf:about="{$base}/pdbx_entity_remapping/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_remapping rdf:resource="{$base}/pdbx_entity_remapping/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_22_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_remapping>
      </PDBo:has_pdbx_entity_remapping>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_characterCategory/PDBx:pdbx_entity_src_gen_character">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_character>
      <PDBo:pdbx_entity_src_gen_character rdf:about="{$base}/pdbx_entity_src_gen_character/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_character rdf:resource="{$base}/pdbx_entity_src_gen_character/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_23_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_character rdf:resource="{$base}/pdbx_entity_src_gen_character/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_42_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_character>
      </PDBo:has_pdbx_entity_src_gen_character>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_chromCategory/PDBx:pdbx_entity_src_gen_chrom">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_chrom>
      <PDBo:pdbx_entity_src_gen_chrom rdf:about="{$base}/pdbx_entity_src_gen_chrom/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_chrom rdf:resource="{$base}/pdbx_entity_src_gen_chrom/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_24_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_chrom rdf:resource="{$base}/pdbx_entity_src_gen_chrom/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_43_0 -->
      </xsl:if>
      <xsl:if test="PDBx:elution_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:elution_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_chrom rdf:resource="{$base}/pdbx_entity_src_gen_chrom/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:if test="PDBx:equilibration_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:equilibration_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_chrom rdf:resource="{$base}/pdbx_entity_src_gen_chrom/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_1_1 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_chrom>
      </PDBo:has_pdbx_entity_src_gen_chrom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_cloneCategory/PDBx:pdbx_entity_src_gen_clone">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_clone>
      <PDBo:pdbx_entity_src_gen_clone rdf:about="{$base}/pdbx_entity_src_gen_clone/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_clone rdf:resource="{$base}/pdbx_entity_src_gen_clone/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_25_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_clone rdf:resource="{$base}/pdbx_entity_src_gen_clone/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_44_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_clone>
      </PDBo:has_pdbx_entity_src_gen_clone>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_clone_ligationCategory/PDBx:pdbx_entity_src_gen_clone_ligation">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_clone_ligation>
      <PDBo:pdbx_entity_src_gen_clone_ligation rdf:about="{$base}/pdbx_entity_src_gen_clone_ligation/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!='' and @entry_id!='' and @step_id!=''">
	<PDBo:reference_to_pdbx_entity_src_gen_clone>
	  <rdf:Description rdf:about="{$base}/pdbx_entity_src_gen_clone/,,">
	    <PDBo:referenced_by_pdbx_entity_src_gen_clone_ligation rdf:resource="{$base}/pdbx_entity_src_gen_clone_ligation/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_entity_src_gen_clone>
	<!-- pdbx_entity_src_gen_cloneKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_clone_ligation>
      </PDBo:has_pdbx_entity_src_gen_clone_ligation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_clone_recombinationCategory/PDBx:pdbx_entity_src_gen_clone_recombination">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_clone_recombination>
      <PDBo:pdbx_entity_src_gen_clone_recombination rdf:about="{$base}/pdbx_entity_src_gen_clone_recombination/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!='' and @entry_id!='' and @step_id!=''">
	<PDBo:reference_to_pdbx_entity_src_gen_clone>
	  <rdf:Description rdf:about="{$base}/pdbx_entity_src_gen_clone/,,">
	    <PDBo:referenced_by_pdbx_entity_src_gen_clone_recombination rdf:resource="{$base}/pdbx_entity_src_gen_clone_recombination/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_entity_src_gen_clone>
	<!-- pdbx_entity_src_gen_cloneKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_clone_recombination>
      </PDBo:has_pdbx_entity_src_gen_clone_recombination>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_depositor_infoCategory/PDBx:pdbx_entity_src_gen_depositor_info">
      <xsl:variable name="src_id_truncated"><xsl:choose><xsl:when test="string-length(@src_id)&lt;64"><xsl:value-of select="@src_id"/></xsl:when><xsl:when test="contains(@src_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@src_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@src_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="src_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($src_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_depositor_info>
      <PDBo:pdbx_entity_src_gen_depositor_info rdf:about="{$base}/pdbx_entity_src_gen_depositor_info/{$src_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_depositor_info>
      </PDBo:has_pdbx_entity_src_gen_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_expressCategory/PDBx:pdbx_entity_src_gen_express">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_express>
      <PDBo:pdbx_entity_src_gen_express rdf:about="{$base}/pdbx_entity_src_gen_express/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_express rdf:resource="{$base}/pdbx_entity_src_gen_express/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_26_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_express rdf:resource="{$base}/pdbx_entity_src_gen_express/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_45_0 -->
      </xsl:if>
      <xsl:if test="PDBx:plasmid_id!=''">
	<PDBo:reference_to_pdbx_construct>
	  <rdf:Description rdf:about="{$base}/pdbx_construct/{translate(PDBx:plasmid_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_express rdf:resource="{$base}/pdbx_entity_src_gen_express/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_construct>
	<!-- pdbx_constructKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_express>
      </PDBo:has_pdbx_entity_src_gen_express>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_express_timepointCategory/PDBx:pdbx_entity_src_gen_express_timepoint">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="serial_truncated"><xsl:choose><xsl:when test="string-length(@serial)&lt;64"><xsl:value-of select="@serial"/></xsl:when><xsl:when test="contains(@serial,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@serial,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@serial,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="serial_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($serial_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_express_timepoint>
      <PDBo:pdbx_entity_src_gen_express_timepoint rdf:about="{$base}/pdbx_entity_src_gen_express_timepoint/{$entity_id_encoded},{$entry_id_encoded},{$serial_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!='' and @entry_id!='' and @step_id!=''">
	<PDBo:reference_to_pdbx_entity_src_gen_express>
	  <rdf:Description rdf:about="{$base}/pdbx_entity_src_gen_express/,,">
	    <PDBo:referenced_by_pdbx_entity_src_gen_express_timepoint rdf:resource="{$base}/pdbx_entity_src_gen_express_timepoint/{$entity_id_encoded},{$entry_id_encoded},{$serial_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_entity_src_gen_express>
	<!-- pdbx_entity_src_gen_expressKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_express_timepoint>
      </PDBo:has_pdbx_entity_src_gen_express_timepoint>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_fractCategory/PDBx:pdbx_entity_src_gen_fract">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_fract>
      <PDBo:pdbx_entity_src_gen_fract rdf:about="{$base}/pdbx_entity_src_gen_fract/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_fract rdf:resource="{$base}/pdbx_entity_src_gen_fract/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_27_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_fract rdf:resource="{$base}/pdbx_entity_src_gen_fract/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_46_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_fract>
      </PDBo:has_pdbx_entity_src_gen_fract>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_lysisCategory/PDBx:pdbx_entity_src_gen_lysis">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_lysis>
      <PDBo:pdbx_entity_src_gen_lysis rdf:about="{$base}/pdbx_entity_src_gen_lysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_lysis rdf:resource="{$base}/pdbx_entity_src_gen_lysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_28_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_lysis rdf:resource="{$base}/pdbx_entity_src_gen_lysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_47_0 -->
      </xsl:if>
      <xsl:if test="PDBx:buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_lysis rdf:resource="{$base}/pdbx_entity_src_gen_lysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_lysis>
      </PDBo:has_pdbx_entity_src_gen_lysis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_prod_digestCategory/PDBx:pdbx_entity_src_gen_prod_digest">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_prod_digest>
      <PDBo:pdbx_entity_src_gen_prod_digest rdf:about="{$base}/pdbx_entity_src_gen_prod_digest/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_digest rdf:resource="{$base}/pdbx_entity_src_gen_prod_digest/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_29_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_digest rdf:resource="{$base}/pdbx_entity_src_gen_prod_digest/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_48_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_prod_digest>
      </PDBo:has_pdbx_entity_src_gen_prod_digest>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_prod_otherCategory/PDBx:pdbx_entity_src_gen_prod_other">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_prod_other>
      <PDBo:pdbx_entity_src_gen_prod_other rdf:about="{$base}/pdbx_entity_src_gen_prod_other/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_other rdf:resource="{$base}/pdbx_entity_src_gen_prod_other/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_30_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_other rdf:resource="{$base}/pdbx_entity_src_gen_prod_other/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_49_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_prod_other>
      </PDBo:has_pdbx_entity_src_gen_prod_other>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_prod_other_parameterCategory/PDBx:pdbx_entity_src_gen_prod_other_parameter">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="parameter_truncated"><xsl:choose><xsl:when test="string-length(@parameter)&lt;64"><xsl:value-of select="@parameter"/></xsl:when><xsl:when test="contains(@parameter,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@parameter,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@parameter,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="parameter_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($parameter_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_prod_other_parameter>
      <PDBo:pdbx_entity_src_gen_prod_other_parameter rdf:about="{$base}/pdbx_entity_src_gen_prod_other_parameter/{$entity_id_encoded},{$entry_id_encoded},{$parameter_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!='' and @entry_id!='' and @step_id!=''">
	<PDBo:reference_to_pdbx_entity_src_gen_prod_other>
	  <rdf:Description rdf:about="{$base}/pdbx_entity_src_gen_prod_other/,,">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_other_parameter rdf:resource="{$base}/pdbx_entity_src_gen_prod_other_parameter/{$entity_id_encoded},{$entry_id_encoded},{$parameter_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_entity_src_gen_prod_other>
	<!-- pdbx_entity_src_gen_prod_otherKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_prod_other_parameter>
      </PDBo:has_pdbx_entity_src_gen_prod_other_parameter>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_prod_pcrCategory/PDBx:pdbx_entity_src_gen_prod_pcr">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_prod_pcr>
      <PDBo:pdbx_entity_src_gen_prod_pcr rdf:about="{$base}/pdbx_entity_src_gen_prod_pcr/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_pcr rdf:resource="{$base}/pdbx_entity_src_gen_prod_pcr/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_31_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_pcr rdf:resource="{$base}/pdbx_entity_src_gen_prod_pcr/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_50_0 -->
      </xsl:if>
      <xsl:if test="PDBx:forward_primer_id!=''">
	<PDBo:reference_to_pdbx_construct>
	  <rdf:Description rdf:about="{$base}/pdbx_construct/{translate(PDBx:forward_primer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_pcr rdf:resource="{$base}/pdbx_entity_src_gen_prod_pcr/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_construct>
	<!-- pdbx_constructKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:if test="PDBx:reverse_primer_id!=''">
	<PDBo:reference_to_pdbx_construct>
	  <rdf:Description rdf:about="{$base}/pdbx_construct/{translate(PDBx:reverse_primer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_prod_pcr rdf:resource="{$base}/pdbx_entity_src_gen_prod_pcr/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_construct>
	<!-- pdbx_constructKeyref_0_0_2_1 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_prod_pcr>
      </PDBo:has_pdbx_entity_src_gen_prod_pcr>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_proteolysisCategory/PDBx:pdbx_entity_src_gen_proteolysis">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_proteolysis>
      <PDBo:pdbx_entity_src_gen_proteolysis rdf:about="{$base}/pdbx_entity_src_gen_proteolysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_proteolysis rdf:resource="{$base}/pdbx_entity_src_gen_proteolysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_32_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_proteolysis rdf:resource="{$base}/pdbx_entity_src_gen_proteolysis/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_51_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_proteolysis>
      </PDBo:has_pdbx_entity_src_gen_proteolysis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_pureCategory/PDBx:pdbx_entity_src_gen_pure">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_pure>
      <PDBo:pdbx_entity_src_gen_pure rdf:about="{$base}/pdbx_entity_src_gen_pure/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_pure rdf:resource="{$base}/pdbx_entity_src_gen_pure/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_33_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_pure rdf:resource="{$base}/pdbx_entity_src_gen_pure/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_52_0 -->
      </xsl:if>
      <xsl:if test="PDBx:storage_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:storage_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_pure rdf:resource="{$base}/pdbx_entity_src_gen_pure/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_pure>
      </PDBo:has_pdbx_entity_src_gen_pure>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_gen_refoldCategory/PDBx:pdbx_entity_src_gen_refold">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="step_id_truncated"><xsl:choose><xsl:when test="string-length(@step_id)&lt;64"><xsl:value-of select="@step_id"/></xsl:when><xsl:when test="contains(@step_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@step_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@step_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="step_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($step_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_gen_refold>
      <PDBo:pdbx_entity_src_gen_refold rdf:about="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_refold rdf:resource="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_34_0 -->
      </xsl:if>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entity_src_gen_refold rdf:resource="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_53_0 -->
      </xsl:if>
      <xsl:if test="PDBx:denature_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:denature_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_refold rdf:resource="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:if test="PDBx:refold_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:refold_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_refold rdf:resource="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_4_1 -->
      </xsl:if>
      <xsl:if test="PDBx:storage_buffer_id!=''">
	<PDBo:reference_to_pdbx_buffer>
	  <rdf:Description rdf:about="{$base}/pdbx_buffer/{translate(PDBx:storage_buffer_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_entity_src_gen_refold rdf:resource="{$base}/pdbx_entity_src_gen_refold/{$entity_id_encoded},{$entry_id_encoded},{$step_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_buffer>
	<!-- pdbx_bufferKeyref_0_0_4_2 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_gen_refold>
      </PDBo:has_pdbx_entity_src_gen_refold>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entity_src_synCategory/PDBx:pdbx_entity_src_syn">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_src_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_src_id)&lt;64"><xsl:value-of select="@pdbx_src_id"/></xsl:when><xsl:when test="contains(@pdbx_src_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_src_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_src_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_src_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_src_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entity_src_syn>
      <PDBo:pdbx_entity_src_syn rdf:about="{$base}/pdbx_entity_src_syn/{$entity_id_encoded},{$pdbx_src_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_entity_src_syn rdf:resource="{$base}/pdbx_entity_src_syn/{$entity_id_encoded},{$pdbx_src_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_35_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entity_src_syn>
      </PDBo:has_pdbx_entity_src_syn>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_entry_detailsCategory/PDBx:pdbx_entry_details">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_entry_details>
      <PDBo:pdbx_entry_details rdf:about="{$base}/pdbx_entry_details/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_entry_details rdf:resource="{$base}/pdbx_entry_details/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_54_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_entry_details>
      </PDBo:has_pdbx_entry_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_exptl_crystal_cryo_treatmentCategory/PDBx:pdbx_exptl_crystal_cryo_treatment">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_exptl_crystal_cryo_treatment>
      <PDBo:pdbx_exptl_crystal_cryo_treatment rdf:about="{$base}/pdbx_exptl_crystal_cryo_treatment/{$crystal_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_pdbx_exptl_crystal_cryo_treatment rdf:resource="{$base}/pdbx_exptl_crystal_cryo_treatment/{$crystal_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_exptl_crystal_cryo_treatment>
      </PDBo:has_pdbx_exptl_crystal_cryo_treatment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_exptl_crystal_grow_compCategory/PDBx:pdbx_exptl_crystal_grow_comp">
      <xsl:variable name="comp_id_truncated"><xsl:choose><xsl:when test="string-length(@comp_id)&lt;64"><xsl:value-of select="@comp_id"/></xsl:when><xsl:when test="contains(@comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_exptl_crystal_grow_comp>
      <PDBo:pdbx_exptl_crystal_grow_comp rdf:about="{$base}/pdbx_exptl_crystal_grow_comp/{$comp_id_encoded},{$crystal_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_pdbx_exptl_crystal_grow_comp rdf:resource="{$base}/pdbx_exptl_crystal_grow_comp/{$comp_id_encoded},{$crystal_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_exptl_crystal_grow_comp>
      </PDBo:has_pdbx_exptl_crystal_grow_comp>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_exptl_crystal_grow_solCategory/PDBx:pdbx_exptl_crystal_grow_sol">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sol_id_truncated"><xsl:choose><xsl:when test="string-length(@sol_id)&lt;64"><xsl:value-of select="@sol_id"/></xsl:when><xsl:when test="contains(@sol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_exptl_crystal_grow_sol>
      <PDBo:pdbx_exptl_crystal_grow_sol rdf:about="{$base}/pdbx_exptl_crystal_grow_sol/{$crystal_id_encoded},{$sol_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@crystal_id!=''">
	<PDBo:reference_to_exptl_crystal>
	  <rdf:Description rdf:about="{$base}/exptl_crystal/">
	    <PDBo:referenced_by_pdbx_exptl_crystal_grow_sol rdf:resource="{$base}/pdbx_exptl_crystal_grow_sol/{$crystal_id_encoded},{$sol_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_exptl_crystal>
	<!-- exptl_crystalKeyref_0_0_6_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_exptl_crystal_grow_sol>
      </PDBo:has_pdbx_exptl_crystal_grow_sol>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_exptl_pdCategory/PDBx:pdbx_exptl_pd">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_exptl_pd>
      <PDBo:pdbx_exptl_pd rdf:about="{$base}/pdbx_exptl_pd/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_exptl_pd rdf:resource="{$base}/pdbx_exptl_pd/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_55_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_exptl_pd>
      </PDBo:has_pdbx_exptl_pd>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_family_group_indexCategory/PDBx:pdbx_family_group_index">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_family_group_index>
      <PDBo:pdbx_family_group_index rdf:about="{$base}/pdbx_family_group_index/{$family_prd_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_family_group_index>
      </PDBo:has_pdbx_family_group_index>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_family_prd_auditCategory/PDBx:pdbx_family_prd_audit">
      <xsl:variable name="action_type_truncated"><xsl:choose><xsl:when test="string-length(@action_type)&lt;64"><xsl:value-of select="@action_type"/></xsl:when><xsl:when test="contains(@action_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@action_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@action_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="action_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($action_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="date_truncated"><xsl:choose><xsl:when test="string-length(@date)&lt;64"><xsl:value-of select="@date"/></xsl:when><xsl:when test="contains(@date,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@date,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@date,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="date_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($date_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_family_prd_audit>
      <PDBo:pdbx_family_prd_audit rdf:about="{$base}/pdbx_family_prd_audit/{$action_type_encoded},{$date_encoded},{$family_prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@family_prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule_family>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule_family/">
	    <PDBo:referenced_by_pdbx_family_prd_audit rdf:resource="{$base}/pdbx_family_prd_audit/{$action_type_encoded},{$date_encoded},{$family_prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule_family>
	<!-- pdbx_reference_molecule_familyKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_family_prd_audit>
      </PDBo:has_pdbx_family_prd_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_feature_assemblyCategory/PDBx:pdbx_feature_assembly">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_feature_assembly>
      <PDBo:pdbx_feature_assembly rdf:about="{$base}/pdbx_feature_assembly/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:assembly_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/{translate(PDBx:assembly_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_feature_assembly rdf:resource="{$base}/pdbx_feature_assembly/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_feature_assembly>
      </PDBo:has_pdbx_feature_assembly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_feature_domainCategory/PDBx:pdbx_feature_domain">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_feature_domain>
      <PDBo:pdbx_feature_domain rdf:about="{$base}/pdbx_feature_domain/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:domain_id!=''">
	<PDBo:reference_to_pdbx_domain>
	  <rdf:Description rdf:about="{$base}/pdbx_domain/{translate(PDBx:domain_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_feature_domain rdf:resource="{$base}/pdbx_feature_domain/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_domain>
	<!-- pdbx_domainKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_feature_domain>
      </PDBo:has_pdbx_feature_domain>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_feature_entryCategory/PDBx:pdbx_feature_entry">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_feature_entry>
      <PDBo:pdbx_feature_entry rdf:about="{$base}/pdbx_feature_entry/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_feature_entry>
      </PDBo:has_pdbx_feature_entry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_feature_monomerCategory/PDBx:pdbx_feature_monomer">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_feature_monomer>
      <PDBo:pdbx_feature_monomer rdf:about="{$base}/pdbx_feature_monomer/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_feature_monomer>
      </PDBo:has_pdbx_feature_monomer>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_feature_sequence_rangeCategory/PDBx:pdbx_feature_sequence_range">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_feature_sequence_range>
      <PDBo:pdbx_feature_sequence_range rdf:about="{$base}/pdbx_feature_sequence_range/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_feature_sequence_range>
      </PDBo:has_pdbx_feature_sequence_range>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_helical_symmetryCategory/PDBx:pdbx_helical_symmetry">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_helical_symmetry>
      <PDBo:pdbx_helical_symmetry rdf:about="{$base}/pdbx_helical_symmetry/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_helical_symmetry rdf:resource="{$base}/pdbx_helical_symmetry/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_56_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_helical_symmetry>
      </PDBo:has_pdbx_helical_symmetry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_helical_symmetry_depositor_infoCategory/PDBx:pdbx_helical_symmetry_depositor_info">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_helical_symmetry_depositor_info>
      <PDBo:pdbx_helical_symmetry_depositor_info rdf:about="{$base}/pdbx_helical_symmetry_depositor_info/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_helical_symmetry_depositor_info rdf:resource="{$base}/pdbx_helical_symmetry_depositor_info/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_57_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_helical_symmetry_depositor_info>
      </PDBo:has_pdbx_helical_symmetry_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_hybridCategory/PDBx:pdbx_hybrid">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_hybrid>
      <PDBo:pdbx_hybrid rdf:about="{$base}/pdbx_hybrid/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_hybrid>
      </PDBo:has_pdbx_hybrid>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_inhibitor_infoCategory/PDBx:pdbx_inhibitor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_inhibitor_info>
      <PDBo:pdbx_inhibitor_info rdf:about="{$base}/pdbx_inhibitor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_inhibitor_info>
      </PDBo:has_pdbx_inhibitor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_initial_refinement_modelCategory/PDBx:pdbx_initial_refinement_model">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_initial_refinement_model>
      <PDBo:pdbx_initial_refinement_model rdf:about="{$base}/pdbx_initial_refinement_model/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_initial_refinement_model>
      </PDBo:has_pdbx_initial_refinement_model>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_investigationCategory/PDBx:pdbx_investigation">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_investigation>
      <PDBo:pdbx_investigation rdf:about="{$base}/pdbx_investigation/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_investigation>
      </PDBo:has_pdbx_investigation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_ion_infoCategory/PDBx:pdbx_ion_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_ion_info>
      <PDBo:pdbx_ion_info rdf:about="{$base}/pdbx_ion_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_ion_info>
      </PDBo:has_pdbx_ion_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_linked_entityCategory/PDBx:pdbx_linked_entity">
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_linked_entity>
      <PDBo:pdbx_linked_entity rdf:about="{$base}/pdbx_linked_entity/{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_linked_entity>
      </PDBo:has_pdbx_linked_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_linked_entity_instance_listCategory/PDBx:pdbx_linked_entity_instance_list">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="instance_id_truncated"><xsl:choose><xsl:when test="string-length(@instance_id)&lt;64"><xsl:value-of select="@instance_id"/></xsl:when><xsl:when test="contains(@instance_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@instance_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@instance_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="instance_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($instance_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_linked_entity_instance_list>
      <PDBo:pdbx_linked_entity_instance_list rdf:about="{$base}/pdbx_linked_entity_instance_list/{$asym_id_encoded},{$instance_id_encoded},{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@linked_entity_id!=''">
	<PDBo:reference_to_pdbx_linked_entity>
	  <rdf:Description rdf:about="{$base}/pdbx_linked_entity/">
	    <PDBo:referenced_by_pdbx_linked_entity_instance_list rdf:resource="{$base}/pdbx_linked_entity_instance_list/{$asym_id_encoded},{$instance_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_linked_entity>
	<!-- pdbx_linked_entityKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_linked_entity_instance_list rdf:resource="{$base}/pdbx_linked_entity_instance_list/{$asym_id_encoded},{$instance_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_linked_entity_instance_list>
      </PDBo:has_pdbx_linked_entity_instance_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_linked_entity_link_listCategory/PDBx:pdbx_linked_entity_link_list">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_linked_entity_link_list>
      <PDBo:pdbx_linked_entity_link_list rdf:about="{$base}/pdbx_linked_entity_link_list/{$link_id_encoded},{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:component_1!='' and PDBx:entity_id_1!='' and @linked_entity_id!=''">
	<PDBo:reference_to_pdbx_linked_entity_list>
	  <rdf:Description rdf:about="{$base}/pdbx_linked_entity_list/{translate(PDBx:component_1,' ^','__')},{translate(PDBx:entity_id_1,' ^','__')},">
	    <PDBo:referenced_by_pdbx_linked_entity_link_list rdf:resource="{$base}/pdbx_linked_entity_link_list/{$link_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_linked_entity_list>
	<!-- pdbx_linked_entity_listKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_linked_entity_link_list>
      </PDBo:has_pdbx_linked_entity_link_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_linked_entity_listCategory/PDBx:pdbx_linked_entity_list">
      <xsl:variable name="component_id_truncated"><xsl:choose><xsl:when test="string-length(@component_id)&lt;64"><xsl:value-of select="@component_id"/></xsl:when><xsl:when test="contains(@component_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@component_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@component_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="component_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($component_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_linked_entity_list>
      <PDBo:pdbx_linked_entity_list rdf:about="{$base}/pdbx_linked_entity_list/{$component_id_encoded},{$entity_id_encoded},{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_linked_entity_list rdf:resource="{$base}/pdbx_linked_entity_list/{$component_id_encoded},{$entity_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_36_0 -->
      </xsl:if>
      <xsl:if test="@linked_entity_id!=''">
	<PDBo:reference_to_pdbx_linked_entity>
	  <rdf:Description rdf:about="{$base}/pdbx_linked_entity/">
	    <PDBo:referenced_by_pdbx_linked_entity_list rdf:resource="{$base}/pdbx_linked_entity_list/{$component_id_encoded},{$entity_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_linked_entity>
	<!-- pdbx_linked_entityKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_linked_entity_list>
      </PDBo:has_pdbx_linked_entity_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_missing_atom_nonpolyCategory/PDBx:pdbx_missing_atom_nonpoly">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_missing_atom_nonpoly>
      <PDBo:pdbx_missing_atom_nonpoly rdf:about="{$base}/pdbx_missing_atom_nonpoly/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_missing_atom_nonpoly>
      </PDBo:has_pdbx_missing_atom_nonpoly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_missing_atom_polyCategory/PDBx:pdbx_missing_atom_poly">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_missing_atom_poly>
      <PDBo:pdbx_missing_atom_poly rdf:about="{$base}/pdbx_missing_atom_poly/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_missing_atom_poly>
      </PDBo:has_pdbx_missing_atom_poly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_missing_residue_listCategory/PDBx:pdbx_missing_residue_list">
      <xsl:variable name="pdb_chain_id_truncated"><xsl:choose><xsl:when test="string-length(@pdb_chain_id)&lt;64"><xsl:value-of select="@pdb_chain_id"/></xsl:when><xsl:when test="contains(@pdb_chain_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_chain_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_chain_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_chain_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_chain_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdb_residue_name_truncated"><xsl:choose><xsl:when test="string-length(@pdb_residue_name)&lt;64"><xsl:value-of select="@pdb_residue_name"/></xsl:when><xsl:when test="contains(@pdb_residue_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_residue_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_residue_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_residue_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_residue_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdb_residue_number_truncated"><xsl:choose><xsl:when test="string-length(@pdb_residue_number)&lt;64"><xsl:value-of select="@pdb_residue_number"/></xsl:when><xsl:when test="contains(@pdb_residue_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_residue_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_residue_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_residue_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_residue_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_missing_residue_list>
      <PDBo:pdbx_missing_residue_list rdf:about="{$base}/pdbx_missing_residue_list/{$pdb_chain_id_encoded},{$pdb_residue_name_encoded},{$pdb_residue_number_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_missing_residue_list>
      </PDBo:has_pdbx_missing_residue_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_modification_featureCategory/PDBx:pdbx_modification_feature">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_modification_feature>
      <PDBo:pdbx_modification_feature rdf:about="{$base}/pdbx_modification_feature/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_modification_feature>
      </PDBo:has_pdbx_modification_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_moleculeCategory/PDBx:pdbx_molecule">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="instance_id_truncated"><xsl:choose><xsl:when test="string-length(@instance_id)&lt;64"><xsl:value-of select="@instance_id"/></xsl:when><xsl:when test="contains(@instance_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@instance_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@instance_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="instance_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($instance_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_molecule>
      <PDBo:pdbx_molecule rdf:about="{$base}/pdbx_molecule/{$asym_id_encoded},{$instance_id_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_molecule rdf:resource="{$base}/pdbx_molecule/{$asym_id_encoded},{$instance_id_encoded},{$prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_molecule>
      </PDBo:has_pdbx_molecule>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_molecule_featuresCategory/PDBx:pdbx_molecule_features">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_molecule_features>
      <PDBo:pdbx_molecule_features rdf:about="{$base}/pdbx_molecule_features/{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_molecule_features>
      </PDBo:has_pdbx_molecule_features>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_molecule_features_depositor_infoCategory/PDBx:pdbx_molecule_features_depositor_info">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_molecule_features_depositor_info>
      <PDBo:pdbx_molecule_features_depositor_info rdf:about="{$base}/pdbx_molecule_features_depositor_info/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_molecule_features_depositor_info>
      </PDBo:has_pdbx_molecule_features_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_na_strand_infoCategory/PDBx:pdbx_na_strand_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_na_strand_info>
      <PDBo:pdbx_na_strand_info rdf:about="{$base}/pdbx_na_strand_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_na_strand_info>
      </PDBo:has_pdbx_na_strand_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_na_struct_keywdsCategory/PDBx:pdbx_na_struct_keywds">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_na_struct_keywds>
      <PDBo:pdbx_na_struct_keywds rdf:about="{$base}/pdbx_na_struct_keywds/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_na_struct_keywds rdf:resource="{$base}/pdbx_na_struct_keywds/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_58_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_na_struct_keywds>
      </PDBo:has_pdbx_na_struct_keywds>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_assigned_chem_shift_listCategory/PDBx:pdbx_nmr_assigned_chem_shift_list">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_assigned_chem_shift_list>
      <PDBo:pdbx_nmr_assigned_chem_shift_list rdf:about="{$base}/pdbx_nmr_assigned_chem_shift_list/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_assigned_chem_shift_list>
      </PDBo:has_pdbx_nmr_assigned_chem_shift_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_chem_shift_experimentCategory/PDBx:pdbx_nmr_chem_shift_experiment">
      <xsl:variable name="assigned_chem_shift_list_id_truncated"><xsl:choose><xsl:when test="string-length(@assigned_chem_shift_list_id)&lt;64"><xsl:value-of select="@assigned_chem_shift_list_id"/></xsl:when><xsl:when test="contains(@assigned_chem_shift_list_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assigned_chem_shift_list_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assigned_chem_shift_list_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assigned_chem_shift_list_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assigned_chem_shift_list_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="experiment_id_truncated"><xsl:choose><xsl:when test="string-length(@experiment_id)&lt;64"><xsl:value-of select="@experiment_id"/></xsl:when><xsl:when test="contains(@experiment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@experiment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@experiment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="experiment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($experiment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_chem_shift_experiment>
      <PDBo:pdbx_nmr_chem_shift_experiment rdf:about="{$base}/pdbx_nmr_chem_shift_experiment/{$assigned_chem_shift_list_id_encoded},{$entry_id_encoded},{$experiment_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_chem_shift_experiment>
      </PDBo:has_pdbx_nmr_chem_shift_experiment>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_chem_shift_refCategory/PDBx:pdbx_nmr_chem_shift_ref">
      <xsl:variable name="atom_isotope_number_truncated"><xsl:choose><xsl:when test="string-length(@atom_isotope_number)&lt;64"><xsl:value-of select="@atom_isotope_number"/></xsl:when><xsl:when test="contains(@atom_isotope_number,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_isotope_number,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_isotope_number,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_isotope_number_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_isotope_number_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_type_truncated"><xsl:choose><xsl:when test="string-length(@atom_type)&lt;64"><xsl:value-of select="@atom_type"/></xsl:when><xsl:when test="contains(@atom_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="chem_shift_reference_id_truncated"><xsl:choose><xsl:when test="string-length(@chem_shift_reference_id)&lt;64"><xsl:value-of select="@chem_shift_reference_id"/></xsl:when><xsl:when test="contains(@chem_shift_reference_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@chem_shift_reference_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@chem_shift_reference_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="chem_shift_reference_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($chem_shift_reference_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="mol_common_name_truncated"><xsl:choose><xsl:when test="string-length(@mol_common_name)&lt;64"><xsl:value-of select="@mol_common_name"/></xsl:when><xsl:when test="contains(@mol_common_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@mol_common_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@mol_common_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="mol_common_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($mol_common_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_chem_shift_ref>
      <PDBo:pdbx_nmr_chem_shift_ref rdf:about="{$base}/pdbx_nmr_chem_shift_ref/{$atom_isotope_number_encoded},{$atom_type_encoded},{$chem_shift_reference_id_encoded},{$entry_id_encoded},{$mol_common_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_chem_shift_ref>
      </PDBo:has_pdbx_nmr_chem_shift_ref>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_chem_shift_referenceCategory/PDBx:pdbx_nmr_chem_shift_reference">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_chem_shift_reference>
      <PDBo:pdbx_nmr_chem_shift_reference rdf:about="{$base}/pdbx_nmr_chem_shift_reference/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_chem_shift_reference>
      </PDBo:has_pdbx_nmr_chem_shift_reference>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_chem_shift_softwareCategory/PDBx:pdbx_nmr_chem_shift_software">
      <xsl:variable name="assigned_chem_shift_list_id_truncated"><xsl:choose><xsl:when test="string-length(@assigned_chem_shift_list_id)&lt;64"><xsl:value-of select="@assigned_chem_shift_list_id"/></xsl:when><xsl:when test="contains(@assigned_chem_shift_list_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assigned_chem_shift_list_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assigned_chem_shift_list_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assigned_chem_shift_list_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assigned_chem_shift_list_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="software_id_truncated"><xsl:choose><xsl:when test="string-length(@software_id)&lt;64"><xsl:value-of select="@software_id"/></xsl:when><xsl:when test="contains(@software_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@software_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@software_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="software_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($software_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_chem_shift_software>
      <PDBo:pdbx_nmr_chem_shift_software rdf:about="{$base}/pdbx_nmr_chem_shift_software/{$assigned_chem_shift_list_id_encoded},{$entry_id_encoded},{$software_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@software_id!=''">
	<PDBo:reference_to_pdbx_nmr_software>
	  <rdf:Description rdf:about="{$base}/pdbx_nmr_software/">
	    <PDBo:referenced_by_pdbx_nmr_chem_shift_software rdf:resource="{$base}/pdbx_nmr_chem_shift_software/{$assigned_chem_shift_list_id_encoded},{$entry_id_encoded},{$software_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_nmr_software>
	<!-- pdbx_nmr_softwareKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_chem_shift_software>
      </PDBo:has_pdbx_nmr_chem_shift_software>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_computingCategory/PDBx:pdbx_nmr_computing">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_computing>
      <PDBo:pdbx_nmr_computing rdf:about="{$base}/pdbx_nmr_computing/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_computing rdf:resource="{$base}/pdbx_nmr_computing/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_59_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_computing>
      </PDBo:has_pdbx_nmr_computing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_constraint_fileCategory/PDBx:pdbx_nmr_constraint_file">
      <xsl:variable name="constraint_filename_truncated"><xsl:choose><xsl:when test="string-length(@constraint_filename)&lt;64"><xsl:value-of select="@constraint_filename"/></xsl:when><xsl:when test="contains(@constraint_filename,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@constraint_filename,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@constraint_filename,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="constraint_filename_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($constraint_filename_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="constraint_subtype_truncated"><xsl:choose><xsl:when test="string-length(@constraint_subtype)&lt;64"><xsl:value-of select="@constraint_subtype"/></xsl:when><xsl:when test="contains(@constraint_subtype,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@constraint_subtype,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@constraint_subtype,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="constraint_subtype_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($constraint_subtype_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="constraint_type_truncated"><xsl:choose><xsl:when test="string-length(@constraint_type)&lt;64"><xsl:value-of select="@constraint_type"/></xsl:when><xsl:when test="contains(@constraint_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@constraint_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@constraint_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="constraint_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($constraint_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_constraint_file>
      <PDBo:pdbx_nmr_constraint_file rdf:about="{$base}/pdbx_nmr_constraint_file/{$constraint_filename_encoded},{$constraint_subtype_encoded},{$constraint_type_encoded},{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_constraint_file>
      </PDBo:has_pdbx_nmr_constraint_file>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_constraintsCategory/PDBx:pdbx_nmr_constraints">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_constraints>
      <PDBo:pdbx_nmr_constraints rdf:about="{$base}/pdbx_nmr_constraints/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_constraints rdf:resource="{$base}/pdbx_nmr_constraints/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_60_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_constraints>
      </PDBo:has_pdbx_nmr_constraints>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_detailsCategory/PDBx:pdbx_nmr_details">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_details>
      <PDBo:pdbx_nmr_details rdf:about="{$base}/pdbx_nmr_details/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_details rdf:resource="{$base}/pdbx_nmr_details/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_61_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_details>
      </PDBo:has_pdbx_nmr_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_ensembleCategory/PDBx:pdbx_nmr_ensemble">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_ensemble>
      <PDBo:pdbx_nmr_ensemble rdf:about="{$base}/pdbx_nmr_ensemble/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_ensemble rdf:resource="{$base}/pdbx_nmr_ensemble/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_62_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_ensemble>
      </PDBo:has_pdbx_nmr_ensemble>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_ensemble_rmsCategory/PDBx:pdbx_nmr_ensemble_rms">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_ensemble_rms>
      <PDBo:pdbx_nmr_ensemble_rms rdf:about="{$base}/pdbx_nmr_ensemble_rms/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_ensemble_rms rdf:resource="{$base}/pdbx_nmr_ensemble_rms/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_63_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_ensemble_rms>
      </PDBo:has_pdbx_nmr_ensemble_rms>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_exptlCategory/PDBx:pdbx_nmr_exptl">
      <xsl:variable name="conditions_id_truncated"><xsl:choose><xsl:when test="string-length(@conditions_id)&lt;64"><xsl:value-of select="@conditions_id"/></xsl:when><xsl:when test="contains(@conditions_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@conditions_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@conditions_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="conditions_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($conditions_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="experiment_id_truncated"><xsl:choose><xsl:when test="string-length(@experiment_id)&lt;64"><xsl:value-of select="@experiment_id"/></xsl:when><xsl:when test="contains(@experiment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@experiment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@experiment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="experiment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($experiment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="solution_id_truncated"><xsl:choose><xsl:when test="string-length(@solution_id)&lt;64"><xsl:value-of select="@solution_id"/></xsl:when><xsl:when test="contains(@solution_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@solution_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@solution_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="solution_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($solution_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_exptl>
      <PDBo:pdbx_nmr_exptl rdf:about="{$base}/pdbx_nmr_exptl/{$conditions_id_encoded},{$experiment_id_encoded},{$solution_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_exptl>
      </PDBo:has_pdbx_nmr_exptl>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_exptl_sampleCategory/PDBx:pdbx_nmr_exptl_sample">
      <xsl:variable name="component_truncated"><xsl:choose><xsl:when test="string-length(@component)&lt;64"><xsl:value-of select="@component"/></xsl:when><xsl:when test="contains(@component,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@component,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@component,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="component_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($component_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="solution_id_truncated"><xsl:choose><xsl:when test="string-length(@solution_id)&lt;64"><xsl:value-of select="@solution_id"/></xsl:when><xsl:when test="contains(@solution_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@solution_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@solution_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="solution_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($solution_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_exptl_sample>
      <PDBo:pdbx_nmr_exptl_sample rdf:about="{$base}/pdbx_nmr_exptl_sample/{$component_encoded},{$solution_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_exptl_sample>
      </PDBo:has_pdbx_nmr_exptl_sample>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_exptl_sample_conditionsCategory/PDBx:pdbx_nmr_exptl_sample_conditions">
      <xsl:variable name="conditions_id_truncated"><xsl:choose><xsl:when test="string-length(@conditions_id)&lt;64"><xsl:value-of select="@conditions_id"/></xsl:when><xsl:when test="contains(@conditions_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@conditions_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@conditions_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="conditions_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($conditions_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_exptl_sample_conditions>
      <PDBo:pdbx_nmr_exptl_sample_conditions rdf:about="{$base}/pdbx_nmr_exptl_sample_conditions/{$conditions_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_exptl_sample_conditions>
      </PDBo:has_pdbx_nmr_exptl_sample_conditions>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_force_constantsCategory/PDBx:pdbx_nmr_force_constants">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_force_constants>
      <PDBo:pdbx_nmr_force_constants rdf:about="{$base}/pdbx_nmr_force_constants/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_force_constants rdf:resource="{$base}/pdbx_nmr_force_constants/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_64_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_force_constants>
      </PDBo:has_pdbx_nmr_force_constants>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_refineCategory/PDBx:pdbx_nmr_refine">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="software_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@software_ordinal)&lt;64"><xsl:value-of select="@software_ordinal"/></xsl:when><xsl:when test="contains(@software_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@software_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@software_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="software_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($software_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_refine>
      <PDBo:pdbx_nmr_refine rdf:about="{$base}/pdbx_nmr_refine/{$entry_id_encoded},{$software_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_refine rdf:resource="{$base}/pdbx_nmr_refine/{$entry_id_encoded},{$software_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_65_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_refine>
      </PDBo:has_pdbx_nmr_refine>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_representativeCategory/PDBx:pdbx_nmr_representative">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_representative>
      <PDBo:pdbx_nmr_representative rdf:about="{$base}/pdbx_nmr_representative/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_nmr_representative rdf:resource="{$base}/pdbx_nmr_representative/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_66_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_representative>
      </PDBo:has_pdbx_nmr_representative>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_sample_detailsCategory/PDBx:pdbx_nmr_sample_details">
      <xsl:variable name="solution_id_truncated"><xsl:choose><xsl:when test="string-length(@solution_id)&lt;64"><xsl:value-of select="@solution_id"/></xsl:when><xsl:when test="contains(@solution_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@solution_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@solution_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="solution_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($solution_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_sample_details>
      <PDBo:pdbx_nmr_sample_details rdf:about="{$base}/pdbx_nmr_sample_details/{$solution_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_sample_details>
      </PDBo:has_pdbx_nmr_sample_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_softwareCategory/PDBx:pdbx_nmr_software">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_software>
      <PDBo:pdbx_nmr_software rdf:about="{$base}/pdbx_nmr_software/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_software>
      </PDBo:has_pdbx_nmr_software>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_software_taskCategory/PDBx:pdbx_nmr_software_task">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="software_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@software_ordinal)&lt;64"><xsl:value-of select="@software_ordinal"/></xsl:when><xsl:when test="contains(@software_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@software_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@software_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="software_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($software_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="task_truncated"><xsl:choose><xsl:when test="string-length(@task)&lt;64"><xsl:value-of select="@task"/></xsl:when><xsl:when test="contains(@task,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@task,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@task,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="task_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($task_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_software_task>
      <PDBo:pdbx_nmr_software_task rdf:about="{$base}/pdbx_nmr_software_task/{$entry_id_encoded},{$software_ordinal_encoded},{$task_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_software_task>
      </PDBo:has_pdbx_nmr_software_task>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_spectral_dimCategory/PDBx:pdbx_nmr_spectral_dim">
      <xsl:variable name="atom_type_truncated"><xsl:choose><xsl:when test="string-length(@atom_type)&lt;64"><xsl:value-of select="@atom_type"/></xsl:when><xsl:when test="contains(@atom_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="spectral_peak_list_id_truncated"><xsl:choose><xsl:when test="string-length(@spectral_peak_list_id)&lt;64"><xsl:value-of select="@spectral_peak_list_id"/></xsl:when><xsl:when test="contains(@spectral_peak_list_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@spectral_peak_list_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@spectral_peak_list_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="spectral_peak_list_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($spectral_peak_list_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="spectral_region_truncated"><xsl:choose><xsl:when test="string-length(@spectral_region)&lt;64"><xsl:value-of select="@spectral_region"/></xsl:when><xsl:when test="contains(@spectral_region,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@spectral_region,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@spectral_region,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="spectral_region_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($spectral_region_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_spectral_dim>
      <PDBo:pdbx_nmr_spectral_dim rdf:about="{$base}/pdbx_nmr_spectral_dim/{$atom_type_encoded},{$entry_id_encoded},{$id_encoded},{$spectral_peak_list_id_encoded},{$spectral_region_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_spectral_dim>
      </PDBo:has_pdbx_nmr_spectral_dim>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_spectral_peak_listCategory/PDBx:pdbx_nmr_spectral_peak_list">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_spectral_peak_list>
      <PDBo:pdbx_nmr_spectral_peak_list rdf:about="{$base}/pdbx_nmr_spectral_peak_list/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_spectral_peak_list>
      </PDBo:has_pdbx_nmr_spectral_peak_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_spectral_peak_softwareCategory/PDBx:pdbx_nmr_spectral_peak_software">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="software_id_truncated"><xsl:choose><xsl:when test="string-length(@software_id)&lt;64"><xsl:value-of select="@software_id"/></xsl:when><xsl:when test="contains(@software_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@software_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@software_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="software_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($software_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="spectral_peak_list_id_truncated"><xsl:choose><xsl:when test="string-length(@spectral_peak_list_id)&lt;64"><xsl:value-of select="@spectral_peak_list_id"/></xsl:when><xsl:when test="contains(@spectral_peak_list_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@spectral_peak_list_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@spectral_peak_list_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="spectral_peak_list_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($spectral_peak_list_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_spectral_peak_software>
      <PDBo:pdbx_nmr_spectral_peak_software rdf:about="{$base}/pdbx_nmr_spectral_peak_software/{$entry_id_encoded},{$software_id_encoded},{$spectral_peak_list_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@software_id!=''">
	<PDBo:reference_to_pdbx_nmr_software>
	  <rdf:Description rdf:about="{$base}/pdbx_nmr_software/">
	    <PDBo:referenced_by_pdbx_nmr_spectral_peak_software rdf:resource="{$base}/pdbx_nmr_spectral_peak_software/{$entry_id_encoded},{$software_id_encoded},{$spectral_peak_list_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_nmr_software>
	<!-- pdbx_nmr_softwareKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_spectral_peak_software>
      </PDBo:has_pdbx_nmr_spectral_peak_software>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_spectrometerCategory/PDBx:pdbx_nmr_spectrometer">
      <xsl:variable name="spectrometer_id_truncated"><xsl:choose><xsl:when test="string-length(@spectrometer_id)&lt;64"><xsl:value-of select="@spectrometer_id"/></xsl:when><xsl:when test="contains(@spectrometer_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@spectrometer_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@spectrometer_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="spectrometer_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($spectrometer_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_spectrometer>
      <PDBo:pdbx_nmr_spectrometer rdf:about="{$base}/pdbx_nmr_spectrometer/{$spectrometer_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_spectrometer>
      </PDBo:has_pdbx_nmr_spectrometer>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_systematic_chem_shift_offsetCategory/PDBx:pdbx_nmr_systematic_chem_shift_offset">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_systematic_chem_shift_offset>
      <PDBo:pdbx_nmr_systematic_chem_shift_offset rdf:about="{$base}/pdbx_nmr_systematic_chem_shift_offset/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_systematic_chem_shift_offset>
      </PDBo:has_pdbx_nmr_systematic_chem_shift_offset>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nmr_uploadCategory/PDBx:pdbx_nmr_upload">
      <xsl:variable name="data_file_id_truncated"><xsl:choose><xsl:when test="string-length(@data_file_id)&lt;64"><xsl:value-of select="@data_file_id"/></xsl:when><xsl:when test="contains(@data_file_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@data_file_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@data_file_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="data_file_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($data_file_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nmr_upload>
      <PDBo:pdbx_nmr_upload rdf:about="{$base}/pdbx_nmr_upload/{$data_file_id_encoded},{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nmr_upload>
      </PDBo:has_pdbx_nmr_upload>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_nonstandard_listCategory/PDBx:pdbx_nonstandard_list">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@label_seq_id)&lt;64"><xsl:value-of select="@label_seq_id"/></xsl:when><xsl:when test="contains(@label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_nonstandard_list>
      <PDBo:pdbx_nonstandard_list rdf:about="{$base}/pdbx_nonstandard_list/{$id_encoded},{$label_asym_id_encoded},{$label_seq_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_nonstandard_list>
      </PDBo:has_pdbx_nonstandard_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_pdb_compndCategory/PDBx:pdbx_pdb_compnd">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_pdb_compnd>
      <PDBo:pdbx_pdb_compnd rdf:about="{$base}/pdbx_pdb_compnd/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_pdb_compnd>
      </PDBo:has_pdbx_pdb_compnd>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_pdb_sourceCategory/PDBx:pdbx_pdb_source">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_pdb_source>
      <PDBo:pdbx_pdb_source rdf:about="{$base}/pdbx_pdb_source/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_pdb_source>
      </PDBo:has_pdbx_pdb_source>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_MAD_setCategory/PDBx:pdbx_phasing_MAD_set">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_MAD_set>
      <PDBo:pdbx_phasing_MAD_set rdf:about="{$base}/pdbx_phasing_MAD_set/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_MAD_set>
      </PDBo:has_pdbx_phasing_MAD_set>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_MAD_set_shellCategory/PDBx:pdbx_phasing_MAD_set_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_MAD_set_shell>
      <PDBo:pdbx_phasing_MAD_set_shell rdf:about="{$base}/pdbx_phasing_MAD_set_shell/{$d_res_high_encoded},{$d_res_low_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_MAD_set_shell>
      </PDBo:has_pdbx_phasing_MAD_set_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_MAD_set_siteCategory/PDBx:pdbx_phasing_MAD_set_site">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_MAD_set_site>
      <PDBo:pdbx_phasing_MAD_set_site rdf:about="{$base}/pdbx_phasing_MAD_set_site/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_MAD_set_site>
      </PDBo:has_pdbx_phasing_MAD_set_site>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_MAD_shellCategory/PDBx:pdbx_phasing_MAD_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_MAD_shell>
      <PDBo:pdbx_phasing_MAD_shell rdf:about="{$base}/pdbx_phasing_MAD_shell/{$d_res_high_encoded},{$d_res_low_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_MAD_shell>
      </PDBo:has_pdbx_phasing_MAD_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_MRCategory/PDBx:pdbx_phasing_MR">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_MR>
      <PDBo:pdbx_phasing_MR rdf:about="{$base}/pdbx_phasing_MR/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_MR>
      </PDBo:has_pdbx_phasing_MR>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_dmCategory/PDBx:pdbx_phasing_dm">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_dm>
      <PDBo:pdbx_phasing_dm rdf:about="{$base}/pdbx_phasing_dm/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_dm>
      </PDBo:has_pdbx_phasing_dm>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_phasing_dm_shellCategory/PDBx:pdbx_phasing_dm_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_phasing_dm_shell>
      <PDBo:pdbx_phasing_dm_shell rdf:about="{$base}/pdbx_phasing_dm_shell/{$d_res_high_encoded},{$d_res_low_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_phasing_dm_shell>
      </PDBo:has_pdbx_phasing_dm_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_point_symmetryCategory/PDBx:pdbx_point_symmetry">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_point_symmetry>
      <PDBo:pdbx_point_symmetry rdf:about="{$base}/pdbx_point_symmetry/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_point_symmetry rdf:resource="{$base}/pdbx_point_symmetry/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_67_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_point_symmetry>
      </PDBo:has_pdbx_point_symmetry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_point_symmetry_depositor_infoCategory/PDBx:pdbx_point_symmetry_depositor_info">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_point_symmetry_depositor_info>
      <PDBo:pdbx_point_symmetry_depositor_info rdf:about="{$base}/pdbx_point_symmetry_depositor_info/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_point_symmetry_depositor_info rdf:resource="{$base}/pdbx_point_symmetry_depositor_info/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_68_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_point_symmetry_depositor_info>
      </PDBo:has_pdbx_point_symmetry_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_post_process_detailsCategory/PDBx:pdbx_post_process_details">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_post_process_details>
      <PDBo:pdbx_post_process_details rdf:about="{$base}/pdbx_post_process_details/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_post_process_details rdf:resource="{$base}/pdbx_post_process_details/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_69_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_post_process_details>
      </PDBo:has_pdbx_post_process_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_post_process_statusCategory/PDBx:pdbx_post_process_status">
      <xsl:variable name="cycle_id_truncated"><xsl:choose><xsl:when test="string-length(@cycle_id)&lt;64"><xsl:value-of select="@cycle_id"/></xsl:when><xsl:when test="contains(@cycle_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@cycle_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@cycle_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="cycle_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($cycle_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_post_process_status>
      <PDBo:pdbx_post_process_status rdf:about="{$base}/pdbx_post_process_status/{$cycle_id_encoded},{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_post_process_status rdf:resource="{$base}/pdbx_post_process_status/{$cycle_id_encoded},{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_70_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_post_process_status>
      </PDBo:has_pdbx_post_process_status>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_prd_auditCategory/PDBx:pdbx_prd_audit">
      <xsl:variable name="action_type_truncated"><xsl:choose><xsl:when test="string-length(@action_type)&lt;64"><xsl:value-of select="@action_type"/></xsl:when><xsl:when test="contains(@action_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@action_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@action_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="action_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($action_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="date_truncated"><xsl:choose><xsl:when test="string-length(@date)&lt;64"><xsl:value-of select="@date"/></xsl:when><xsl:when test="contains(@date,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@date,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@date,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="date_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($date_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_prd_audit>
      <PDBo:pdbx_prd_audit rdf:about="{$base}/pdbx_prd_audit/{$action_type_encoded},{$date_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule/">
	    <PDBo:referenced_by_pdbx_prd_audit rdf:resource="{$base}/pdbx_prd_audit/{$action_type_encoded},{$date_encoded},{$prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule>
	<!-- pdbx_reference_moleculeKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_prd_audit>
      </PDBo:has_pdbx_prd_audit>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_prerelease_seqCategory/PDBx:pdbx_prerelease_seq">
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_prerelease_seq>
      <PDBo:pdbx_prerelease_seq rdf:about="{$base}/pdbx_prerelease_seq/{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/">
	    <PDBo:referenced_by_pdbx_prerelease_seq rdf:resource="{$base}/pdbx_prerelease_seq/{$entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_37_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_prerelease_seq>
      </PDBo:has_pdbx_prerelease_seq>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_protein_infoCategory/PDBx:pdbx_protein_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_protein_info>
      <PDBo:pdbx_protein_info rdf:about="{$base}/pdbx_protein_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_protein_info>
      </PDBo:has_pdbx_protein_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_re_refinementCategory/PDBx:pdbx_re_refinement">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_re_refinement>
      <PDBo:pdbx_re_refinement rdf:about="{$base}/pdbx_re_refinement/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_re_refinement>
      </PDBo:has_pdbx_re_refinement>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_linkCategory/PDBx:pdbx_reference_entity_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_link>
      <PDBo:pdbx_reference_entity_link rdf:about="{$base}/pdbx_reference_entity_link/{$link_id_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_link>
      </PDBo:has_pdbx_reference_entity_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_listCategory/PDBx:pdbx_reference_entity_list">
      <xsl:variable name="component_id_truncated"><xsl:choose><xsl:when test="string-length(@component_id)&lt;64"><xsl:value-of select="@component_id"/></xsl:when><xsl:when test="contains(@component_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@component_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@component_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="component_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($component_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_list>
      <PDBo:pdbx_reference_entity_list rdf:about="{$base}/pdbx_reference_entity_list/{$component_id_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule/">
	    <PDBo:referenced_by_pdbx_reference_entity_list rdf:resource="{$base}/pdbx_reference_entity_list/{$component_id_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule>
	<!-- pdbx_reference_moleculeKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_list>
      </PDBo:has_pdbx_reference_entity_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_nonpolyCategory/PDBx:pdbx_reference_entity_nonpoly">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_nonpoly>
      <PDBo:pdbx_reference_entity_nonpoly rdf:about="{$base}/pdbx_reference_entity_nonpoly/{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_nonpoly>
      </PDBo:has_pdbx_reference_entity_nonpoly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_polyCategory/PDBx:pdbx_reference_entity_poly">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_poly>
      <PDBo:pdbx_reference_entity_poly rdf:about="{$base}/pdbx_reference_entity_poly/{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_poly>
      </PDBo:has_pdbx_reference_entity_poly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_poly_linkCategory/PDBx:pdbx_reference_entity_poly_link">
      <xsl:variable name="component_id_truncated"><xsl:choose><xsl:when test="string-length(@component_id)&lt;64"><xsl:value-of select="@component_id"/></xsl:when><xsl:when test="contains(@component_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@component_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@component_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="component_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($component_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_poly_link>
      <PDBo:pdbx_reference_entity_poly_link rdf:about="{$base}/pdbx_reference_entity_poly_link/{$component_id_encoded},{$link_id_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@component_id!='' and @prd_id!='' and @ref_entity_id!=''">
	<PDBo:reference_to_pdbx_reference_entity_list>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_entity_list/,,">
	    <PDBo:referenced_by_pdbx_reference_entity_poly_link rdf:resource="{$base}/pdbx_reference_entity_poly_link/{$component_id_encoded},{$link_id_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_entity_list>
	<!-- pdbx_reference_entity_listKeyref_3_0_0_0 -->
      </xsl:if>
      <xsl:if test="@prd_id!='' and @ref_entity_id!=''">
	<PDBo:reference_to_pdbx_reference_entity_poly>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_entity_poly/,">
	    <PDBo:referenced_by_pdbx_reference_entity_poly_link rdf:resource="{$base}/pdbx_reference_entity_poly_link/{$component_id_encoded},{$link_id_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_entity_poly>
	<!-- pdbx_reference_entity_polyKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_poly_link>
      </PDBo:has_pdbx_reference_entity_poly_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_poly_seqCategory/PDBx:pdbx_reference_entity_poly_seq">
      <xsl:variable name="hetero_truncated"><xsl:choose><xsl:when test="string-length(@hetero)&lt;64"><xsl:value-of select="@hetero"/></xsl:when><xsl:when test="contains(@hetero,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@hetero,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@hetero,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="hetero_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($hetero_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="mon_id_truncated"><xsl:choose><xsl:when test="string-length(@mon_id)&lt;64"><xsl:value-of select="@mon_id"/></xsl:when><xsl:when test="contains(@mon_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@mon_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@mon_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="mon_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($mon_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="num_truncated"><xsl:choose><xsl:when test="string-length(@num)&lt;64"><xsl:value-of select="@num"/></xsl:when><xsl:when test="contains(@num,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@num,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@num,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="num_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($num_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_poly_seq>
      <PDBo:pdbx_reference_entity_poly_seq rdf:about="{$base}/pdbx_reference_entity_poly_seq/{$hetero_encoded},{$mon_id_encoded},{$num_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@prd_id!='' and @ref_entity_id!=''">
	<PDBo:reference_to_pdbx_reference_entity_poly>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_entity_poly/,">
	    <PDBo:referenced_by_pdbx_reference_entity_poly_seq rdf:resource="{$base}/pdbx_reference_entity_poly_seq/{$hetero_encoded},{$mon_id_encoded},{$num_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_entity_poly>
	<!-- pdbx_reference_entity_polyKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_poly_seq>
      </PDBo:has_pdbx_reference_entity_poly_seq>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_sequenceCategory/PDBx:pdbx_reference_entity_sequence">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_sequence>
      <PDBo:pdbx_reference_entity_sequence rdf:about="{$base}/pdbx_reference_entity_sequence/{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_sequence>
      </PDBo:has_pdbx_reference_entity_sequence>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_src_natCategory/PDBx:pdbx_reference_entity_src_nat">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ref_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_entity_id)&lt;64"><xsl:value-of select="@ref_entity_id"/></xsl:when><xsl:when test="contains(@ref_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_src_nat>
      <PDBo:pdbx_reference_entity_src_nat rdf:about="{$base}/pdbx_reference_entity_src_nat/{$ordinal_encoded},{$prd_id_encoded},{$ref_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_src_nat>
      </PDBo:has_pdbx_reference_entity_src_nat>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_entity_subcomponentsCategory/PDBx:pdbx_reference_entity_subcomponents">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_truncated"><xsl:choose><xsl:when test="string-length(@seq)&lt;64"><xsl:value-of select="@seq"/></xsl:when><xsl:when test="contains(@seq,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_entity_subcomponents>
      <PDBo:pdbx_reference_entity_subcomponents rdf:about="{$base}/pdbx_reference_entity_subcomponents/{$prd_id_encoded},{$seq_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule/">
	    <PDBo:referenced_by_pdbx_reference_entity_subcomponents rdf:resource="{$base}/pdbx_reference_entity_subcomponents/{$prd_id_encoded},{$seq_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule>
	<!-- pdbx_reference_moleculeKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_entity_subcomponents>
      </PDBo:has_pdbx_reference_entity_subcomponents>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_linked_entityCategory/PDBx:pdbx_reference_linked_entity">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_linked_entity>
      <PDBo:pdbx_reference_linked_entity rdf:about="{$base}/pdbx_reference_linked_entity/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_linked_entity>
      </PDBo:has_pdbx_reference_linked_entity>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_linked_entity_comp_linkCategory/PDBx:pdbx_reference_linked_entity_comp_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_linked_entity_comp_link>
      <PDBo:pdbx_reference_linked_entity_comp_link rdf:about="{$base}/pdbx_reference_linked_entity_comp_link/{$link_id_encoded},{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@linked_entity_id!='' and PDBx:list_id_1!=''">
	<PDBo:reference_to_pdbx_reference_linked_entity_comp_list>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_linked_entity_comp_list/,{translate(PDBx:list_id_1,' ^','__')}">
	    <PDBo:referenced_by_pdbx_reference_linked_entity_comp_link rdf:resource="{$base}/pdbx_reference_linked_entity_comp_link/{$link_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_linked_entity_comp_list>
	<!-- pdbx_reference_linked_entity_comp_listKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_linked_entity_comp_link>
      </PDBo:has_pdbx_reference_linked_entity_comp_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_linked_entity_comp_listCategory/PDBx:pdbx_reference_linked_entity_comp_list">
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="list_id_truncated"><xsl:choose><xsl:when test="string-length(@list_id)&lt;64"><xsl:value-of select="@list_id"/></xsl:when><xsl:when test="contains(@list_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@list_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@list_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="list_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($list_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_linked_entity_comp_list>
      <PDBo:pdbx_reference_linked_entity_comp_list rdf:about="{$base}/pdbx_reference_linked_entity_comp_list/{$linked_entity_id_encoded},{$list_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@linked_entity_id!=''">
	<PDBo:reference_to_pdbx_reference_linked_entity>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_linked_entity/">
	    <PDBo:referenced_by_pdbx_reference_linked_entity_comp_list rdf:resource="{$base}/pdbx_reference_linked_entity_comp_list/{$linked_entity_id_encoded},{$list_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_linked_entity>
	<!-- pdbx_reference_linked_entityKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_linked_entity_comp_list>
      </PDBo:has_pdbx_reference_linked_entity_comp_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_linked_entity_linkCategory/PDBx:pdbx_reference_linked_entity_link">
      <xsl:variable name="link_id_truncated"><xsl:choose><xsl:when test="string-length(@link_id)&lt;64"><xsl:value-of select="@link_id"/></xsl:when><xsl:when test="contains(@link_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@link_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@link_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="link_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($link_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="linked_entity_id_truncated"><xsl:choose><xsl:when test="string-length(@linked_entity_id)&lt;64"><xsl:value-of select="@linked_entity_id"/></xsl:when><xsl:when test="contains(@linked_entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@linked_entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@linked_entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="linked_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($linked_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_linked_entity_link>
      <PDBo:pdbx_reference_linked_entity_link rdf:about="{$base}/pdbx_reference_linked_entity_link/{$link_id_encoded},{$linked_entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@linked_entity_id!='' and PDBx:from_list_id!=''">
	<PDBo:reference_to_pdbx_reference_linked_entity_comp_list>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_linked_entity_comp_list/,{translate(PDBx:from_list_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_reference_linked_entity_link rdf:resource="{$base}/pdbx_reference_linked_entity_link/{$link_id_encoded},{$linked_entity_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_linked_entity_comp_list>
	<!-- pdbx_reference_linked_entity_comp_listKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_linked_entity_link>
      </PDBo:has_pdbx_reference_linked_entity_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_moleculeCategory/PDBx:pdbx_reference_molecule">
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule>
      <PDBo:pdbx_reference_molecule rdf:about="{$base}/pdbx_reference_molecule/{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule>
      </PDBo:has_pdbx_reference_molecule>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_annotationCategory/PDBx:pdbx_reference_molecule_annotation">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_annotation>
      <PDBo:pdbx_reference_molecule_annotation rdf:about="{$base}/pdbx_reference_molecule_annotation/{$family_prd_id_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_annotation>
      </PDBo:has_pdbx_reference_molecule_annotation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_detailsCategory/PDBx:pdbx_reference_molecule_details">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_details>
      <PDBo:pdbx_reference_molecule_details rdf:about="{$base}/pdbx_reference_molecule_details/{$family_prd_id_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_details>
      </PDBo:has_pdbx_reference_molecule_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_familyCategory/PDBx:pdbx_reference_molecule_family">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_family>
      <PDBo:pdbx_reference_molecule_family rdf:about="{$base}/pdbx_reference_molecule_family/{$family_prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_family>
      </PDBo:has_pdbx_reference_molecule_family>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_featuresCategory/PDBx:pdbx_reference_molecule_features">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_features>
      <PDBo:pdbx_reference_molecule_features rdf:about="{$base}/pdbx_reference_molecule_features/{$family_prd_id_encoded},{$ordinal_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@family_prd_id!='' and @prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule_list>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule_list/,">
	    <PDBo:referenced_by_pdbx_reference_molecule_features rdf:resource="{$base}/pdbx_reference_molecule_features/{$family_prd_id_encoded},{$ordinal_encoded},{$prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule_list>
	<!-- pdbx_reference_molecule_listKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_features>
      </PDBo:has_pdbx_reference_molecule_features>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_listCategory/PDBx:pdbx_reference_molecule_list">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_list>
      <PDBo:pdbx_reference_molecule_list rdf:about="{$base}/pdbx_reference_molecule_list/{$family_prd_id_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@family_prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule_family>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule_family/">
	    <PDBo:referenced_by_pdbx_reference_molecule_list rdf:resource="{$base}/pdbx_reference_molecule_list/{$family_prd_id_encoded},{$prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule_family>
	<!-- pdbx_reference_molecule_familyKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_list>
      </PDBo:has_pdbx_reference_molecule_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_related_structuresCategory/PDBx:pdbx_reference_molecule_related_structures">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_related_structures>
      <PDBo:pdbx_reference_molecule_related_structures rdf:about="{$base}/pdbx_reference_molecule_related_structures/{$family_prd_id_encoded},{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_related_structures>
      </PDBo:has_pdbx_reference_molecule_related_structures>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_molecule_synonymsCategory/PDBx:pdbx_reference_molecule_synonyms">
      <xsl:variable name="family_prd_id_truncated"><xsl:choose><xsl:when test="string-length(@family_prd_id)&lt;64"><xsl:value-of select="@family_prd_id"/></xsl:when><xsl:when test="contains(@family_prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@family_prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@family_prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="family_prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($family_prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="prd_id_truncated"><xsl:choose><xsl:when test="string-length(@prd_id)&lt;64"><xsl:value-of select="@prd_id"/></xsl:when><xsl:when test="contains(@prd_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@prd_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@prd_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="prd_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($prd_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_molecule_synonyms>
      <PDBo:pdbx_reference_molecule_synonyms rdf:about="{$base}/pdbx_reference_molecule_synonyms/{$family_prd_id_encoded},{$ordinal_encoded},{$prd_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@family_prd_id!='' and @prd_id!=''">
	<PDBo:reference_to_pdbx_reference_molecule_list>
	  <rdf:Description rdf:about="{$base}/pdbx_reference_molecule_list/,">
	    <PDBo:referenced_by_pdbx_reference_molecule_synonyms rdf:resource="{$base}/pdbx_reference_molecule_synonyms/{$family_prd_id_encoded},{$ordinal_encoded},{$prd_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_reference_molecule_list>
	<!-- pdbx_reference_molecule_listKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_molecule_synonyms>
      </PDBo:has_pdbx_reference_molecule_synonyms>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reference_publication_listCategory/PDBx:pdbx_reference_publication_list">
      <xsl:variable name="publication_abbrev_truncated"><xsl:choose><xsl:when test="string-length(@publication_abbrev)&lt;64"><xsl:value-of select="@publication_abbrev"/></xsl:when><xsl:when test="contains(@publication_abbrev,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@publication_abbrev,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@publication_abbrev,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="publication_abbrev_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($publication_abbrev_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reference_publication_list>
      <PDBo:pdbx_reference_publication_list rdf:about="{$base}/pdbx_reference_publication_list/{$publication_abbrev_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reference_publication_list>
      </PDBo:has_pdbx_reference_publication_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refineCategory/PDBx:pdbx_refine">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine>
      <PDBo:pdbx_refine rdf:about="{$base}/pdbx_refine/{$entry_id_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_refine rdf:resource="{$base}/pdbx_refine/{$entry_id_encoded},{$pdbx_refine_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_71_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine>
      </PDBo:has_pdbx_refine>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refine_aux_fileCategory/PDBx:pdbx_refine_aux_file">
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="serial_no_truncated"><xsl:choose><xsl:when test="string-length(@serial_no)&lt;64"><xsl:value-of select="@serial_no"/></xsl:when><xsl:when test="contains(@serial_no,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@serial_no,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@serial_no,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="serial_no_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($serial_no_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine_aux_file>
      <PDBo:pdbx_refine_aux_file rdf:about="{$base}/pdbx_refine_aux_file/{$pdbx_refine_id_encoded},{$serial_no_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine_aux_file>
      </PDBo:has_pdbx_refine_aux_file>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refine_componentCategory/PDBx:pdbx_refine_component">
      <xsl:variable name="label_alt_id_truncated"><xsl:choose><xsl:when test="string-length(@label_alt_id)&lt;64"><xsl:value-of select="@label_alt_id"/></xsl:when><xsl:when test="contains(@label_alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@label_comp_id)&lt;64"><xsl:value-of select="@label_comp_id"/></xsl:when><xsl:when test="contains(@label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@label_seq_id)&lt;64"><xsl:value-of select="@label_seq_id"/></xsl:when><xsl:when test="contains(@label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine_component>
      <PDBo:pdbx_refine_component rdf:about="{$base}/pdbx_refine_component/{$label_alt_id_encoded},{$label_asym_id_encoded},{$label_comp_id_encoded},{$label_seq_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine_component>
      </PDBo:has_pdbx_refine_component>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refine_ls_restr_ncsCategory/PDBx:pdbx_refine_ls_restr_ncs">
      <xsl:variable name="dom_id_truncated"><xsl:choose><xsl:when test="string-length(@dom_id)&lt;64"><xsl:value-of select="@dom_id"/></xsl:when><xsl:when test="contains(@dom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine_ls_restr_ncs>
      <PDBo:pdbx_refine_ls_restr_ncs rdf:about="{$base}/pdbx_refine_ls_restr_ncs/{$dom_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine_ls_restr_ncs>
      </PDBo:has_pdbx_refine_ls_restr_ncs>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refine_tlsCategory/PDBx:pdbx_refine_tls">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine_tls>
      <PDBo:pdbx_refine_tls rdf:about="{$base}/pdbx_refine_tls/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine_tls>
      </PDBo:has_pdbx_refine_tls>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refine_tls_groupCategory/PDBx:pdbx_refine_tls_group">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refine_tls_group>
      <PDBo:pdbx_refine_tls_group rdf:about="{$base}/pdbx_refine_tls_group/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:refine_tls_id!=''">
	<PDBo:reference_to_pdbx_refine_tls>
	  <rdf:Description rdf:about="{$base}/pdbx_refine_tls/{translate(PDBx:refine_tls_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_refine_tls_group rdf:resource="{$base}/pdbx_refine_tls_group/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_refine_tls>
	<!-- pdbx_refine_tlsKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refine_tls_group>
      </PDBo:has_pdbx_refine_tls_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_refln_signal_binningCategory/PDBx:pdbx_refln_signal_binning">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_refln_signal_binning>
      <PDBo:pdbx_refln_signal_binning rdf:about="{$base}/pdbx_refln_signal_binning/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_refln_signal_binning>
      </PDBo:has_pdbx_refln_signal_binning>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_reflns_twinCategory/PDBx:pdbx_reflns_twin">
      <xsl:variable name="crystal_id_truncated"><xsl:choose><xsl:when test="string-length(@crystal_id)&lt;64"><xsl:value-of select="@crystal_id"/></xsl:when><xsl:when test="contains(@crystal_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@crystal_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@crystal_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="crystal_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($crystal_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="operator_truncated"><xsl:choose><xsl:when test="string-length(@operator)&lt;64"><xsl:value-of select="@operator"/></xsl:when><xsl:when test="contains(@operator,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@operator,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@operator,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="operator_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($operator_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_reflns_twin>
      <PDBo:pdbx_reflns_twin rdf:about="{$base}/pdbx_reflns_twin/{$crystal_id_encoded},{$diffrn_id_encoded},{$operator_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_reflns_twin>
      </PDBo:has_pdbx_reflns_twin>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_related_exp_data_setCategory/PDBx:pdbx_related_exp_data_set">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_related_exp_data_set>
      <PDBo:pdbx_related_exp_data_set rdf:about="{$base}/pdbx_related_exp_data_set/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_related_exp_data_set>
      </PDBo:has_pdbx_related_exp_data_set>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_remediation_atom_site_mappingCategory/PDBx:pdbx_remediation_atom_site_mapping">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_remediation_atom_site_mapping>
      <PDBo:pdbx_remediation_atom_site_mapping rdf:about="{$base}/pdbx_remediation_atom_site_mapping/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_remediation_atom_site_mapping>
      </PDBo:has_pdbx_remediation_atom_site_mapping>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_rmch_outlierCategory/PDBx:pdbx_rmch_outlier">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_rmch_outlier>
      <PDBo:pdbx_rmch_outlier rdf:about="{$base}/pdbx_rmch_outlier/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_rmch_outlier>
      </PDBo:has_pdbx_rmch_outlier>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_rms_devs_cov_by_monomerCategory/PDBx:pdbx_rms_devs_cov_by_monomer">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_rms_devs_cov_by_monomer>
      <PDBo:pdbx_rms_devs_cov_by_monomer rdf:about="{$base}/pdbx_rms_devs_cov_by_monomer/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_rms_devs_cov_by_monomer>
      </PDBo:has_pdbx_rms_devs_cov_by_monomer>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_rms_devs_covalentCategory/PDBx:pdbx_rms_devs_covalent">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_rms_devs_covalent>
      <PDBo:pdbx_rms_devs_covalent rdf:about="{$base}/pdbx_rms_devs_covalent/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_rms_devs_covalent rdf:resource="{$base}/pdbx_rms_devs_covalent/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_72_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_rms_devs_covalent>
      </PDBo:has_pdbx_rms_devs_covalent>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_robot_systemCategory/PDBx:pdbx_robot_system">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_robot_system>
      <PDBo:pdbx_robot_system rdf:about="{$base}/pdbx_robot_system/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_robot_system>
      </PDBo:has_pdbx_robot_system>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_seq_map_depositor_infoCategory/PDBx:pdbx_seq_map_depositor_info">
      <xsl:variable name="auth_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@auth_asym_id)&lt;64"><xsl:value-of select="@auth_asym_id"/></xsl:when><xsl:when test="contains(@auth_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@auth_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@auth_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="auth_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($auth_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_seq_map_depositor_info>
      <PDBo:pdbx_seq_map_depositor_info rdf:about="{$base}/pdbx_seq_map_depositor_info/{$auth_asym_id_encoded},{$entity_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_seq_map_depositor_info>
      </PDBo:has_pdbx_seq_map_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sequence_annotationCategory/PDBx:pdbx_sequence_annotation">
      <xsl:variable name="pdb_chain_id_truncated"><xsl:choose><xsl:when test="string-length(@pdb_chain_id)&lt;64"><xsl:value-of select="@pdb_chain_id"/></xsl:when><xsl:when test="contains(@pdb_chain_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdb_chain_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdb_chain_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdb_chain_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdb_chain_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sequence_annotation>
      <PDBo:pdbx_sequence_annotation rdf:about="{$base}/pdbx_sequence_annotation/{$pdb_chain_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sequence_annotation>
      </PDBo:has_pdbx_sequence_annotation>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sequence_patternCategory/PDBx:pdbx_sequence_pattern">
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sequence_pattern_truncated"><xsl:choose><xsl:when test="string-length(@sequence_pattern)&lt;64"><xsl:value-of select="@sequence_pattern"/></xsl:when><xsl:when test="contains(@sequence_pattern,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sequence_pattern,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sequence_pattern,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sequence_pattern_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sequence_pattern_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sequence_pattern>
      <PDBo:pdbx_sequence_pattern rdf:about="{$base}/pdbx_sequence_pattern/{$label_asym_id_encoded},{$sequence_pattern_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sequence_pattern>
      </PDBo:has_pdbx_sequence_pattern>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sequence_rangeCategory/PDBx:pdbx_sequence_range">
      <xsl:variable name="beg_label_alt_id_truncated"><xsl:choose><xsl:when test="string-length(@beg_label_alt_id)&lt;64"><xsl:value-of select="@beg_label_alt_id"/></xsl:when><xsl:when test="contains(@beg_label_alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@beg_label_alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@beg_label_alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="beg_label_alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($beg_label_alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="beg_label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@beg_label_asym_id)&lt;64"><xsl:value-of select="@beg_label_asym_id"/></xsl:when><xsl:when test="contains(@beg_label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@beg_label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@beg_label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="beg_label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($beg_label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="beg_label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@beg_label_comp_id)&lt;64"><xsl:value-of select="@beg_label_comp_id"/></xsl:when><xsl:when test="contains(@beg_label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@beg_label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@beg_label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="beg_label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($beg_label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="beg_label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@beg_label_seq_id)&lt;64"><xsl:value-of select="@beg_label_seq_id"/></xsl:when><xsl:when test="contains(@beg_label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@beg_label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@beg_label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="beg_label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($beg_label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="end_label_alt_id_truncated"><xsl:choose><xsl:when test="string-length(@end_label_alt_id)&lt;64"><xsl:value-of select="@end_label_alt_id"/></xsl:when><xsl:when test="contains(@end_label_alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@end_label_alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@end_label_alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="end_label_alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($end_label_alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="end_label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@end_label_asym_id)&lt;64"><xsl:value-of select="@end_label_asym_id"/></xsl:when><xsl:when test="contains(@end_label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@end_label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@end_label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="end_label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($end_label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="end_label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@end_label_comp_id)&lt;64"><xsl:value-of select="@end_label_comp_id"/></xsl:when><xsl:when test="contains(@end_label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@end_label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@end_label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="end_label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($end_label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="end_label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@end_label_seq_id)&lt;64"><xsl:value-of select="@end_label_seq_id"/></xsl:when><xsl:when test="contains(@end_label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@end_label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@end_label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="end_label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($end_label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_range_id_truncated"><xsl:choose><xsl:when test="string-length(@seq_range_id)&lt;64"><xsl:value-of select="@seq_range_id"/></xsl:when><xsl:when test="contains(@seq_range_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq_range_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq_range_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_range_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_range_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sequence_range>
      <PDBo:pdbx_sequence_range rdf:about="{$base}/pdbx_sequence_range/{$beg_label_alt_id_encoded},{$beg_label_asym_id_encoded},{$beg_label_comp_id_encoded},{$beg_label_seq_id_encoded},{$end_label_alt_id_encoded},{$end_label_asym_id_encoded},{$end_label_comp_id_encoded},{$end_label_seq_id_encoded},{$seq_range_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sequence_range>
      </PDBo:has_pdbx_sequence_range>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_serial_crystallography_data_reductionCategory/PDBx:pdbx_serial_crystallography_data_reduction">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_serial_crystallography_data_reduction>
      <PDBo:pdbx_serial_crystallography_data_reduction rdf:about="{$base}/pdbx_serial_crystallography_data_reduction/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_serial_crystallography_data_reduction rdf:resource="{$base}/pdbx_serial_crystallography_data_reduction/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_11_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_serial_crystallography_data_reduction>
      </PDBo:has_pdbx_serial_crystallography_data_reduction>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_serial_crystallography_measurementCategory/PDBx:pdbx_serial_crystallography_measurement">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_serial_crystallography_measurement>
      <PDBo:pdbx_serial_crystallography_measurement rdf:about="{$base}/pdbx_serial_crystallography_measurement/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_serial_crystallography_measurement rdf:resource="{$base}/pdbx_serial_crystallography_measurement/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_12_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_serial_crystallography_measurement>
      </PDBo:has_pdbx_serial_crystallography_measurement>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_serial_crystallography_sample_deliveryCategory/PDBx:pdbx_serial_crystallography_sample_delivery">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_serial_crystallography_sample_delivery>
      <PDBo:pdbx_serial_crystallography_sample_delivery rdf:about="{$base}/pdbx_serial_crystallography_sample_delivery/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_serial_crystallography_sample_delivery rdf:resource="{$base}/pdbx_serial_crystallography_sample_delivery/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_13_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_serial_crystallography_sample_delivery>
      </PDBo:has_pdbx_serial_crystallography_sample_delivery>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_serial_crystallography_sample_delivery_fixed_targetCategory/PDBx:pdbx_serial_crystallography_sample_delivery_fixed_target">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_serial_crystallography_sample_delivery_fixed_target>
      <PDBo:pdbx_serial_crystallography_sample_delivery_fixed_target rdf:about="{$base}/pdbx_serial_crystallography_sample_delivery_fixed_target/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_serial_crystallography_sample_delivery_fixed_target rdf:resource="{$base}/pdbx_serial_crystallography_sample_delivery_fixed_target/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_14_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_serial_crystallography_sample_delivery_fixed_target>
      </PDBo:has_pdbx_serial_crystallography_sample_delivery_fixed_target>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_serial_crystallography_sample_delivery_injectionCategory/PDBx:pdbx_serial_crystallography_sample_delivery_injection">
      <xsl:variable name="diffrn_id_truncated"><xsl:choose><xsl:when test="string-length(@diffrn_id)&lt;64"><xsl:value-of select="@diffrn_id"/></xsl:when><xsl:when test="contains(@diffrn_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@diffrn_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@diffrn_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="diffrn_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($diffrn_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_serial_crystallography_sample_delivery_injection>
      <PDBo:pdbx_serial_crystallography_sample_delivery_injection rdf:about="{$base}/pdbx_serial_crystallography_sample_delivery_injection/{$diffrn_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@diffrn_id!=''">
	<PDBo:reference_to_diffrn>
	  <rdf:Description rdf:about="{$base}/diffrn/">
	    <PDBo:referenced_by_pdbx_serial_crystallography_sample_delivery_injection rdf:resource="{$base}/pdbx_serial_crystallography_sample_delivery_injection/{$diffrn_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_diffrn>
	<!-- diffrnKeyref_0_0_15_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_serial_crystallography_sample_delivery_injection>
      </PDBo:has_pdbx_serial_crystallography_sample_delivery_injection>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sifts_unp_segmentsCategory/PDBx:pdbx_sifts_unp_segments">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="instance_id_truncated"><xsl:choose><xsl:when test="string-length(@instance_id)&lt;64"><xsl:value-of select="@instance_id"/></xsl:when><xsl:when test="contains(@instance_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@instance_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@instance_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="instance_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($instance_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="segment_id_truncated"><xsl:choose><xsl:when test="string-length(@segment_id)&lt;64"><xsl:value-of select="@segment_id"/></xsl:when><xsl:when test="contains(@segment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@segment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@segment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="segment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($segment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="unp_acc_truncated"><xsl:choose><xsl:when test="string-length(@unp_acc)&lt;64"><xsl:value-of select="@unp_acc"/></xsl:when><xsl:when test="contains(@unp_acc,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@unp_acc,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@unp_acc,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="unp_acc_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($unp_acc_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sifts_unp_segments>
      <PDBo:pdbx_sifts_unp_segments rdf:about="{$base}/pdbx_sifts_unp_segments/{$asym_id_encoded},{$entity_id_encoded},{$instance_id_encoded},{$segment_id_encoded},{$unp_acc_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_sifts_unp_segments rdf:resource="{$base}/pdbx_sifts_unp_segments/{$asym_id_encoded},{$entity_id_encoded},{$instance_id_encoded},{$segment_id_encoded},{$unp_acc_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sifts_unp_segments>
      </PDBo:has_pdbx_sifts_unp_segments>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sifts_xref_dbCategory/PDBx:pdbx_sifts_xref_db">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_id_truncated"><xsl:choose><xsl:when test="string-length(@seq_id)&lt;64"><xsl:value-of select="@seq_id"/></xsl:when><xsl:when test="contains(@seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_id_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@seq_id_ordinal)&lt;64"><xsl:value-of select="@seq_id_ordinal"/></xsl:when><xsl:when test="contains(@seq_id_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq_id_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq_id_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_id_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_id_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sifts_xref_db>
      <PDBo:pdbx_sifts_xref_db rdf:about="{$base}/pdbx_sifts_xref_db/{$asym_id_encoded},{$entity_id_encoded},{$seq_id_encoded},{$seq_id_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_sifts_xref_db rdf:resource="{$base}/pdbx_sifts_xref_db/{$asym_id_encoded},{$entity_id_encoded},{$seq_id_encoded},{$seq_id_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sifts_xref_db>
      </PDBo:has_pdbx_sifts_xref_db>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sifts_xref_db_segmentsCategory/PDBx:pdbx_sifts_xref_db_segments">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="entity_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_id)&lt;64"><xsl:value-of select="@entity_id"/></xsl:when><xsl:when test="contains(@entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="instance_id_truncated"><xsl:choose><xsl:when test="string-length(@instance_id)&lt;64"><xsl:value-of select="@instance_id"/></xsl:when><xsl:when test="contains(@instance_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@instance_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@instance_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="instance_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($instance_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="segment_id_truncated"><xsl:choose><xsl:when test="string-length(@segment_id)&lt;64"><xsl:value-of select="@segment_id"/></xsl:when><xsl:when test="contains(@segment_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@segment_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@segment_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="segment_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($segment_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_id_end_truncated"><xsl:choose><xsl:when test="string-length(@seq_id_end)&lt;64"><xsl:value-of select="@seq_id_end"/></xsl:when><xsl:when test="contains(@seq_id_end,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq_id_end,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq_id_end,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_id_end_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_id_end_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="seq_id_start_truncated"><xsl:choose><xsl:when test="string-length(@seq_id_start)&lt;64"><xsl:value-of select="@seq_id_start"/></xsl:when><xsl:when test="contains(@seq_id_start,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@seq_id_start,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@seq_id_start,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="seq_id_start_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($seq_id_start_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="xref_db_truncated"><xsl:choose><xsl:when test="string-length(@xref_db)&lt;64"><xsl:value-of select="@xref_db"/></xsl:when><xsl:when test="contains(@xref_db,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@xref_db,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@xref_db,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="xref_db_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($xref_db_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="xref_db_acc_truncated"><xsl:choose><xsl:when test="string-length(@xref_db_acc)&lt;64"><xsl:value-of select="@xref_db_acc"/></xsl:when><xsl:when test="contains(@xref_db_acc,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@xref_db_acc,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@xref_db_acc,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="xref_db_acc_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($xref_db_acc_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sifts_xref_db_segments>
      <PDBo:pdbx_sifts_xref_db_segments rdf:about="{$base}/pdbx_sifts_xref_db_segments/{$asym_id_encoded},{$entity_id_encoded},{$instance_id_encoded},{$segment_id_encoded},{$seq_id_end_encoded},{$seq_id_start_encoded},{$xref_db_encoded},{$xref_db_acc_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_pdbx_sifts_xref_db_segments rdf:resource="{$base}/pdbx_sifts_xref_db_segments/{$asym_id_encoded},{$entity_id_encoded},{$instance_id_encoded},{$segment_id_encoded},{$seq_id_end_encoded},{$seq_id_start_encoded},{$xref_db_encoded},{$xref_db_acc_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sifts_xref_db_segments>
      </PDBo:has_pdbx_sifts_xref_db_segments>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_soln_scatterCategory/PDBx:pdbx_soln_scatter">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_soln_scatter>
      <PDBo:pdbx_soln_scatter rdf:about="{$base}/pdbx_soln_scatter/{$entry_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_soln_scatter rdf:resource="{$base}/pdbx_soln_scatter/{$entry_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_73_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_soln_scatter>
      </PDBo:has_pdbx_soln_scatter>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_soln_scatter_modelCategory/PDBx:pdbx_soln_scatter_model">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="scatter_id_truncated"><xsl:choose><xsl:when test="string-length(@scatter_id)&lt;64"><xsl:value-of select="@scatter_id"/></xsl:when><xsl:when test="contains(@scatter_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@scatter_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@scatter_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="scatter_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($scatter_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_soln_scatter_model>
      <PDBo:pdbx_soln_scatter_model rdf:about="{$base}/pdbx_soln_scatter_model/{$id_encoded},{$scatter_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_soln_scatter_model>
      </PDBo:has_pdbx_soln_scatter_model>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_solvent_atom_site_mappingCategory/PDBx:pdbx_solvent_atom_site_mapping">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_solvent_atom_site_mapping>
      <PDBo:pdbx_solvent_atom_site_mapping rdf:about="{$base}/pdbx_solvent_atom_site_mapping/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_solvent_atom_site_mapping>
      </PDBo:has_pdbx_solvent_atom_site_mapping>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_solvent_infoCategory/PDBx:pdbx_solvent_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_solvent_info>
      <PDBo:pdbx_solvent_info rdf:about="{$base}/pdbx_solvent_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_solvent_info>
      </PDBo:has_pdbx_solvent_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sourceCategory/PDBx:pdbx_source">
      <xsl:variable name="src_method_truncated"><xsl:choose><xsl:when test="string-length(@src_method)&lt;64"><xsl:value-of select="@src_method"/></xsl:when><xsl:when test="contains(@src_method,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@src_method,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@src_method,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="src_method_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($src_method_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_source>
      <PDBo:pdbx_source rdf:about="{$base}/pdbx_source/{$src_method_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_source>
      </PDBo:has_pdbx_source>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_stereochemistryCategory/PDBx:pdbx_stereochemistry">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_stereochemistry>
      <PDBo:pdbx_stereochemistry rdf:about="{$base}/pdbx_stereochemistry/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_stereochemistry>
      </PDBo:has_pdbx_stereochemistry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assemblyCategory/PDBx:pdbx_struct_assembly">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly>
      <PDBo:pdbx_struct_assembly rdf:about="{$base}/pdbx_struct_assembly/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly>
      </PDBo:has_pdbx_struct_assembly>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_auth_classificationCategory/PDBx:pdbx_struct_assembly_auth_classification">
      <xsl:variable name="assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@assembly_id)&lt;64"><xsl:value-of select="@assembly_id"/></xsl:when><xsl:when test="contains(@assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_auth_classification>
      <PDBo:pdbx_struct_assembly_auth_classification rdf:about="{$base}/pdbx_struct_assembly_auth_classification/{$assembly_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@assembly_id!=''">
	<PDBo:reference_to_pdbx_struct_assembly>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_assembly/">
	    <PDBo:referenced_by_pdbx_struct_assembly_auth_classification rdf:resource="{$base}/pdbx_struct_assembly_auth_classification/{$assembly_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_assembly>
	<!-- pdbx_struct_assemblyKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_auth_classification>
      </PDBo:has_pdbx_struct_assembly_auth_classification>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_auth_evidenceCategory/PDBx:pdbx_struct_assembly_auth_evidence">
      <xsl:variable name="assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@assembly_id)&lt;64"><xsl:value-of select="@assembly_id"/></xsl:when><xsl:when test="contains(@assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_auth_evidence>
      <PDBo:pdbx_struct_assembly_auth_evidence rdf:about="{$base}/pdbx_struct_assembly_auth_evidence/{$assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@assembly_id!=''">
	<PDBo:reference_to_pdbx_struct_assembly>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_assembly/">
	    <PDBo:referenced_by_pdbx_struct_assembly_auth_evidence rdf:resource="{$base}/pdbx_struct_assembly_auth_evidence/{$assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_assembly>
	<!-- pdbx_struct_assemblyKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_auth_evidence>
      </PDBo:has_pdbx_struct_assembly_auth_evidence>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_auth_evidence_depositor_infoCategory/PDBx:pdbx_struct_assembly_auth_evidence_depositor_info">
      <xsl:variable name="assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@assembly_id)&lt;64"><xsl:value-of select="@assembly_id"/></xsl:when><xsl:when test="contains(@assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_auth_evidence_depositor_info>
      <PDBo:pdbx_struct_assembly_auth_evidence_depositor_info rdf:about="{$base}/pdbx_struct_assembly_auth_evidence_depositor_info/{$assembly_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@assembly_id!=''">
	<PDBo:reference_to_pdbx_struct_assembly_depositor_info>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_assembly_depositor_info/">
	    <PDBo:referenced_by_pdbx_struct_assembly_auth_evidence_depositor_info rdf:resource="{$base}/pdbx_struct_assembly_auth_evidence_depositor_info/{$assembly_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_assembly_depositor_info>
	<!-- pdbx_struct_assembly_depositor_infoKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_auth_evidence_depositor_info>
      </PDBo:has_pdbx_struct_assembly_auth_evidence_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_depositor_infoCategory/PDBx:pdbx_struct_assembly_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_depositor_info>
      <PDBo:pdbx_struct_assembly_depositor_info rdf:about="{$base}/pdbx_struct_assembly_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_depositor_info>
      </PDBo:has_pdbx_struct_assembly_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_genCategory/PDBx:pdbx_struct_assembly_gen">
      <xsl:variable name="assembly_id_truncated"><xsl:choose><xsl:when test="string-length(@assembly_id)&lt;64"><xsl:value-of select="@assembly_id"/></xsl:when><xsl:when test="contains(@assembly_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@assembly_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@assembly_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="assembly_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($assembly_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="asym_id_list_truncated"><xsl:choose><xsl:when test="string-length(@asym_id_list)&lt;64"><xsl:value-of select="@asym_id_list"/></xsl:when><xsl:when test="contains(@asym_id_list,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id_list,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id_list,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_list_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_list_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="oper_expression_truncated"><xsl:choose><xsl:when test="string-length(@oper_expression)&lt;64"><xsl:value-of select="@oper_expression"/></xsl:when><xsl:when test="contains(@oper_expression,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@oper_expression,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@oper_expression,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="oper_expression_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($oper_expression_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_gen>
      <PDBo:pdbx_struct_assembly_gen rdf:about="{$base}/pdbx_struct_assembly_gen/{$assembly_id_encoded},{$asym_id_list_encoded},{$oper_expression_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@assembly_id!=''">
	<PDBo:reference_to_pdbx_struct_assembly>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_assembly/">
	    <PDBo:referenced_by_pdbx_struct_assembly_gen rdf:resource="{$base}/pdbx_struct_assembly_gen/{$assembly_id_encoded},{$asym_id_list_encoded},{$oper_expression_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_assembly>
	<!-- pdbx_struct_assemblyKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_gen>
      </PDBo:has_pdbx_struct_assembly_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_gen_depositor_infoCategory/PDBx:pdbx_struct_assembly_gen_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_gen_depositor_info>
      <PDBo:pdbx_struct_assembly_gen_depositor_info rdf:about="{$base}/pdbx_struct_assembly_gen_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:assembly_id!=''">
	<PDBo:reference_to_pdbx_struct_assembly_depositor_info>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_assembly_depositor_info/{translate(PDBx:assembly_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_struct_assembly_gen_depositor_info rdf:resource="{$base}/pdbx_struct_assembly_gen_depositor_info/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_assembly_depositor_info>
	<!-- pdbx_struct_assembly_depositor_infoKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_gen_depositor_info>
      </PDBo:has_pdbx_struct_assembly_gen_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_propCategory/PDBx:pdbx_struct_assembly_prop">
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_prop>
      <PDBo:pdbx_struct_assembly_prop rdf:about="{$base}/pdbx_struct_assembly_prop/{$biol_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_prop>
      </PDBo:has_pdbx_struct_assembly_prop>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_assembly_prop_depositor_infoCategory/PDBx:pdbx_struct_assembly_prop_depositor_info">
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_assembly_prop_depositor_info>
      <PDBo:pdbx_struct_assembly_prop_depositor_info rdf:about="{$base}/pdbx_struct_assembly_prop_depositor_info/{$biol_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_assembly_prop_depositor_info>
      </PDBo:has_pdbx_struct_assembly_prop_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_asym_genCategory/PDBx:pdbx_struct_asym_gen">
      <xsl:variable name="entity_inst_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_inst_id)&lt;64"><xsl:value-of select="@entity_inst_id"/></xsl:when><xsl:when test="contains(@entity_inst_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_inst_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_inst_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_inst_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_inst_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="oper_expression_truncated"><xsl:choose><xsl:when test="string-length(@oper_expression)&lt;64"><xsl:value-of select="@oper_expression"/></xsl:when><xsl:when test="contains(@oper_expression,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@oper_expression,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@oper_expression,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="oper_expression_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($oper_expression_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_asym_gen>
      <PDBo:pdbx_struct_asym_gen rdf:about="{$base}/pdbx_struct_asym_gen/{$entity_inst_id_encoded},{$oper_expression_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_inst_id!=''">
	<PDBo:reference_to_pdbx_struct_entity_inst>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_entity_inst/">
	    <PDBo:referenced_by_pdbx_struct_asym_gen rdf:resource="{$base}/pdbx_struct_asym_gen/{$entity_inst_id_encoded},{$oper_expression_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_entity_inst>
	<!-- pdbx_struct_entity_instKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_asym_gen>
      </PDBo:has_pdbx_struct_asym_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_biol_funcCategory/PDBx:pdbx_struct_biol_func">
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_biol_func>
      <PDBo:pdbx_struct_biol_func rdf:about="{$base}/pdbx_struct_biol_func/{$biol_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@biol_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/">
	    <PDBo:referenced_by_pdbx_struct_biol_func rdf:resource="{$base}/pdbx_struct_biol_func/{$biol_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_biol_func>
      </PDBo:has_pdbx_struct_biol_func>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_chem_comp_diagnosticsCategory/PDBx:pdbx_struct_chem_comp_diagnostics">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_chem_comp_diagnostics>
      <PDBo:pdbx_struct_chem_comp_diagnostics rdf:about="{$base}/pdbx_struct_chem_comp_diagnostics/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_chem_comp_diagnostics>
      </PDBo:has_pdbx_struct_chem_comp_diagnostics>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_chem_comp_featureCategory/PDBx:pdbx_struct_chem_comp_feature">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_chem_comp_feature>
      <PDBo:pdbx_struct_chem_comp_feature rdf:about="{$base}/pdbx_struct_chem_comp_feature/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_chem_comp_feature>
      </PDBo:has_pdbx_struct_chem_comp_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_conn_angleCategory/PDBx:pdbx_struct_conn_angle">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_conn_angle>
      <PDBo:pdbx_struct_conn_angle rdf:about="{$base}/pdbx_struct_conn_angle/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_conn_angle>
      </PDBo:has_pdbx_struct_conn_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_entity_instCategory/PDBx:pdbx_struct_entity_inst">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_entity_inst>
      <PDBo:pdbx_struct_entity_inst rdf:about="{$base}/pdbx_struct_entity_inst/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_entity_inst>
      </PDBo:has_pdbx_struct_entity_inst>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_group_component_rangeCategory/PDBx:pdbx_struct_group_component_range">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_group_component_range>
      <PDBo:pdbx_struct_group_component_range rdf:about="{$base}/pdbx_struct_group_component_range/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:struct_group_id!=''">
	<PDBo:reference_to_pdbx_struct_group_list>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_group_list/{translate(PDBx:struct_group_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_struct_group_component_range rdf:resource="{$base}/pdbx_struct_group_component_range/{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_group_list>
	<!-- pdbx_struct_group_listKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_group_component_range>
      </PDBo:has_pdbx_struct_group_component_range>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_group_componentsCategory/PDBx:pdbx_struct_group_components">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_group_components>
      <PDBo:pdbx_struct_group_components rdf:about="{$base}/pdbx_struct_group_components/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:struct_group_id!=''">
	<PDBo:reference_to_pdbx_struct_group_list>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_group_list/{translate(PDBx:struct_group_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_struct_group_components rdf:resource="{$base}/pdbx_struct_group_components/{$ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_group_list>
	<!-- pdbx_struct_group_listKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_group_components>
      </PDBo:has_pdbx_struct_group_components>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_group_listCategory/PDBx:pdbx_struct_group_list">
      <xsl:variable name="struct_group_id_truncated"><xsl:choose><xsl:when test="string-length(@struct_group_id)&lt;64"><xsl:value-of select="@struct_group_id"/></xsl:when><xsl:when test="contains(@struct_group_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@struct_group_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@struct_group_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="struct_group_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($struct_group_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_group_list>
      <PDBo:pdbx_struct_group_list rdf:about="{$base}/pdbx_struct_group_list/{$struct_group_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_group_list>
      </PDBo:has_pdbx_struct_group_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_infoCategory/PDBx:pdbx_struct_info">
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="value_truncated"><xsl:choose><xsl:when test="string-length(@value)&lt;64"><xsl:value-of select="@value"/></xsl:when><xsl:when test="contains(@value,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@value,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@value,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="value_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($value_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_info>
      <PDBo:pdbx_struct_info rdf:about="{$base}/pdbx_struct_info/{$type_encoded},{$value_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_info>
      </PDBo:has_pdbx_struct_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_legacy_oper_listCategory/PDBx:pdbx_struct_legacy_oper_list">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_legacy_oper_list>
      <PDBo:pdbx_struct_legacy_oper_list rdf:about="{$base}/pdbx_struct_legacy_oper_list/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_legacy_oper_list>
      </PDBo:has_pdbx_struct_legacy_oper_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_linkCategory/PDBx:pdbx_struct_link">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_link>
      <PDBo:pdbx_struct_link rdf:about="{$base}/pdbx_struct_link/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_link>
      </PDBo:has_pdbx_struct_link>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_mod_residueCategory/PDBx:pdbx_struct_mod_residue">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_mod_residue>
      <PDBo:pdbx_struct_mod_residue rdf:about="{$base}/pdbx_struct_mod_residue/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_mod_residue>
      </PDBo:has_pdbx_struct_mod_residue>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_msym_genCategory/PDBx:pdbx_struct_msym_gen">
      <xsl:variable name="entity_inst_id_truncated"><xsl:choose><xsl:when test="string-length(@entity_inst_id)&lt;64"><xsl:value-of select="@entity_inst_id"/></xsl:when><xsl:when test="contains(@entity_inst_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entity_inst_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entity_inst_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entity_inst_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entity_inst_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="msym_id_truncated"><xsl:choose><xsl:when test="string-length(@msym_id)&lt;64"><xsl:value-of select="@msym_id"/></xsl:when><xsl:when test="contains(@msym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@msym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@msym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="msym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($msym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="oper_expression_truncated"><xsl:choose><xsl:when test="string-length(@oper_expression)&lt;64"><xsl:value-of select="@oper_expression"/></xsl:when><xsl:when test="contains(@oper_expression,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@oper_expression,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@oper_expression,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="oper_expression_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($oper_expression_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_msym_gen>
      <PDBo:pdbx_struct_msym_gen rdf:about="{$base}/pdbx_struct_msym_gen/{$entity_inst_id_encoded},{$msym_id_encoded},{$oper_expression_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entity_inst_id!=''">
	<PDBo:reference_to_pdbx_struct_entity_inst>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_entity_inst/">
	    <PDBo:referenced_by_pdbx_struct_msym_gen rdf:resource="{$base}/pdbx_struct_msym_gen/{$entity_inst_id_encoded},{$msym_id_encoded},{$oper_expression_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_entity_inst>
	<!-- pdbx_struct_entity_instKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_msym_gen>
      </PDBo:has_pdbx_struct_msym_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ncs_virus_genCategory/PDBx:pdbx_struct_ncs_virus_gen">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ncs_virus_gen>
      <PDBo:pdbx_struct_ncs_virus_gen rdf:about="{$base}/pdbx_struct_ncs_virus_gen/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/{translate(PDBx:asym_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_struct_ncs_virus_gen rdf:resource="{$base}/pdbx_struct_ncs_virus_gen/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_6_0 -->
      </xsl:if>
      <xsl:if test="PDBx:oper_id!=''">
	<PDBo:reference_to_struct_ncs_oper>
	  <rdf:Description rdf:about="{$base}/struct_ncs_oper/{translate(PDBx:oper_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_struct_ncs_virus_gen rdf:resource="{$base}/pdbx_struct_ncs_virus_gen/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ncs_oper>
	<!-- struct_ncs_operKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ncs_virus_gen>
      </PDBo:has_pdbx_struct_ncs_virus_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_oper_listCategory/PDBx:pdbx_struct_oper_list">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_oper_list>
      <PDBo:pdbx_struct_oper_list rdf:about="{$base}/pdbx_struct_oper_list/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_oper_list>
      </PDBo:has_pdbx_struct_oper_list>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_oper_list_depositor_infoCategory/PDBx:pdbx_struct_oper_list_depositor_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_oper_list_depositor_info>
      <PDBo:pdbx_struct_oper_list_depositor_info rdf:about="{$base}/pdbx_struct_oper_list_depositor_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_oper_list_depositor_info>
      </PDBo:has_pdbx_struct_oper_list_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_pack_genCategory/PDBx:pdbx_struct_pack_gen">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="symmetry_truncated"><xsl:choose><xsl:when test="string-length(@symmetry)&lt;64"><xsl:value-of select="@symmetry"/></xsl:when><xsl:when test="contains(@symmetry,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@symmetry,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@symmetry,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="symmetry_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($symmetry_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_pack_gen>
      <PDBo:pdbx_struct_pack_gen rdf:about="{$base}/pdbx_struct_pack_gen/{$asym_id_encoded},{$id_encoded},{$symmetry_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_pack_gen>
      </PDBo:has_pdbx_struct_pack_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_deletionCategory/PDBx:pdbx_struct_ref_seq_deletion">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_deletion>
      <PDBo:pdbx_struct_ref_seq_deletion rdf:about="{$base}/pdbx_struct_ref_seq_deletion/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_deletion>
      </PDBo:has_pdbx_struct_ref_seq_deletion>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_depositor_infoCategory/PDBx:pdbx_struct_ref_seq_depositor_info">
      <xsl:variable name="ref_id_truncated"><xsl:choose><xsl:when test="string-length(@ref_id)&lt;64"><xsl:value-of select="@ref_id"/></xsl:when><xsl:when test="contains(@ref_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ref_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ref_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ref_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ref_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_depositor_info>
      <PDBo:pdbx_struct_ref_seq_depositor_info rdf:about="{$base}/pdbx_struct_ref_seq_depositor_info/{$ref_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_depositor_info>
      </PDBo:has_pdbx_struct_ref_seq_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_dif_depositor_infoCategory/PDBx:pdbx_struct_ref_seq_dif_depositor_info">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_dif_depositor_info>
      <PDBo:pdbx_struct_ref_seq_dif_depositor_info rdf:about="{$base}/pdbx_struct_ref_seq_dif_depositor_info/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_dif_depositor_info>
      </PDBo:has_pdbx_struct_ref_seq_dif_depositor_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_featureCategory/PDBx:pdbx_struct_ref_seq_feature">
      <xsl:variable name="feature_id_truncated"><xsl:choose><xsl:when test="string-length(@feature_id)&lt;64"><xsl:value-of select="@feature_id"/></xsl:when><xsl:when test="contains(@feature_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_feature>
      <PDBo:pdbx_struct_ref_seq_feature rdf:about="{$base}/pdbx_struct_ref_seq_feature/{$feature_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_feature>
      </PDBo:has_pdbx_struct_ref_seq_feature>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_feature_propCategory/PDBx:pdbx_struct_ref_seq_feature_prop">
      <xsl:variable name="feature_id_truncated"><xsl:choose><xsl:when test="string-length(@feature_id)&lt;64"><xsl:value-of select="@feature_id"/></xsl:when><xsl:when test="contains(@feature_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@feature_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@feature_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="feature_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($feature_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="property_id_truncated"><xsl:choose><xsl:when test="string-length(@property_id)&lt;64"><xsl:value-of select="@property_id"/></xsl:when><xsl:when test="contains(@property_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@property_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@property_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="property_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($property_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_feature_prop>
      <PDBo:pdbx_struct_ref_seq_feature_prop rdf:about="{$base}/pdbx_struct_ref_seq_feature_prop/{$feature_id_encoded},{$property_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@feature_id!=''">
	<PDBo:reference_to_pdbx_struct_ref_seq_feature>
	  <rdf:Description rdf:about="{$base}/pdbx_struct_ref_seq_feature/">
	    <PDBo:referenced_by_pdbx_struct_ref_seq_feature_prop rdf:resource="{$base}/pdbx_struct_ref_seq_feature_prop/{$feature_id_encoded},{$property_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_struct_ref_seq_feature>
	<!-- pdbx_struct_ref_seq_featureKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_feature_prop>
      </PDBo:has_pdbx_struct_ref_seq_feature_prop>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_ref_seq_insertionCategory/PDBx:pdbx_struct_ref_seq_insertion">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_ref_seq_insertion>
      <PDBo:pdbx_struct_ref_seq_insertion rdf:about="{$base}/pdbx_struct_ref_seq_insertion/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_ref_seq_insertion>
      </PDBo:has_pdbx_struct_ref_seq_insertion>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_sheet_hbondCategory/PDBx:pdbx_struct_sheet_hbond">
      <xsl:variable name="range_id_1_truncated"><xsl:choose><xsl:when test="string-length(@range_id_1)&lt;64"><xsl:value-of select="@range_id_1"/></xsl:when><xsl:when test="contains(@range_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="range_id_2_truncated"><xsl:choose><xsl:when test="string-length(@range_id_2)&lt;64"><xsl:value-of select="@range_id_2"/></xsl:when><xsl:when test="contains(@range_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sheet_id_truncated"><xsl:choose><xsl:when test="string-length(@sheet_id)&lt;64"><xsl:value-of select="@sheet_id"/></xsl:when><xsl:when test="contains(@sheet_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sheet_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sheet_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sheet_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sheet_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_sheet_hbond>
      <PDBo:pdbx_struct_sheet_hbond rdf:about="{$base}/pdbx_struct_sheet_hbond/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@sheet_id!=''">
	<PDBo:reference_to_struct_sheet>
	  <rdf:Description rdf:about="{$base}/struct_sheet/">
	    <PDBo:referenced_by_pdbx_struct_sheet_hbond rdf:resource="{$base}/pdbx_struct_sheet_hbond/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_sheet>
	<!-- struct_sheetKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_sheet_hbond>
      </PDBo:has_pdbx_struct_sheet_hbond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_struct_special_symmetryCategory/PDBx:pdbx_struct_special_symmetry">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_struct_special_symmetry>
      <PDBo:pdbx_struct_special_symmetry rdf:about="{$base}/pdbx_struct_special_symmetry/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_struct_special_symmetry>
      </PDBo:has_pdbx_struct_special_symmetry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_sugar_phosphate_geometryCategory/PDBx:pdbx_sugar_phosphate_geometry">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_sugar_phosphate_geometry>
      <PDBo:pdbx_sugar_phosphate_geometry rdf:about="{$base}/pdbx_sugar_phosphate_geometry/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_sugar_phosphate_geometry>
      </PDBo:has_pdbx_sugar_phosphate_geometry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_summary_flagsCategory/PDBx:pdbx_summary_flags">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="flag_id_truncated"><xsl:choose><xsl:when test="string-length(@flag_id)&lt;64"><xsl:value-of select="@flag_id"/></xsl:when><xsl:when test="contains(@flag_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@flag_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@flag_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="flag_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($flag_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_summary_flags>
      <PDBo:pdbx_summary_flags rdf:about="{$base}/pdbx_summary_flags/{$entry_id_encoded},{$flag_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_summary_flags rdf:resource="{$base}/pdbx_summary_flags/{$entry_id_encoded},{$flag_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_74_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_summary_flags>
      </PDBo:has_pdbx_summary_flags>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_supporting_exp_data_setCategory/PDBx:pdbx_supporting_exp_data_set">
      <xsl:variable name="ordinal_truncated"><xsl:choose><xsl:when test="string-length(@ordinal)&lt;64"><xsl:value-of select="@ordinal"/></xsl:when><xsl:when test="contains(@ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_supporting_exp_data_set>
      <PDBo:pdbx_supporting_exp_data_set rdf:about="{$base}/pdbx_supporting_exp_data_set/{$ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_supporting_exp_data_set>
      </PDBo:has_pdbx_supporting_exp_data_set>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_tableinfoCategory/PDBx:pdbx_tableinfo">
      <xsl:variable name="tablename_truncated"><xsl:choose><xsl:when test="string-length(@tablename)&lt;64"><xsl:value-of select="@tablename"/></xsl:when><xsl:when test="contains(@tablename,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@tablename,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@tablename,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="tablename_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($tablename_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_tableinfo>
      <PDBo:pdbx_tableinfo rdf:about="{$base}/pdbx_tableinfo/{$tablename_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_tableinfo>
      </PDBo:has_pdbx_tableinfo>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_trna_infoCategory/PDBx:pdbx_trna_info">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_trna_info>
      <PDBo:pdbx_trna_info rdf:about="{$base}/pdbx_trna_info/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_trna_info>
      </PDBo:has_pdbx_trna_info>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_unobs_or_zero_occ_atomsCategory/PDBx:pdbx_unobs_or_zero_occ_atoms">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_unobs_or_zero_occ_atoms>
      <PDBo:pdbx_unobs_or_zero_occ_atoms rdf:about="{$base}/pdbx_unobs_or_zero_occ_atoms/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:auth_comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:auth_comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_unobs_or_zero_occ_atoms rdf:resource="{$base}/pdbx_unobs_or_zero_occ_atoms/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_21_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_unobs_or_zero_occ_atoms>
      </PDBo:has_pdbx_unobs_or_zero_occ_atoms>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_unobs_or_zero_occ_residuesCategory/PDBx:pdbx_unobs_or_zero_occ_residues">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_unobs_or_zero_occ_residues>
      <PDBo:pdbx_unobs_or_zero_occ_residues rdf:about="{$base}/pdbx_unobs_or_zero_occ_residues/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:auth_comp_id!=''">
	<PDBo:reference_to_chem_comp>
	  <rdf:Description rdf:about="{$base}/chem_comp/{translate(PDBx:auth_comp_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_unobs_or_zero_occ_residues rdf:resource="{$base}/pdbx_unobs_or_zero_occ_residues/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_chem_comp>
	<!-- chem_compKeyref_0_0_22_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_unobs_or_zero_occ_residues>
      </PDBo:has_pdbx_unobs_or_zero_occ_residues>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_unpairCategory/PDBx:pdbx_unpair">
      <xsl:variable name="chain_id_truncated"><xsl:choose><xsl:when test="string-length(@chain_id)&lt;64"><xsl:value-of select="@chain_id"/></xsl:when><xsl:when test="contains(@chain_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@chain_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@chain_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="chain_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($chain_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_unpair>
      <PDBo:pdbx_unpair rdf:about="{$base}/pdbx_unpair/{$chain_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_unpair>
      </PDBo:has_pdbx_unpair>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_val_angleCategory/PDBx:pdbx_val_angle">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_val_angle>
      <PDBo:pdbx_val_angle rdf:about="{$base}/pdbx_val_angle/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_val_angle>
      </PDBo:has_pdbx_val_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_val_bondCategory/PDBx:pdbx_val_bond">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_val_bond>
      <PDBo:pdbx_val_bond rdf:about="{$base}/pdbx_val_bond/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_val_bond>
      </PDBo:has_pdbx_val_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_val_chiralCategory/PDBx:pdbx_val_chiral">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_val_chiral>
      <PDBo:pdbx_val_chiral rdf:about="{$base}/pdbx_val_chiral/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_val_chiral>
      </PDBo:has_pdbx_val_chiral>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_val_contactCategory/PDBx:pdbx_val_contact">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_val_contact>
      <PDBo:pdbx_val_contact rdf:about="{$base}/pdbx_val_contact/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_val_contact>
      </PDBo:has_pdbx_val_contact>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_val_sym_contactCategory/PDBx:pdbx_val_sym_contact">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_val_sym_contact>
      <PDBo:pdbx_val_sym_contact rdf:about="{$base}/pdbx_val_sym_contact/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_val_sym_contact>
      </PDBo:has_pdbx_val_sym_contact>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_chiralCategory/PDBx:pdbx_validate_chiral">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_chiral>
      <PDBo:pdbx_validate_chiral rdf:about="{$base}/pdbx_validate_chiral/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_chiral>
      </PDBo:has_pdbx_validate_chiral>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_close_contactCategory/PDBx:pdbx_validate_close_contact">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_close_contact>
      <PDBo:pdbx_validate_close_contact rdf:about="{$base}/pdbx_validate_close_contact/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_close_contact>
      </PDBo:has_pdbx_validate_close_contact>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_main_chain_planeCategory/PDBx:pdbx_validate_main_chain_plane">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_main_chain_plane>
      <PDBo:pdbx_validate_main_chain_plane rdf:about="{$base}/pdbx_validate_main_chain_plane/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_main_chain_plane>
      </PDBo:has_pdbx_validate_main_chain_plane>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_peptide_omegaCategory/PDBx:pdbx_validate_peptide_omega">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_peptide_omega>
      <PDBo:pdbx_validate_peptide_omega rdf:about="{$base}/pdbx_validate_peptide_omega/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_peptide_omega>
      </PDBo:has_pdbx_validate_peptide_omega>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_planesCategory/PDBx:pdbx_validate_planes">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_planes>
      <PDBo:pdbx_validate_planes rdf:about="{$base}/pdbx_validate_planes/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_planes>
      </PDBo:has_pdbx_validate_planes>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_planes_atomCategory/PDBx:pdbx_validate_planes_atom">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_planes_atom>
      <PDBo:pdbx_validate_planes_atom rdf:about="{$base}/pdbx_validate_planes_atom/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:plane_id!=''">
	<PDBo:reference_to_pdbx_validate_planes>
	  <rdf:Description rdf:about="{$base}/pdbx_validate_planes/{translate(PDBx:plane_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_validate_planes_atom rdf:resource="{$base}/pdbx_validate_planes_atom/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_validate_planes>
	<!-- pdbx_validate_planesKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_planes_atom>
      </PDBo:has_pdbx_validate_planes_atom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_polymer_linkageCategory/PDBx:pdbx_validate_polymer_linkage">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_polymer_linkage>
      <PDBo:pdbx_validate_polymer_linkage rdf:about="{$base}/pdbx_validate_polymer_linkage/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_polymer_linkage>
      </PDBo:has_pdbx_validate_polymer_linkage>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_rmsd_angleCategory/PDBx:pdbx_validate_rmsd_angle">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_rmsd_angle>
      <PDBo:pdbx_validate_rmsd_angle rdf:about="{$base}/pdbx_validate_rmsd_angle/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_rmsd_angle>
      </PDBo:has_pdbx_validate_rmsd_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_rmsd_bondCategory/PDBx:pdbx_validate_rmsd_bond">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_rmsd_bond>
      <PDBo:pdbx_validate_rmsd_bond rdf:about="{$base}/pdbx_validate_rmsd_bond/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_rmsd_bond>
      </PDBo:has_pdbx_validate_rmsd_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_symm_contactCategory/PDBx:pdbx_validate_symm_contact">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_symm_contact>
      <PDBo:pdbx_validate_symm_contact rdf:about="{$base}/pdbx_validate_symm_contact/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_symm_contact>
      </PDBo:has_pdbx_validate_symm_contact>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_validate_torsionCategory/PDBx:pdbx_validate_torsion">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_validate_torsion>
      <PDBo:pdbx_validate_torsion rdf:about="{$base}/pdbx_validate_torsion/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_validate_torsion>
      </PDBo:has_pdbx_validate_torsion>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_versionCategory/PDBx:pdbx_version">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="major_version_truncated"><xsl:choose><xsl:when test="string-length(@major_version)&lt;64"><xsl:value-of select="@major_version"/></xsl:when><xsl:when test="contains(@major_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@major_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@major_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="major_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($major_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="minor_version_truncated"><xsl:choose><xsl:when test="string-length(@minor_version)&lt;64"><xsl:value-of select="@minor_version"/></xsl:when><xsl:when test="contains(@minor_version,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@minor_version,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@minor_version,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="minor_version_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($minor_version_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="revision_type_truncated"><xsl:choose><xsl:when test="string-length(@revision_type)&lt;64"><xsl:value-of select="@revision_type"/></xsl:when><xsl:when test="contains(@revision_type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@revision_type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@revision_type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="revision_type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($revision_type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_version>
      <PDBo:pdbx_version rdf:about="{$base}/pdbx_version/{$entry_id_encoded},{$major_version_encoded},{$minor_version_encoded},{$revision_type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_pdbx_version rdf:resource="{$base}/pdbx_version/{$entry_id_encoded},{$major_version_encoded},{$minor_version_encoded},{$revision_type_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_75_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_version>
      </PDBo:has_pdbx_version>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_view_categoryCategory/PDBx:pdbx_view_category">
      <xsl:variable name="category_id_truncated"><xsl:choose><xsl:when test="string-length(@category_id)&lt;64"><xsl:value-of select="@category_id"/></xsl:when><xsl:when test="contains(@category_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@category_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@category_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="category_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($category_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_view_category>
      <PDBo:pdbx_view_category rdf:about="{$base}/pdbx_view_category/{$category_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:view_group_id!=''">
	<PDBo:reference_to_pdbx_view_category_group>
	  <rdf:Description rdf:about="{$base}/pdbx_view_category_group/{translate(PDBx:view_group_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_view_category rdf:resource="{$base}/pdbx_view_category/{$category_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_view_category_group>
	<!-- pdbx_view_category_groupKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_view_category>
      </PDBo:has_pdbx_view_category>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_view_category_groupCategory/PDBx:pdbx_view_category_group">
      <xsl:variable name="view_group_id_truncated"><xsl:choose><xsl:when test="string-length(@view_group_id)&lt;64"><xsl:value-of select="@view_group_id"/></xsl:when><xsl:when test="contains(@view_group_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@view_group_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@view_group_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="view_group_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($view_group_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_view_category_group>
      <PDBo:pdbx_view_category_group rdf:about="{$base}/pdbx_view_category_group/{$view_group_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_view_category_group>
      </PDBo:has_pdbx_view_category_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_view_itemCategory/PDBx:pdbx_view_item">
      <xsl:variable name="item_name_truncated"><xsl:choose><xsl:when test="string-length(@item_name)&lt;64"><xsl:value-of select="@item_name"/></xsl:when><xsl:when test="contains(@item_name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@item_name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@item_name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="item_name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($item_name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_view_item>
      <PDBo:pdbx_view_item rdf:about="{$base}/pdbx_view_item/{$item_name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:category_id!=''">
	<PDBo:reference_to_pdbx_view_category>
	  <rdf:Description rdf:about="{$base}/pdbx_view_category/{translate(PDBx:category_id,' ^','__')}">
	    <PDBo:referenced_by_pdbx_view_item rdf:resource="{$base}/pdbx_view_item/{$item_name_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_pdbx_view_category>
	<!-- pdbx_view_categoryKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_view_item>
      </PDBo:has_pdbx_view_item>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_virtual_angleCategory/PDBx:pdbx_virtual_angle">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_3)&lt;64"><xsl:value-of select="@atom_site_id_3"/></xsl:when><xsl:when test="contains(@atom_site_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_3_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_3)&lt;64"><xsl:value-of select="@site_symmetry_3"/></xsl:when><xsl:when test="contains(@site_symmetry_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_virtual_angle>
      <PDBo:pdbx_virtual_angle rdf:about="{$base}/pdbx_virtual_angle/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$atom_site_id_3_encoded},{$model_id_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded},{$site_symmetry_3_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_virtual_angle>
      </PDBo:has_pdbx_virtual_angle>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_virtual_bondCategory/PDBx:pdbx_virtual_bond">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_virtual_bond>
      <PDBo:pdbx_virtual_bond rdf:about="{$base}/pdbx_virtual_bond/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$model_id_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_virtual_bond>
      </PDBo:has_pdbx_virtual_bond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_virtual_torsionCategory/PDBx:pdbx_virtual_torsion">
      <xsl:variable name="atom_site_id_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_1)&lt;64"><xsl:value-of select="@atom_site_id_1"/></xsl:when><xsl:when test="contains(@atom_site_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_2)&lt;64"><xsl:value-of select="@atom_site_id_2"/></xsl:when><xsl:when test="contains(@atom_site_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_3_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_3)&lt;64"><xsl:value-of select="@atom_site_id_3"/></xsl:when><xsl:when test="contains(@atom_site_id_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_site_id_4_truncated"><xsl:choose><xsl:when test="string-length(@atom_site_id_4)&lt;64"><xsl:value-of select="@atom_site_id_4"/></xsl:when><xsl:when test="contains(@atom_site_id_4,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_site_id_4,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_site_id_4,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_site_id_4_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_site_id_4_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="model_id_truncated"><xsl:choose><xsl:when test="string-length(@model_id)&lt;64"><xsl:value-of select="@model_id"/></xsl:when><xsl:when test="contains(@model_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@model_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@model_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="model_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($model_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_1_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_1)&lt;64"><xsl:value-of select="@site_symmetry_1"/></xsl:when><xsl:when test="contains(@site_symmetry_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_2_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_2)&lt;64"><xsl:value-of select="@site_symmetry_2"/></xsl:when><xsl:when test="contains(@site_symmetry_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_3_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_3)&lt;64"><xsl:value-of select="@site_symmetry_3"/></xsl:when><xsl:when test="contains(@site_symmetry_3,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_3,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_3,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_3_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_3_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_symmetry_4_truncated"><xsl:choose><xsl:when test="string-length(@site_symmetry_4)&lt;64"><xsl:value-of select="@site_symmetry_4"/></xsl:when><xsl:when test="contains(@site_symmetry_4,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_symmetry_4,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_symmetry_4,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_symmetry_4_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_symmetry_4_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_virtual_torsion>
      <PDBo:pdbx_virtual_torsion rdf:about="{$base}/pdbx_virtual_torsion/{$atom_site_id_1_encoded},{$atom_site_id_2_encoded},{$atom_site_id_3_encoded},{$atom_site_id_4_encoded},{$model_id_encoded},{$site_symmetry_1_encoded},{$site_symmetry_2_encoded},{$site_symmetry_3_encoded},{$site_symmetry_4_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_virtual_torsion>
      </PDBo:has_pdbx_virtual_torsion>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:pdbx_xplor_fileCategory/PDBx:pdbx_xplor_file">
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="serial_no_truncated"><xsl:choose><xsl:when test="string-length(@serial_no)&lt;64"><xsl:value-of select="@serial_no"/></xsl:when><xsl:when test="contains(@serial_no,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@serial_no,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@serial_no,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="serial_no_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($serial_no_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_pdbx_xplor_file>
      <PDBo:pdbx_xplor_file rdf:about="{$base}/pdbx_xplor_file/{$pdbx_refine_id_encoded},{$serial_no_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:pdbx_xplor_file>
      </PDBo:has_pdbx_xplor_file>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasingCategory/PDBx:phasing">
      <xsl:variable name="method_truncated"><xsl:choose><xsl:when test="string-length(@method)&lt;64"><xsl:value-of select="@method"/></xsl:when><xsl:when test="contains(@method,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@method,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@method,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="method_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($method_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing>
      <PDBo:phasing rdf:about="{$base}/phasing/{$method_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing>
      </PDBo:has_phasing>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MADCategory/PDBx:phasing_MAD">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MAD>
      <PDBo:phasing_MAD rdf:about="{$base}/phasing_MAD/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_phasing_MAD rdf:resource="{$base}/phasing_MAD/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_76_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MAD>
      </PDBo:has_phasing_MAD>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MAD_clustCategory/PDBx:phasing_MAD_clust">
      <xsl:variable name="expt_id_truncated"><xsl:choose><xsl:when test="string-length(@expt_id)&lt;64"><xsl:value-of select="@expt_id"/></xsl:when><xsl:when test="contains(@expt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@expt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@expt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="expt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($expt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MAD_clust>
      <PDBo:phasing_MAD_clust rdf:about="{$base}/phasing_MAD_clust/{$expt_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@expt_id!=''">
	<PDBo:reference_to_phasing_MAD_expt>
	  <rdf:Description rdf:about="{$base}/phasing_MAD_expt/">
	    <PDBo:referenced_by_phasing_MAD_clust rdf:resource="{$base}/phasing_MAD_clust/{$expt_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MAD_expt>
	<!-- phasing_MAD_exptKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MAD_clust>
      </PDBo:has_phasing_MAD_clust>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MAD_exptCategory/PDBx:phasing_MAD_expt">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MAD_expt>
      <PDBo:phasing_MAD_expt rdf:about="{$base}/phasing_MAD_expt/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MAD_expt>
      </PDBo:has_phasing_MAD_expt>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MAD_ratioCategory/PDBx:phasing_MAD_ratio">
      <xsl:variable name="clust_id_truncated"><xsl:choose><xsl:when test="string-length(@clust_id)&lt;64"><xsl:value-of select="@clust_id"/></xsl:when><xsl:when test="contains(@clust_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@clust_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@clust_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="clust_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($clust_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="expt_id_truncated"><xsl:choose><xsl:when test="string-length(@expt_id)&lt;64"><xsl:value-of select="@expt_id"/></xsl:when><xsl:when test="contains(@expt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@expt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@expt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="expt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($expt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="wavelength_1_truncated"><xsl:choose><xsl:when test="string-length(@wavelength_1)&lt;64"><xsl:value-of select="@wavelength_1"/></xsl:when><xsl:when test="contains(@wavelength_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@wavelength_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@wavelength_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="wavelength_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($wavelength_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="wavelength_2_truncated"><xsl:choose><xsl:when test="string-length(@wavelength_2)&lt;64"><xsl:value-of select="@wavelength_2"/></xsl:when><xsl:when test="contains(@wavelength_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@wavelength_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@wavelength_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="wavelength_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($wavelength_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MAD_ratio>
      <PDBo:phasing_MAD_ratio rdf:about="{$base}/phasing_MAD_ratio/{$clust_id_encoded},{$expt_id_encoded},{$wavelength_1_encoded},{$wavelength_2_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@expt_id!=''">
	<PDBo:reference_to_phasing_MAD_expt>
	  <rdf:Description rdf:about="{$base}/phasing_MAD_expt/">
	    <PDBo:referenced_by_phasing_MAD_ratio rdf:resource="{$base}/phasing_MAD_ratio/{$clust_id_encoded},{$expt_id_encoded},{$wavelength_1_encoded},{$wavelength_2_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MAD_expt>
	<!-- phasing_MAD_exptKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MAD_ratio>
      </PDBo:has_phasing_MAD_ratio>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MAD_setCategory/PDBx:phasing_MAD_set">
      <xsl:variable name="clust_id_truncated"><xsl:choose><xsl:when test="string-length(@clust_id)&lt;64"><xsl:value-of select="@clust_id"/></xsl:when><xsl:when test="contains(@clust_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@clust_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@clust_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="clust_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($clust_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="expt_id_truncated"><xsl:choose><xsl:when test="string-length(@expt_id)&lt;64"><xsl:value-of select="@expt_id"/></xsl:when><xsl:when test="contains(@expt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@expt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@expt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="expt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($expt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="set_id_truncated"><xsl:choose><xsl:when test="string-length(@set_id)&lt;64"><xsl:value-of select="@set_id"/></xsl:when><xsl:when test="contains(@set_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@set_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@set_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="set_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($set_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="wavelength_truncated"><xsl:choose><xsl:when test="string-length(@wavelength)&lt;64"><xsl:value-of select="@wavelength"/></xsl:when><xsl:when test="contains(@wavelength,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@wavelength,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@wavelength,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="wavelength_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($wavelength_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MAD_set>
      <PDBo:phasing_MAD_set rdf:about="{$base}/phasing_MAD_set/{$clust_id_encoded},{$expt_id_encoded},{$set_id_encoded},{$wavelength_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@expt_id!=''">
	<PDBo:reference_to_phasing_MAD_expt>
	  <rdf:Description rdf:about="{$base}/phasing_MAD_expt/">
	    <PDBo:referenced_by_phasing_MAD_set rdf:resource="{$base}/phasing_MAD_set/{$clust_id_encoded},{$expt_id_encoded},{$set_id_encoded},{$wavelength_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MAD_expt>
	<!-- phasing_MAD_exptKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:if test="@set_id!=''">
	<PDBo:reference_to_phasing_set>
	  <rdf:Description rdf:about="{$base}/phasing_set/">
	    <PDBo:referenced_by_phasing_MAD_set rdf:resource="{$base}/phasing_MAD_set/{$clust_id_encoded},{$expt_id_encoded},{$set_id_encoded},{$wavelength_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_set>
	<!-- phasing_setKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MAD_set>
      </PDBo:has_phasing_MAD_set>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIRCategory/PDBx:phasing_MIR">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR>
      <PDBo:phasing_MIR rdf:about="{$base}/phasing_MIR/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_phasing_MIR rdf:resource="{$base}/phasing_MIR/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_77_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR>
      </PDBo:has_phasing_MIR>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIR_derCategory/PDBx:phasing_MIR_der">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR_der>
      <PDBo:phasing_MIR_der rdf:about="{$base}/phasing_MIR_der/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:der_set_id!=''">
	<PDBo:reference_to_phasing_set>
	  <rdf:Description rdf:about="{$base}/phasing_set/{translate(PDBx:der_set_id,' ^','__')}">
	    <PDBo:referenced_by_phasing_MIR_der rdf:resource="{$base}/phasing_MIR_der/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_set>
	<!-- phasing_setKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR_der>
      </PDBo:has_phasing_MIR_der>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIR_der_reflnCategory/PDBx:phasing_MIR_der_refln">
      <xsl:variable name="der_id_truncated"><xsl:choose><xsl:when test="string-length(@der_id)&lt;64"><xsl:value-of select="@der_id"/></xsl:when><xsl:when test="contains(@der_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@der_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@der_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="der_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($der_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="set_id_truncated"><xsl:choose><xsl:when test="string-length(@set_id)&lt;64"><xsl:value-of select="@set_id"/></xsl:when><xsl:when test="contains(@set_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@set_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@set_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="set_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($set_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR_der_refln>
      <PDBo:phasing_MIR_der_refln rdf:about="{$base}/phasing_MIR_der_refln/{$der_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded},{$set_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@der_id!=''">
	<PDBo:reference_to_phasing_MIR_der>
	  <rdf:Description rdf:about="{$base}/phasing_MIR_der/">
	    <PDBo:referenced_by_phasing_MIR_der_refln rdf:resource="{$base}/phasing_MIR_der_refln/{$der_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded},{$set_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MIR_der>
	<!-- phasing_MIR_derKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:if test="@set_id!=''">
	<PDBo:reference_to_phasing_set>
	  <rdf:Description rdf:about="{$base}/phasing_set/">
	    <PDBo:referenced_by_phasing_MIR_der_refln rdf:resource="{$base}/phasing_MIR_der_refln/{$der_id_encoded},{$index_h_encoded},{$index_k_encoded},{$index_l_encoded},{$set_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_set>
	<!-- phasing_setKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR_der_refln>
      </PDBo:has_phasing_MIR_der_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIR_der_shellCategory/PDBx:phasing_MIR_der_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="der_id_truncated"><xsl:choose><xsl:when test="string-length(@der_id)&lt;64"><xsl:value-of select="@der_id"/></xsl:when><xsl:when test="contains(@der_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@der_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@der_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="der_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($der_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR_der_shell>
      <PDBo:phasing_MIR_der_shell rdf:about="{$base}/phasing_MIR_der_shell/{$d_res_high_encoded},{$d_res_low_encoded},{$der_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@der_id!=''">
	<PDBo:reference_to_phasing_MIR_der>
	  <rdf:Description rdf:about="{$base}/phasing_MIR_der/">
	    <PDBo:referenced_by_phasing_MIR_der_shell rdf:resource="{$base}/phasing_MIR_der_shell/{$d_res_high_encoded},{$d_res_low_encoded},{$der_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MIR_der>
	<!-- phasing_MIR_derKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR_der_shell>
      </PDBo:has_phasing_MIR_der_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIR_der_siteCategory/PDBx:phasing_MIR_der_site">
      <xsl:variable name="der_id_truncated"><xsl:choose><xsl:when test="string-length(@der_id)&lt;64"><xsl:value-of select="@der_id"/></xsl:when><xsl:when test="contains(@der_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@der_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@der_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="der_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($der_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR_der_site>
      <PDBo:phasing_MIR_der_site rdf:about="{$base}/phasing_MIR_der_site/{$der_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@der_id!=''">
	<PDBo:reference_to_phasing_MIR_der>
	  <rdf:Description rdf:about="{$base}/phasing_MIR_der/">
	    <PDBo:referenced_by_phasing_MIR_der_site rdf:resource="{$base}/phasing_MIR_der_site/{$der_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_MIR_der>
	<!-- phasing_MIR_derKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR_der_site>
      </PDBo:has_phasing_MIR_der_site>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_MIR_shellCategory/PDBx:phasing_MIR_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="d_res_low_truncated"><xsl:choose><xsl:when test="string-length(@d_res_low)&lt;64"><xsl:value-of select="@d_res_low"/></xsl:when><xsl:when test="contains(@d_res_low,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_low,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_low,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_low_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_low_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_MIR_shell>
      <PDBo:phasing_MIR_shell rdf:about="{$base}/phasing_MIR_shell/{$d_res_high_encoded},{$d_res_low_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_MIR_shell>
      </PDBo:has_phasing_MIR_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_averagingCategory/PDBx:phasing_averaging">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_averaging>
      <PDBo:phasing_averaging rdf:about="{$base}/phasing_averaging/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_phasing_averaging rdf:resource="{$base}/phasing_averaging/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_78_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_averaging>
      </PDBo:has_phasing_averaging>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_isomorphousCategory/PDBx:phasing_isomorphous">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_isomorphous>
      <PDBo:phasing_isomorphous rdf:about="{$base}/phasing_isomorphous/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_phasing_isomorphous rdf:resource="{$base}/phasing_isomorphous/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_79_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_isomorphous>
      </PDBo:has_phasing_isomorphous>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_setCategory/PDBx:phasing_set">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_set>
      <PDBo:phasing_set rdf:about="{$base}/phasing_set/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_set>
      </PDBo:has_phasing_set>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:phasing_set_reflnCategory/PDBx:phasing_set_refln">
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="set_id_truncated"><xsl:choose><xsl:when test="string-length(@set_id)&lt;64"><xsl:value-of select="@set_id"/></xsl:when><xsl:when test="contains(@set_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@set_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@set_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="set_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($set_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_phasing_set_refln>
      <PDBo:phasing_set_refln rdf:about="{$base}/phasing_set_refln/{$index_h_encoded},{$index_k_encoded},{$index_l_encoded},{$set_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@set_id!=''">
	<PDBo:reference_to_phasing_set>
	  <rdf:Description rdf:about="{$base}/phasing_set/">
	    <PDBo:referenced_by_phasing_set_refln rdf:resource="{$base}/phasing_set_refln/{$index_h_encoded},{$index_k_encoded},{$index_l_encoded},{$set_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_phasing_set>
	<!-- phasing_setKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:phasing_set_refln>
      </PDBo:has_phasing_set_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:publCategory/PDBx:publ">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_publ>
      <PDBo:publ rdf:about="{$base}/publ/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_publ rdf:resource="{$base}/publ/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_80_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:publ>
      </PDBo:has_publ>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:publ_authorCategory/PDBx:publ_author">
      <xsl:variable name="name_truncated"><xsl:choose><xsl:when test="string-length(@name)&lt;64"><xsl:value-of select="@name"/></xsl:when><xsl:when test="contains(@name,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@name,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@name,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="name_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($name_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_publ_author>
      <PDBo:publ_author rdf:about="{$base}/publ_author/{$name_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:publ_author>
      </PDBo:has_publ_author>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:publ_bodyCategory/PDBx:publ_body">
      <xsl:variable name="element_truncated"><xsl:choose><xsl:when test="string-length(@element)&lt;64"><xsl:value-of select="@element"/></xsl:when><xsl:when test="contains(@element,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@element,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@element,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="element_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($element_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_truncated"><xsl:choose><xsl:when test="string-length(@label)&lt;64"><xsl:value-of select="@label"/></xsl:when><xsl:when test="contains(@label,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_publ_body>
      <PDBo:publ_body rdf:about="{$base}/publ_body/{$element_encoded},{$label_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:publ_body>
      </PDBo:has_publ_body>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:publ_manuscript_inclCategory/PDBx:publ_manuscript_incl">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_publ_manuscript_incl>
      <PDBo:publ_manuscript_incl rdf:about="{$base}/publ_manuscript_incl/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_publ_manuscript_incl rdf:resource="{$base}/publ_manuscript_incl/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_81_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:publ_manuscript_incl>
      </PDBo:has_publ_manuscript_incl>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refineCategory/PDBx:refine">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine>
      <PDBo:refine rdf:about="{$base}/refine/{$entry_id_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_refine rdf:resource="{$base}/refine/{$entry_id_encoded},{$pdbx_refine_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_82_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine>
      </PDBo:has_refine>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_B_isoCategory/PDBx:refine_B_iso">
      <xsl:variable name="class_truncated"><xsl:choose><xsl:when test="string-length(@class)&lt;64"><xsl:value-of select="@class"/></xsl:when><xsl:when test="contains(@class,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@class,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@class,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="class_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($class_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_B_iso>
      <PDBo:refine_B_iso rdf:about="{$base}/refine_B_iso/{$class_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_B_iso>
      </PDBo:has_refine_B_iso>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_analyzeCategory/PDBx:refine_analyze">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_analyze>
      <PDBo:refine_analyze rdf:about="{$base}/refine_analyze/{$entry_id_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_refine_analyze rdf:resource="{$base}/refine_analyze/{$entry_id_encoded},{$pdbx_refine_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_83_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_analyze>
      </PDBo:has_refine_analyze>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_funct_minimizedCategory/PDBx:refine_funct_minimized">
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_funct_minimized>
      <PDBo:refine_funct_minimized rdf:about="{$base}/refine_funct_minimized/{$pdbx_refine_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_funct_minimized>
      </PDBo:has_refine_funct_minimized>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_histCategory/PDBx:refine_hist">
      <xsl:variable name="cycle_id_truncated"><xsl:choose><xsl:when test="string-length(@cycle_id)&lt;64"><xsl:value-of select="@cycle_id"/></xsl:when><xsl:when test="contains(@cycle_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@cycle_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@cycle_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="cycle_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($cycle_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_hist>
      <PDBo:refine_hist rdf:about="{$base}/refine_hist/{$cycle_id_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_hist>
      </PDBo:has_refine_hist>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_ls_classCategory/PDBx:refine_ls_class">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_ls_class>
      <PDBo:refine_ls_class rdf:about="{$base}/refine_ls_class/{$code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_ls_class>
      </PDBo:has_refine_ls_class>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_ls_restrCategory/PDBx:refine_ls_restr">
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_ls_restr>
      <PDBo:refine_ls_restr rdf:about="{$base}/refine_ls_restr/{$pdbx_refine_id_encoded},{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_ls_restr>
      </PDBo:has_refine_ls_restr>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_ls_restr_ncsCategory/PDBx:refine_ls_restr_ncs">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_ls_restr_ncs>
      <PDBo:refine_ls_restr_ncs rdf:about="{$base}/refine_ls_restr_ncs/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_ls_restr_ncs>
      </PDBo:has_refine_ls_restr_ncs>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_ls_restr_typeCategory/PDBx:refine_ls_restr_type">
      <xsl:variable name="type_truncated"><xsl:choose><xsl:when test="string-length(@type)&lt;64"><xsl:value-of select="@type"/></xsl:when><xsl:when test="contains(@type,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@type,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@type,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="type_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($type_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_ls_restr_type>
      <PDBo:refine_ls_restr_type rdf:about="{$base}/refine_ls_restr_type/{$type_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_ls_restr_type>
      </PDBo:has_refine_ls_restr_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_ls_shellCategory/PDBx:refine_ls_shell">
      <xsl:variable name="d_res_high_truncated"><xsl:choose><xsl:when test="string-length(@d_res_high)&lt;64"><xsl:value-of select="@d_res_high"/></xsl:when><xsl:when test="contains(@d_res_high,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@d_res_high,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@d_res_high,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="d_res_high_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($d_res_high_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_ls_shell>
      <PDBo:refine_ls_shell rdf:about="{$base}/refine_ls_shell/{$d_res_high_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_ls_shell>
      </PDBo:has_refine_ls_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refine_occupancyCategory/PDBx:refine_occupancy">
      <xsl:variable name="class_truncated"><xsl:choose><xsl:when test="string-length(@class)&lt;64"><xsl:value-of select="@class"/></xsl:when><xsl:when test="contains(@class,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@class,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@class,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="class_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($class_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_refine_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_refine_id)&lt;64"><xsl:value-of select="@pdbx_refine_id"/></xsl:when><xsl:when test="contains(@pdbx_refine_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_refine_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_refine_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_refine_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_refine_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refine_occupancy>
      <PDBo:refine_occupancy rdf:about="{$base}/refine_occupancy/{$class_encoded},{$pdbx_refine_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refine_occupancy>
      </PDBo:has_refine_occupancy>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:reflnCategory/PDBx:refln">
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refln>
      <PDBo:refln rdf:about="{$base}/refln/{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refln>
      </PDBo:has_refln>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:refln_sys_absCategory/PDBx:refln_sys_abs">
      <xsl:variable name="index_h_truncated"><xsl:choose><xsl:when test="string-length(@index_h)&lt;64"><xsl:value-of select="@index_h"/></xsl:when><xsl:when test="contains(@index_h,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_h,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_h,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_h_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_h_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_k_truncated"><xsl:choose><xsl:when test="string-length(@index_k)&lt;64"><xsl:value-of select="@index_k"/></xsl:when><xsl:when test="contains(@index_k,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_k,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_k,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_k_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_k_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="index_l_truncated"><xsl:choose><xsl:when test="string-length(@index_l)&lt;64"><xsl:value-of select="@index_l"/></xsl:when><xsl:when test="contains(@index_l,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@index_l,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@index_l,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="index_l_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($index_l_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_refln_sys_abs>
      <PDBo:refln_sys_abs rdf:about="{$base}/refln_sys_abs/{$index_h_encoded},{$index_k_encoded},{$index_l_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:refln_sys_abs>
      </PDBo:has_refln_sys_abs>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:reflnsCategory/PDBx:reflns">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_reflns>
      <PDBo:reflns rdf:about="{$base}/reflns/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/{translate(PDBx:entry_id,' ^','__')}">
	    <PDBo:referenced_by_reflns rdf:resource="{$base}/reflns/{$pdbx_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_84_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:reflns>
      </PDBo:has_reflns>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:reflns_classCategory/PDBx:reflns_class">
      <xsl:variable name="code_truncated"><xsl:choose><xsl:when test="string-length(@code)&lt;64"><xsl:value-of select="@code"/></xsl:when><xsl:when test="contains(@code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_reflns_class>
      <PDBo:reflns_class rdf:about="{$base}/reflns_class/{$code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:reflns_class>
      </PDBo:has_reflns_class>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:reflns_scaleCategory/PDBx:reflns_scale">
      <xsl:variable name="group_code_truncated"><xsl:choose><xsl:when test="string-length(@group_code)&lt;64"><xsl:value-of select="@group_code"/></xsl:when><xsl:when test="contains(@group_code,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@group_code,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@group_code,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="group_code_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($group_code_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_reflns_scale>
      <PDBo:reflns_scale rdf:about="{$base}/reflns_scale/{$group_code_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:reflns_scale>
      </PDBo:has_reflns_scale>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:reflns_shellCategory/PDBx:reflns_shell">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_reflns_shell>
      <PDBo:reflns_shell rdf:about="{$base}/reflns_shell/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:reflns_shell>
      </PDBo:has_reflns_shell>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:softwareCategory/PDBx:software">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_software>
      <PDBo:software rdf:about="{$base}/software/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:software>
      </PDBo:has_software>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:space_groupCategory/PDBx:space_group">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_space_group>
      <PDBo:space_group rdf:about="{$base}/space_group/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:space_group>
      </PDBo:has_space_group>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:space_group_symopCategory/PDBx:space_group_symop">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_space_group_symop>
      <PDBo:space_group_symop rdf:about="{$base}/space_group_symop/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:space_group_symop>
      </PDBo:has_space_group_symop>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:structCategory/PDBx:struct">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct>
      <PDBo:struct rdf:about="{$base}/struct/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_struct rdf:resource="{$base}/struct/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_85_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct>
      </PDBo:has_struct>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_asymCategory/PDBx:struct_asym">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_asym>
      <PDBo:struct_asym rdf:about="{$base}/struct_asym/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entity_id!='' and @id!=''">
	<owl:sameAs>
      <xsl:variable name="PDBx_entity_id_truncated"><xsl:choose><xsl:when test="string-length(PDBx:entity_id)&lt;64"><xsl:value-of select="PDBx:entity_id"/></xsl:when><xsl:when test="contains(PDBx:entity_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(PDBx:entity_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(PDBx:entity_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="PDBx_entity_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($PDBx_entity_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
	  <PDBo:struct_asym rdf:about="{$base}/struct_asym/{$PDBx_entity_id_encoded},{$id_encoded}">
	    <rdfs:label>struct_asymUnique_1</rdfs:label>
	  </PDBo:struct_asym>
	</owl:sameAs>
      </xsl:if>
      <xsl:if test="PDBx:entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:entity_id,' ^','__')}">
	    <PDBo:referenced_by_struct_asym rdf:resource="{$base}/struct_asym/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_38_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_asym>
      </PDBo:has_struct_asym>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_biolCategory/PDBx:struct_biol">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_biol>
      <PDBo:struct_biol rdf:about="{$base}/struct_biol/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_biol>
      </PDBo:has_struct_biol>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_biol_genCategory/PDBx:struct_biol_gen">
      <xsl:variable name="asym_id_truncated"><xsl:choose><xsl:when test="string-length(@asym_id)&lt;64"><xsl:value-of select="@asym_id"/></xsl:when><xsl:when test="contains(@asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="symmetry_truncated"><xsl:choose><xsl:when test="string-length(@symmetry)&lt;64"><xsl:value-of select="@symmetry"/></xsl:when><xsl:when test="contains(@symmetry,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@symmetry,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@symmetry,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="symmetry_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($symmetry_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_biol_gen>
      <PDBo:struct_biol_gen rdf:about="{$base}/struct_biol_gen/{$asym_id_encoded},{$biol_id_encoded},{$symmetry_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@asym_id!=''">
	<PDBo:reference_to_struct_asym>
	  <rdf:Description rdf:about="{$base}/struct_asym/">
	    <PDBo:referenced_by_struct_biol_gen rdf:resource="{$base}/struct_biol_gen/{$asym_id_encoded},{$biol_id_encoded},{$symmetry_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_asym>
	<!-- struct_asymKeyref_1_0_7_0 -->
      </xsl:if>
      <xsl:if test="@biol_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/">
	    <PDBo:referenced_by_struct_biol_gen rdf:resource="{$base}/struct_biol_gen/{$asym_id_encoded},{$biol_id_encoded},{$symmetry_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_biol_gen>
      </PDBo:has_struct_biol_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_biol_keywordsCategory/PDBx:struct_biol_keywords">
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="text_truncated"><xsl:choose><xsl:when test="string-length(@text)&lt;64"><xsl:value-of select="@text"/></xsl:when><xsl:when test="contains(@text,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@text,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@text,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="text_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($text_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_biol_keywords>
      <PDBo:struct_biol_keywords rdf:about="{$base}/struct_biol_keywords/{$biol_id_encoded},{$text_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@biol_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/">
	    <PDBo:referenced_by_struct_biol_keywords rdf:resource="{$base}/struct_biol_keywords/{$biol_id_encoded},{$text_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_biol_keywords>
      </PDBo:has_struct_biol_keywords>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_biol_viewCategory/PDBx:struct_biol_view">
      <xsl:variable name="biol_id_truncated"><xsl:choose><xsl:when test="string-length(@biol_id)&lt;64"><xsl:value-of select="@biol_id"/></xsl:when><xsl:when test="contains(@biol_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@biol_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@biol_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="biol_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($biol_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_biol_view>
      <PDBo:struct_biol_view rdf:about="{$base}/struct_biol_view/{$biol_id_encoded},{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@biol_id!=''">
	<PDBo:reference_to_struct_biol>
	  <rdf:Description rdf:about="{$base}/struct_biol/">
	    <PDBo:referenced_by_struct_biol_view rdf:resource="{$base}/struct_biol_view/{$biol_id_encoded},{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_biol>
	<!-- struct_biolKeyref_0_0_5_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_biol_view>
      </PDBo:has_struct_biol_view>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_confCategory/PDBx:struct_conf">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_conf>
      <PDBo:struct_conf rdf:about="{$base}/struct_conf/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:conf_type_id!=''">
	<PDBo:reference_to_struct_conf_type>
	  <rdf:Description rdf:about="{$base}/struct_conf_type/{translate(PDBx:conf_type_id,' ^','__')}">
	    <PDBo:referenced_by_struct_conf rdf:resource="{$base}/struct_conf/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_conf_type>
	<!-- struct_conf_typeKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_conf>
      </PDBo:has_struct_conf>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_conf_typeCategory/PDBx:struct_conf_type">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_conf_type>
      <PDBo:struct_conf_type rdf:about="{$base}/struct_conf_type/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_conf_type>
      </PDBo:has_struct_conf_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_connCategory/PDBx:struct_conn">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_conn>
      <PDBo:struct_conn rdf:about="{$base}/struct_conn/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:conn_type_id!=''">
	<PDBo:reference_to_struct_conn_type>
	  <rdf:Description rdf:about="{$base}/struct_conn_type/{translate(PDBx:conn_type_id,' ^','__')}">
	    <PDBo:referenced_by_struct_conn rdf:resource="{$base}/struct_conn/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_conn_type>
	<!-- struct_conn_typeKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_conn>
      </PDBo:has_struct_conn>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_conn_typeCategory/PDBx:struct_conn_type">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_conn_type>
      <PDBo:struct_conn_type rdf:about="{$base}/struct_conn_type/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_conn_type>
      </PDBo:has_struct_conn_type>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_keywordsCategory/PDBx:struct_keywords">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_keywords>
      <PDBo:struct_keywords rdf:about="{$base}/struct_keywords/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_struct_keywords rdf:resource="{$base}/struct_keywords/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_86_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_keywords>
      </PDBo:has_struct_keywords>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_mon_detailsCategory/PDBx:struct_mon_details">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_mon_details>
      <PDBo:struct_mon_details rdf:about="{$base}/struct_mon_details/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_struct_mon_details rdf:resource="{$base}/struct_mon_details/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_87_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_mon_details>
      </PDBo:has_struct_mon_details>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_mon_nuclCategory/PDBx:struct_mon_nucl">
      <xsl:variable name="label_alt_id_truncated"><xsl:choose><xsl:when test="string-length(@label_alt_id)&lt;64"><xsl:value-of select="@label_alt_id"/></xsl:when><xsl:when test="contains(@label_alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@label_comp_id)&lt;64"><xsl:value-of select="@label_comp_id"/></xsl:when><xsl:when test="contains(@label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@label_seq_id)&lt;64"><xsl:value-of select="@label_seq_id"/></xsl:when><xsl:when test="contains(@label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_mon_nucl>
      <PDBo:struct_mon_nucl rdf:about="{$base}/struct_mon_nucl/{$label_alt_id_encoded},{$label_asym_id_encoded},{$label_comp_id_encoded},{$label_seq_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_mon_nucl>
      </PDBo:has_struct_mon_nucl>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_mon_protCategory/PDBx:struct_mon_prot">
      <xsl:variable name="label_alt_id_truncated"><xsl:choose><xsl:when test="string-length(@label_alt_id)&lt;64"><xsl:value-of select="@label_alt_id"/></xsl:when><xsl:when test="contains(@label_alt_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_alt_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_alt_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_alt_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_alt_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_asym_id_truncated"><xsl:choose><xsl:when test="string-length(@label_asym_id)&lt;64"><xsl:value-of select="@label_asym_id"/></xsl:when><xsl:when test="contains(@label_asym_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_asym_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_asym_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_asym_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_asym_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_comp_id_truncated"><xsl:choose><xsl:when test="string-length(@label_comp_id)&lt;64"><xsl:value-of select="@label_comp_id"/></xsl:when><xsl:when test="contains(@label_comp_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_comp_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_comp_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_comp_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_comp_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="label_seq_id_truncated"><xsl:choose><xsl:when test="string-length(@label_seq_id)&lt;64"><xsl:value-of select="@label_seq_id"/></xsl:when><xsl:when test="contains(@label_seq_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@label_seq_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@label_seq_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="label_seq_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($label_seq_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_mon_prot>
      <PDBo:struct_mon_prot rdf:about="{$base}/struct_mon_prot/{$label_alt_id_encoded},{$label_asym_id_encoded},{$label_comp_id_encoded},{$label_seq_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_mon_prot>
      </PDBo:has_struct_mon_prot>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_mon_prot_cisCategory/PDBx:struct_mon_prot_cis">
      <xsl:variable name="pdbx_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_id)&lt;64"><xsl:value-of select="@pdbx_id"/></xsl:when><xsl:when test="contains(@pdbx_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_mon_prot_cis>
      <PDBo:struct_mon_prot_cis rdf:about="{$base}/struct_mon_prot_cis/{$pdbx_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_mon_prot_cis>
      </PDBo:has_struct_mon_prot_cis>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ncs_domCategory/PDBx:struct_ncs_dom">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_ens_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ens_id)&lt;64"><xsl:value-of select="@pdbx_ens_id"/></xsl:when><xsl:when test="contains(@pdbx_ens_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ens_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ens_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ens_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ens_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ncs_dom>
      <PDBo:struct_ncs_dom rdf:about="{$base}/struct_ncs_dom/{$id_encoded},{$pdbx_ens_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@pdbx_ens_id!=''">
	<PDBo:reference_to_struct_ncs_ens>
	  <rdf:Description rdf:about="{$base}/struct_ncs_ens/">
	    <PDBo:referenced_by_struct_ncs_dom rdf:resource="{$base}/struct_ncs_dom/{$id_encoded},{$pdbx_ens_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ncs_ens>
	<!-- struct_ncs_ensKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ncs_dom>
      </PDBo:has_struct_ncs_dom>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ncs_dom_limCategory/PDBx:struct_ncs_dom_lim">
      <xsl:variable name="dom_id_truncated"><xsl:choose><xsl:when test="string-length(@dom_id)&lt;64"><xsl:value-of select="@dom_id"/></xsl:when><xsl:when test="contains(@dom_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dom_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dom_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dom_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dom_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_component_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_component_id)&lt;64"><xsl:value-of select="@pdbx_component_id"/></xsl:when><xsl:when test="contains(@pdbx_component_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_component_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_component_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_component_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_component_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="pdbx_ens_id_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ens_id)&lt;64"><xsl:value-of select="@pdbx_ens_id"/></xsl:when><xsl:when test="contains(@pdbx_ens_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ens_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ens_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ens_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ens_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ncs_dom_lim>
      <PDBo:struct_ncs_dom_lim rdf:about="{$base}/struct_ncs_dom_lim/{$dom_id_encoded},{$pdbx_component_id_encoded},{$pdbx_ens_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@dom_id!='' and @pdbx_ens_id!=''">
	<PDBo:reference_to_struct_ncs_dom>
	  <rdf:Description rdf:about="{$base}/struct_ncs_dom/,">
	    <PDBo:referenced_by_struct_ncs_dom_lim rdf:resource="{$base}/struct_ncs_dom_lim/{$dom_id_encoded},{$pdbx_component_id_encoded},{$pdbx_ens_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ncs_dom>
	<!-- struct_ncs_domKeyref_2_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ncs_dom_lim>
      </PDBo:has_struct_ncs_dom_lim>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ncs_ensCategory/PDBx:struct_ncs_ens">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ncs_ens>
      <PDBo:struct_ncs_ens rdf:about="{$base}/struct_ncs_ens/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ncs_ens>
      </PDBo:has_struct_ncs_ens>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ncs_ens_genCategory/PDBx:struct_ncs_ens_gen">
      <xsl:variable name="dom_id_1_truncated"><xsl:choose><xsl:when test="string-length(@dom_id_1)&lt;64"><xsl:value-of select="@dom_id_1"/></xsl:when><xsl:when test="contains(@dom_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dom_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dom_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dom_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dom_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="dom_id_2_truncated"><xsl:choose><xsl:when test="string-length(@dom_id_2)&lt;64"><xsl:value-of select="@dom_id_2"/></xsl:when><xsl:when test="contains(@dom_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@dom_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@dom_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="dom_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($dom_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="ens_id_truncated"><xsl:choose><xsl:when test="string-length(@ens_id)&lt;64"><xsl:value-of select="@ens_id"/></xsl:when><xsl:when test="contains(@ens_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@ens_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@ens_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="ens_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($ens_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="oper_id_truncated"><xsl:choose><xsl:when test="string-length(@oper_id)&lt;64"><xsl:value-of select="@oper_id"/></xsl:when><xsl:when test="contains(@oper_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@oper_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@oper_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="oper_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($oper_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ncs_ens_gen>
      <PDBo:struct_ncs_ens_gen rdf:about="{$base}/struct_ncs_ens_gen/{$dom_id_1_encoded},{$dom_id_2_encoded},{$ens_id_encoded},{$oper_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@ens_id!=''">
	<PDBo:reference_to_struct_ncs_ens>
	  <rdf:Description rdf:about="{$base}/struct_ncs_ens/">
	    <PDBo:referenced_by_struct_ncs_ens_gen rdf:resource="{$base}/struct_ncs_ens_gen/{$dom_id_1_encoded},{$dom_id_2_encoded},{$ens_id_encoded},{$oper_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ncs_ens>
	<!-- struct_ncs_ensKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:if test="@oper_id!=''">
	<PDBo:reference_to_struct_ncs_oper>
	  <rdf:Description rdf:about="{$base}/struct_ncs_oper/">
	    <PDBo:referenced_by_struct_ncs_ens_gen rdf:resource="{$base}/struct_ncs_ens_gen/{$dom_id_1_encoded},{$dom_id_2_encoded},{$ens_id_encoded},{$oper_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ncs_oper>
	<!-- struct_ncs_operKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ncs_ens_gen>
      </PDBo:has_struct_ncs_ens_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ncs_operCategory/PDBx:struct_ncs_oper">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ncs_oper>
      <PDBo:struct_ncs_oper rdf:about="{$base}/struct_ncs_oper/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ncs_oper>
      </PDBo:has_struct_ncs_oper>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_refCategory/PDBx:struct_ref">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ref>
      <PDBo:struct_ref rdf:about="{$base}/struct_ref/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:entity_id!=''">
	<PDBo:reference_to_entity>
	  <rdf:Description rdf:about="{$base}/entity/{translate(PDBx:entity_id,' ^','__')}">
	    <PDBo:referenced_by_struct_ref rdf:resource="{$base}/struct_ref/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entity>
	<!-- entityKeyref_0_0_39_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ref>
      </PDBo:has_struct_ref>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ref_seqCategory/PDBx:struct_ref_seq">
      <xsl:variable name="align_id_truncated"><xsl:choose><xsl:when test="string-length(@align_id)&lt;64"><xsl:value-of select="@align_id"/></xsl:when><xsl:when test="contains(@align_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@align_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@align_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="align_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($align_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ref_seq>
      <PDBo:struct_ref_seq rdf:about="{$base}/struct_ref_seq/{$align_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:ref_id!=''">
	<PDBo:reference_to_struct_ref>
	  <rdf:Description rdf:about="{$base}/struct_ref/{translate(PDBx:ref_id,' ^','__')}">
	    <PDBo:referenced_by_struct_ref_seq rdf:resource="{$base}/struct_ref_seq/{$align_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ref>
	<!-- struct_refKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ref_seq>
      </PDBo:has_struct_ref_seq>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_ref_seq_difCategory/PDBx:struct_ref_seq_dif">
      <xsl:variable name="pdbx_ordinal_truncated"><xsl:choose><xsl:when test="string-length(@pdbx_ordinal)&lt;64"><xsl:value-of select="@pdbx_ordinal"/></xsl:when><xsl:when test="contains(@pdbx_ordinal,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@pdbx_ordinal,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@pdbx_ordinal,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="pdbx_ordinal_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($pdbx_ordinal_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_ref_seq_dif>
      <PDBo:struct_ref_seq_dif rdf:about="{$base}/struct_ref_seq_dif/{$pdbx_ordinal_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:align_id!=''">
	<PDBo:reference_to_struct_ref_seq>
	  <rdf:Description rdf:about="{$base}/struct_ref_seq/{translate(PDBx:align_id,' ^','__')}">
	    <PDBo:referenced_by_struct_ref_seq_dif rdf:resource="{$base}/struct_ref_seq_dif/{$pdbx_ordinal_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_ref_seq>
	<!-- struct_ref_seqKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_ref_seq_dif>
      </PDBo:has_struct_ref_seq_dif>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_sheetCategory/PDBx:struct_sheet">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_sheet>
      <PDBo:struct_sheet rdf:about="{$base}/struct_sheet/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_sheet>
      </PDBo:has_struct_sheet>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_sheet_hbondCategory/PDBx:struct_sheet_hbond">
      <xsl:variable name="range_id_1_truncated"><xsl:choose><xsl:when test="string-length(@range_id_1)&lt;64"><xsl:value-of select="@range_id_1"/></xsl:when><xsl:when test="contains(@range_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="range_id_2_truncated"><xsl:choose><xsl:when test="string-length(@range_id_2)&lt;64"><xsl:value-of select="@range_id_2"/></xsl:when><xsl:when test="contains(@range_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sheet_id_truncated"><xsl:choose><xsl:when test="string-length(@sheet_id)&lt;64"><xsl:value-of select="@sheet_id"/></xsl:when><xsl:when test="contains(@sheet_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sheet_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sheet_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sheet_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sheet_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_sheet_hbond>
      <PDBo:struct_sheet_hbond rdf:about="{$base}/struct_sheet_hbond/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@sheet_id!=''">
	<PDBo:reference_to_struct_sheet>
	  <rdf:Description rdf:about="{$base}/struct_sheet/">
	    <PDBo:referenced_by_struct_sheet_hbond rdf:resource="{$base}/struct_sheet_hbond/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_sheet>
	<!-- struct_sheetKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_sheet_hbond>
      </PDBo:has_struct_sheet_hbond>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_sheet_orderCategory/PDBx:struct_sheet_order">
      <xsl:variable name="range_id_1_truncated"><xsl:choose><xsl:when test="string-length(@range_id_1)&lt;64"><xsl:value-of select="@range_id_1"/></xsl:when><xsl:when test="contains(@range_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="range_id_2_truncated"><xsl:choose><xsl:when test="string-length(@range_id_2)&lt;64"><xsl:value-of select="@range_id_2"/></xsl:when><xsl:when test="contains(@range_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sheet_id_truncated"><xsl:choose><xsl:when test="string-length(@sheet_id)&lt;64"><xsl:value-of select="@sheet_id"/></xsl:when><xsl:when test="contains(@sheet_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sheet_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sheet_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sheet_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sheet_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_sheet_order>
      <PDBo:struct_sheet_order rdf:about="{$base}/struct_sheet_order/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@sheet_id!=''">
	<PDBo:reference_to_struct_sheet>
	  <rdf:Description rdf:about="{$base}/struct_sheet/">
	    <PDBo:referenced_by_struct_sheet_order rdf:resource="{$base}/struct_sheet_order/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_sheet>
	<!-- struct_sheetKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_sheet_order>
      </PDBo:has_struct_sheet_order>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_sheet_rangeCategory/PDBx:struct_sheet_range">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sheet_id_truncated"><xsl:choose><xsl:when test="string-length(@sheet_id)&lt;64"><xsl:value-of select="@sheet_id"/></xsl:when><xsl:when test="contains(@sheet_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sheet_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sheet_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sheet_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sheet_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_sheet_range>
      <PDBo:struct_sheet_range rdf:about="{$base}/struct_sheet_range/{$id_encoded},{$sheet_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@sheet_id!=''">
	<PDBo:reference_to_struct_sheet>
	  <rdf:Description rdf:about="{$base}/struct_sheet/">
	    <PDBo:referenced_by_struct_sheet_range rdf:resource="{$base}/struct_sheet_range/{$id_encoded},{$sheet_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_sheet>
	<!-- struct_sheetKeyref_0_0_3_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_sheet_range>
      </PDBo:has_struct_sheet_range>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_sheet_topologyCategory/PDBx:struct_sheet_topology">
      <xsl:variable name="range_id_1_truncated"><xsl:choose><xsl:when test="string-length(@range_id_1)&lt;64"><xsl:value-of select="@range_id_1"/></xsl:when><xsl:when test="contains(@range_id_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="range_id_2_truncated"><xsl:choose><xsl:when test="string-length(@range_id_2)&lt;64"><xsl:value-of select="@range_id_2"/></xsl:when><xsl:when test="contains(@range_id_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@range_id_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@range_id_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="range_id_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($range_id_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="sheet_id_truncated"><xsl:choose><xsl:when test="string-length(@sheet_id)&lt;64"><xsl:value-of select="@sheet_id"/></xsl:when><xsl:when test="contains(@sheet_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@sheet_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@sheet_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="sheet_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($sheet_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_sheet_topology>
      <PDBo:struct_sheet_topology rdf:about="{$base}/struct_sheet_topology/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@sheet_id!=''">
	<PDBo:reference_to_struct_sheet>
	  <rdf:Description rdf:about="{$base}/struct_sheet/">
	    <PDBo:referenced_by_struct_sheet_topology rdf:resource="{$base}/struct_sheet_topology/{$range_id_1_encoded},{$range_id_2_encoded},{$sheet_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_sheet>
	<!-- struct_sheetKeyref_0_0_4_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_sheet_topology>
      </PDBo:has_struct_sheet_topology>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_siteCategory/PDBx:struct_site">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_site>
      <PDBo:struct_site rdf:about="{$base}/struct_site/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_site>
      </PDBo:has_struct_site>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_site_genCategory/PDBx:struct_site_gen">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="site_id_truncated"><xsl:choose><xsl:when test="string-length(@site_id)&lt;64"><xsl:value-of select="@site_id"/></xsl:when><xsl:when test="contains(@site_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_site_gen>
      <PDBo:struct_site_gen rdf:about="{$base}/struct_site_gen/{$id_encoded},{$site_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@site_id!=''">
	<PDBo:reference_to_struct_site>
	  <rdf:Description rdf:about="{$base}/struct_site/">
	    <PDBo:referenced_by_struct_site_gen rdf:resource="{$base}/struct_site_gen/{$id_encoded},{$site_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_site>
	<!-- struct_siteKeyref_0_0_0_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_site_gen>
      </PDBo:has_struct_site_gen>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_site_keywordsCategory/PDBx:struct_site_keywords">
      <xsl:variable name="site_id_truncated"><xsl:choose><xsl:when test="string-length(@site_id)&lt;64"><xsl:value-of select="@site_id"/></xsl:when><xsl:when test="contains(@site_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@site_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@site_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="site_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($site_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="text_truncated"><xsl:choose><xsl:when test="string-length(@text)&lt;64"><xsl:value-of select="@text"/></xsl:when><xsl:when test="contains(@text,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@text,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@text,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="text_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($text_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_site_keywords>
      <PDBo:struct_site_keywords rdf:about="{$base}/struct_site_keywords/{$site_id_encoded},{$text_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@site_id!=''">
	<PDBo:reference_to_struct_site>
	  <rdf:Description rdf:about="{$base}/struct_site/">
	    <PDBo:referenced_by_struct_site_keywords rdf:resource="{$base}/struct_site_keywords/{$site_id_encoded},{$text_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_site>
	<!-- struct_siteKeyref_0_0_1_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_site_keywords>
      </PDBo:has_struct_site_keywords>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:struct_site_viewCategory/PDBx:struct_site_view">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_struct_site_view>
      <PDBo:struct_site_view rdf:about="{$base}/struct_site_view/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="PDBx:site_id!=''">
	<PDBo:reference_to_struct_site>
	  <rdf:Description rdf:about="{$base}/struct_site/{translate(PDBx:site_id,' ^','__')}">
	    <PDBo:referenced_by_struct_site_view rdf:resource="{$base}/struct_site_view/{$id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_struct_site>
	<!-- struct_siteKeyref_0_0_2_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:struct_site_view>
      </PDBo:has_struct_site_view>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:symmetryCategory/PDBx:symmetry">
      <xsl:variable name="entry_id_truncated"><xsl:choose><xsl:when test="string-length(@entry_id)&lt;64"><xsl:value-of select="@entry_id"/></xsl:when><xsl:when test="contains(@entry_id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@entry_id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@entry_id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="entry_id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($entry_id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_symmetry>
      <PDBo:symmetry rdf:about="{$base}/symmetry/{$entry_id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:if test="@entry_id!=''">
	<PDBo:reference_to_entry>
	  <rdf:Description rdf:about="{$base}/entry/">
	    <PDBo:referenced_by_symmetry rdf:resource="{$base}/symmetry/{$entry_id_encoded}"/>
	  </rdf:Description>
	</PDBo:reference_to_entry>
	<!-- entryKeyref_0_0_88_0 -->
      </xsl:if>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:symmetry>
      </PDBo:has_symmetry>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:symmetry_equivCategory/PDBx:symmetry_equiv">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_symmetry_equiv>
      <PDBo:symmetry_equiv rdf:about="{$base}/symmetry_equiv/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:symmetry_equiv>
      </PDBo:has_symmetry_equiv>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:valence_paramCategory/PDBx:valence_param">
      <xsl:variable name="atom_1_truncated"><xsl:choose><xsl:when test="string-length(@atom_1)&lt;64"><xsl:value-of select="@atom_1"/></xsl:when><xsl:when test="contains(@atom_1,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_1,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_1,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_1_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_1_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_1_valence_truncated"><xsl:choose><xsl:when test="string-length(@atom_1_valence)&lt;64"><xsl:value-of select="@atom_1_valence"/></xsl:when><xsl:when test="contains(@atom_1_valence,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_1_valence,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_1_valence,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_1_valence_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_1_valence_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_2_truncated"><xsl:choose><xsl:when test="string-length(@atom_2)&lt;64"><xsl:value-of select="@atom_2"/></xsl:when><xsl:when test="contains(@atom_2,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_2,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_2,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_2_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_2_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <xsl:variable name="atom_2_valence_truncated"><xsl:choose><xsl:when test="string-length(@atom_2_valence)&lt;64"><xsl:value-of select="@atom_2_valence"/></xsl:when><xsl:when test="contains(@atom_2_valence,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@atom_2_valence,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@atom_2_valence,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="atom_2_valence_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($atom_2_valence_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_valence_param>
      <PDBo:valence_param rdf:about="{$base}/valence_param/{$atom_1_encoded},{$atom_1_valence_encoded},{$atom_2_encoded},{$atom_2_valence_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:valence_param>
      </PDBo:has_valence_param>
  </xsl:template>

  <xsl:template match="PDBx:datablock/PDBx:valence_refCategory/PDBx:valence_ref">
      <xsl:variable name="id_truncated"><xsl:choose><xsl:when test="string-length(@id)&lt;64"><xsl:value-of select="@id"/></xsl:when><xsl:when test="contains(@id,',')"><xsl:call-template name="substring-before-last"><xsl:with-param name="str" select="substring(@id,1,64)"/><xsl:with-param name="substr">,</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring(@id,1,64)"/></xsl:otherwise></xsl:choose></xsl:variable>
      <xsl:variable name="id_encoded"><xsl:call-template name="url-encode"><xsl:with-param name="str" select="translate(normalize-space($id_truncated),' ^','__')"/></xsl:call-template></xsl:variable>
      <PDBo:has_valence_ref>
      <PDBo:valence_ref rdf:about="{$base}/valence_ref/{$id_encoded}">
      <PDBo:of_datablock rdf:resource="{$base}"/>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates select="@*" mode="linked"/>
      <xsl:apply-templates/>
      <xsl:apply-templates mode="linked"/>
      </PDBo:valence_ref>
      </PDBo:has_valence_ref>
  </xsl:template>

  <xsl:template match="*[@xsi:nil='true']"/>
  <xsl:template match="*|text()|@*"/>
  <xsl:template match="*|text()|@*" mode="linked"/>

</xsl:stylesheet>